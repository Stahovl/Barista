id: Zenject-Signals
language: CSharp
name:
  Default: Zenject-Signals
qualifiedName:
  Default: Zenject-Signals
type: Assembly
modifiers: {}
items:
- id: Zenject
  commentId: N:Zenject
  language: CSharp
  name:
    CSharp: Zenject
    VB: Zenject
  nameWithType:
    CSharp: Zenject
    VB: Zenject
  qualifiedName:
    CSharp: Zenject
    VB: Zenject
  type: Namespace
  assemblies:
  - Zenject-Signals
  modifiers: {}
  items:
  - id: Zenject.BindSignalFromBinder`2
    commentId: T:Zenject.BindSignalFromBinder`2
    language: CSharp
    name:
      CSharp: BindSignalFromBinder<TObject, TSignal>
      VB: BindSignalFromBinder(Of TObject, TSignal)
    nameWithType:
      CSharp: BindSignalFromBinder<TObject, TSignal>
      VB: BindSignalFromBinder(Of TObject, TSignal)
    qualifiedName:
      CSharp: Zenject.BindSignalFromBinder<TObject, TSignal>
      VB: Zenject.BindSignalFromBinder(Of TObject, TSignal)
    type: Class
    assemblies:
    - Zenject-Signals
    namespace: Zenject
    source:
      remote:
        path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalFromBinder.cs
      id: BindSignalFromBinder
      path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalFromBinder.cs
      startLine: 5
    syntax:
      content:
        CSharp: public class BindSignalFromBinder<TObject, TSignal>
        VB: Public Class BindSignalFromBinder(Of TObject, TSignal)
      typeParameters:
      - id: TObject
      - id: TSignal
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    extensionMethods:
    - Zenject.BindSignalFromBinder`2.ModestTree.LinqExtensions.Yield``1
    - Zenject.BindSignalFromBinder`2.ModestTree.LinqExtensions.Yield``1
    - Zenject.BindSignalFromBinder`2.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.BindSignalFromBinder{{TObject},{TSignal}},{TProperty}},UniRx.FrameCountType,System.Boolean)
    - Zenject.BindSignalFromBinder`2.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.BindSignalFromBinder{{TObject},{TSignal}},{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
    - Zenject.BindSignalFromBinder`2.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.BindSignalFromBinder{{TObject},{TSignal}},{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Zenject.BindSignalFromBinder`2.#ctor(Zenject.SignalBindingBindInfo,Zenject.BindStatement,System.Func{`0,System.Action{`1}},Zenject.DiContainer)
      commentId: M:Zenject.BindSignalFromBinder`2.#ctor(Zenject.SignalBindingBindInfo,Zenject.BindStatement,System.Func{`0,System.Action{`1}},Zenject.DiContainer)
      language: CSharp
      name:
        CSharp: BindSignalFromBinder(SignalBindingBindInfo, BindStatement, Func<TObject, Action<TSignal>>, DiContainer)
        VB: BindSignalFromBinder(SignalBindingBindInfo, BindStatement, Func(Of TObject, Action(Of TSignal)), DiContainer)
      nameWithType:
        CSharp: BindSignalFromBinder<TObject, TSignal>.BindSignalFromBinder(SignalBindingBindInfo, BindStatement, Func<TObject, Action<TSignal>>, DiContainer)
        VB: BindSignalFromBinder(Of TObject, TSignal).BindSignalFromBinder(SignalBindingBindInfo, BindStatement, Func(Of TObject, Action(Of TSignal)), DiContainer)
      qualifiedName:
        CSharp: Zenject.BindSignalFromBinder<TObject, TSignal>.BindSignalFromBinder(Zenject.SignalBindingBindInfo, Zenject.BindStatement, System.Func<TObject, System.Action<TSignal>>, Zenject.DiContainer)
        VB: Zenject.BindSignalFromBinder(Of TObject, TSignal).BindSignalFromBinder(Zenject.SignalBindingBindInfo, Zenject.BindStatement, System.Func(Of TObject, System.Action(Of TSignal)), Zenject.DiContainer)
      type: Constructor
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalFromBinder.cs
        id: .ctor
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalFromBinder.cs
        startLine: 12
      syntax:
        content:
          CSharp: public BindSignalFromBinder(SignalBindingBindInfo signalBindInfo, BindStatement bindStatement, Func<TObject, Action<TSignal>> methodGetter, DiContainer container)
          VB: Public Sub New(signalBindInfo As SignalBindingBindInfo, bindStatement As BindStatement, methodGetter As Func(Of TObject, Action(Of TSignal)), container As DiContainer)
        parameters:
        - id: signalBindInfo
          type: Zenject.SignalBindingBindInfo
        - id: bindStatement
          type: Zenject.BindStatement
        - id: methodGetter
          type: System.Func{{TObject},System.Action{{TSignal}}}
        - id: container
          type: Zenject.DiContainer
      overload: Zenject.BindSignalFromBinder`2.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.BindSignalFromBinder`2.FromResolve
      commentId: M:Zenject.BindSignalFromBinder`2.FromResolve
      language: CSharp
      name:
        CSharp: FromResolve()
        VB: FromResolve()
      nameWithType:
        CSharp: BindSignalFromBinder<TObject, TSignal>.FromResolve()
        VB: BindSignalFromBinder(Of TObject, TSignal).FromResolve()
      qualifiedName:
        CSharp: Zenject.BindSignalFromBinder<TObject, TSignal>.FromResolve()
        VB: Zenject.BindSignalFromBinder(Of TObject, TSignal).FromResolve()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalFromBinder.cs
        id: FromResolve
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalFromBinder.cs
        startLine: 22
      syntax:
        content:
          CSharp: public SignalCopyBinder FromResolve()
          VB: Public Function FromResolve As SignalCopyBinder
        return:
          type: Zenject.SignalCopyBinder
      overload: Zenject.BindSignalFromBinder`2.FromResolve*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.BindSignalFromBinder`2.FromResolveAll
      commentId: M:Zenject.BindSignalFromBinder`2.FromResolveAll
      language: CSharp
      name:
        CSharp: FromResolveAll()
        VB: FromResolveAll()
      nameWithType:
        CSharp: BindSignalFromBinder<TObject, TSignal>.FromResolveAll()
        VB: BindSignalFromBinder(Of TObject, TSignal).FromResolveAll()
      qualifiedName:
        CSharp: Zenject.BindSignalFromBinder<TObject, TSignal>.FromResolveAll()
        VB: Zenject.BindSignalFromBinder(Of TObject, TSignal).FromResolveAll()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalFromBinder.cs
        id: FromResolveAll
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalFromBinder.cs
        startLine: 27
      syntax:
        content:
          CSharp: public SignalCopyBinder FromResolveAll()
          VB: Public Function FromResolveAll As SignalCopyBinder
        return:
          type: Zenject.SignalCopyBinder
      overload: Zenject.BindSignalFromBinder`2.FromResolveAll*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.BindSignalFromBinder`2.FromNew
      commentId: M:Zenject.BindSignalFromBinder`2.FromNew
      language: CSharp
      name:
        CSharp: FromNew()
        VB: FromNew()
      nameWithType:
        CSharp: BindSignalFromBinder<TObject, TSignal>.FromNew()
        VB: BindSignalFromBinder(Of TObject, TSignal).FromNew()
      qualifiedName:
        CSharp: Zenject.BindSignalFromBinder<TObject, TSignal>.FromNew()
        VB: Zenject.BindSignalFromBinder(Of TObject, TSignal).FromNew()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalFromBinder.cs
        id: FromNew
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalFromBinder.cs
        startLine: 32
      syntax:
        content:
          CSharp: public SignalCopyBinder FromNew()
          VB: Public Function FromNew As SignalCopyBinder
        return:
          type: Zenject.SignalCopyBinder
      overload: Zenject.BindSignalFromBinder`2.FromNew*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.BindSignalFromBinder`2.From(System.Action{Zenject.ConcreteBinderGeneric{`0}})
      commentId: M:Zenject.BindSignalFromBinder`2.From(System.Action{Zenject.ConcreteBinderGeneric{`0}})
      language: CSharp
      name:
        CSharp: From(Action<ConcreteBinderGeneric<TObject>>)
        VB: From(Action(Of ConcreteBinderGeneric(Of TObject)))
      nameWithType:
        CSharp: BindSignalFromBinder<TObject, TSignal>.From(Action<ConcreteBinderGeneric<TObject>>)
        VB: BindSignalFromBinder(Of TObject, TSignal).From(Action(Of ConcreteBinderGeneric(Of TObject)))
      qualifiedName:
        CSharp: Zenject.BindSignalFromBinder<TObject, TSignal>.From(System.Action<Zenject.ConcreteBinderGeneric<TObject>>)
        VB: Zenject.BindSignalFromBinder(Of TObject, TSignal).From(System.Action(Of Zenject.ConcreteBinderGeneric(Of TObject)))
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalFromBinder.cs
        id: From
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalFromBinder.cs
        startLine: 37
      syntax:
        content:
          CSharp: public SignalCopyBinder From(Action<ConcreteBinderGeneric<TObject>> objectBindCallback)
          VB: Public Function From(objectBindCallback As Action(Of ConcreteBinderGeneric(Of TObject))) As SignalCopyBinder
        parameters:
        - id: objectBindCallback
          type: System.Action{Zenject.ConcreteBinderGeneric{{TObject}}}
        return:
          type: Zenject.SignalCopyBinder
      overload: Zenject.BindSignalFromBinder`2.From*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Zenject.BindSignalIdToBinder`1
    commentId: T:Zenject.BindSignalIdToBinder`1
    language: CSharp
    name:
      CSharp: BindSignalIdToBinder<TSignal>
      VB: BindSignalIdToBinder(Of TSignal)
    nameWithType:
      CSharp: BindSignalIdToBinder<TSignal>
      VB: BindSignalIdToBinder(Of TSignal)
    qualifiedName:
      CSharp: Zenject.BindSignalIdToBinder<TSignal>
      VB: Zenject.BindSignalIdToBinder(Of TSignal)
    type: Class
    assemblies:
    - Zenject-Signals
    namespace: Zenject
    source:
      remote:
        path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalIdToBinder.cs
      id: BindSignalIdToBinder
      path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalIdToBinder.cs
      startLine: 5
    syntax:
      content:
        CSharp: 'public class BindSignalIdToBinder<TSignal> : BindSignalToBinder<TSignal>'
        VB: >-
          Public Class BindSignalIdToBinder(Of TSignal)

              Inherits BindSignalToBinder(Of TSignal)
      typeParameters:
      - id: TSignal
    inheritance:
    - System.Object
    - Zenject.BindSignalToBinder{{TSignal}}
    inheritedMembers:
    - Zenject.BindSignalToBinder{{TSignal}}.SignalBindInfo
    - Zenject.BindSignalToBinder{{TSignal}}.ToMethod(System.Action{{TSignal}})
    - Zenject.BindSignalToBinder{{TSignal}}.ToMethod(System.Action)
    - Zenject.BindSignalToBinder{{TSignal}}.ToMethod``1(System.Action{{TObject},{TSignal}})
    - Zenject.BindSignalToBinder{{TSignal}}.ToMethod``1(System.Func{{TObject},System.Action})
    - Zenject.BindSignalToBinder{{TSignal}}.ToMethod``1(System.Func{{TObject},System.Action{{TSignal}}})
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    extensionMethods:
    - Zenject.BindSignalIdToBinder`1.ModestTree.LinqExtensions.Yield``1
    - Zenject.BindSignalIdToBinder`1.ModestTree.LinqExtensions.Yield``1
    - Zenject.BindSignalIdToBinder`1.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.BindSignalIdToBinder{{TSignal}},{TProperty}},UniRx.FrameCountType,System.Boolean)
    - Zenject.BindSignalIdToBinder`1.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.BindSignalIdToBinder{{TSignal}},{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
    - Zenject.BindSignalIdToBinder`1.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.BindSignalIdToBinder{{TSignal}},{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Zenject.BindSignalIdToBinder`1.#ctor(Zenject.DiContainer,Zenject.SignalBindingBindInfo)
      commentId: M:Zenject.BindSignalIdToBinder`1.#ctor(Zenject.DiContainer,Zenject.SignalBindingBindInfo)
      language: CSharp
      name:
        CSharp: BindSignalIdToBinder(DiContainer, SignalBindingBindInfo)
        VB: BindSignalIdToBinder(DiContainer, SignalBindingBindInfo)
      nameWithType:
        CSharp: BindSignalIdToBinder<TSignal>.BindSignalIdToBinder(DiContainer, SignalBindingBindInfo)
        VB: BindSignalIdToBinder(Of TSignal).BindSignalIdToBinder(DiContainer, SignalBindingBindInfo)
      qualifiedName:
        CSharp: Zenject.BindSignalIdToBinder<TSignal>.BindSignalIdToBinder(Zenject.DiContainer, Zenject.SignalBindingBindInfo)
        VB: Zenject.BindSignalIdToBinder(Of TSignal).BindSignalIdToBinder(Zenject.DiContainer, Zenject.SignalBindingBindInfo)
      type: Constructor
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalIdToBinder.cs
        id: .ctor
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalIdToBinder.cs
        startLine: 7
      syntax:
        content:
          CSharp: public BindSignalIdToBinder(DiContainer container, SignalBindingBindInfo signalBindInfo)
          VB: Public Sub New(container As DiContainer, signalBindInfo As SignalBindingBindInfo)
        parameters:
        - id: container
          type: Zenject.DiContainer
        - id: signalBindInfo
          type: Zenject.SignalBindingBindInfo
      overload: Zenject.BindSignalIdToBinder`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.BindSignalIdToBinder`1.WithId(System.Object)
      commentId: M:Zenject.BindSignalIdToBinder`1.WithId(System.Object)
      language: CSharp
      name:
        CSharp: WithId(Object)
        VB: WithId(Object)
      nameWithType:
        CSharp: BindSignalIdToBinder<TSignal>.WithId(Object)
        VB: BindSignalIdToBinder(Of TSignal).WithId(Object)
      qualifiedName:
        CSharp: Zenject.BindSignalIdToBinder<TSignal>.WithId(System.Object)
        VB: Zenject.BindSignalIdToBinder(Of TSignal).WithId(System.Object)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalIdToBinder.cs
        id: WithId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalIdToBinder.cs
        startLine: 12
      syntax:
        content:
          CSharp: public BindSignalToBinder<TSignal> WithId(object identifier)
          VB: Public Function WithId(identifier As Object) As BindSignalToBinder(Of TSignal)
        parameters:
        - id: identifier
          type: System.Object
        return:
          type: Zenject.BindSignalToBinder{{TSignal}}
      overload: Zenject.BindSignalIdToBinder`1.WithId*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Zenject.BindSignalToBinder`1
    commentId: T:Zenject.BindSignalToBinder`1
    language: CSharp
    name:
      CSharp: BindSignalToBinder<TSignal>
      VB: BindSignalToBinder(Of TSignal)
    nameWithType:
      CSharp: BindSignalToBinder<TSignal>
      VB: BindSignalToBinder(Of TSignal)
    qualifiedName:
      CSharp: Zenject.BindSignalToBinder<TSignal>
      VB: Zenject.BindSignalToBinder(Of TSignal)
    type: Class
    assemblies:
    - Zenject-Signals
    namespace: Zenject
    source:
      remote:
        path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs
      id: BindSignalToBinder
      path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs
      startLine: 5
    syntax:
      content:
        CSharp: public class BindSignalToBinder<TSignal>
        VB: Public Class BindSignalToBinder(Of TSignal)
      typeParameters:
      - id: TSignal
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    extensionMethods:
    - Zenject.BindSignalToBinder`1.ModestTree.LinqExtensions.Yield``1
    - Zenject.BindSignalToBinder`1.ModestTree.LinqExtensions.Yield``1
    - Zenject.BindSignalToBinder`1.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.BindSignalToBinder{{TSignal}},{TProperty}},UniRx.FrameCountType,System.Boolean)
    - Zenject.BindSignalToBinder`1.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.BindSignalToBinder{{TSignal}},{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
    - Zenject.BindSignalToBinder`1.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.BindSignalToBinder{{TSignal}},{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Zenject.BindSignalToBinder`1.#ctor(Zenject.DiContainer,Zenject.SignalBindingBindInfo)
      commentId: M:Zenject.BindSignalToBinder`1.#ctor(Zenject.DiContainer,Zenject.SignalBindingBindInfo)
      language: CSharp
      name:
        CSharp: BindSignalToBinder(DiContainer, SignalBindingBindInfo)
        VB: BindSignalToBinder(DiContainer, SignalBindingBindInfo)
      nameWithType:
        CSharp: BindSignalToBinder<TSignal>.BindSignalToBinder(DiContainer, SignalBindingBindInfo)
        VB: BindSignalToBinder(Of TSignal).BindSignalToBinder(DiContainer, SignalBindingBindInfo)
      qualifiedName:
        CSharp: Zenject.BindSignalToBinder<TSignal>.BindSignalToBinder(Zenject.DiContainer, Zenject.SignalBindingBindInfo)
        VB: Zenject.BindSignalToBinder(Of TSignal).BindSignalToBinder(Zenject.DiContainer, Zenject.SignalBindingBindInfo)
      type: Constructor
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs
        id: .ctor
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs
        startLine: 11
      syntax:
        content:
          CSharp: public BindSignalToBinder(DiContainer container, SignalBindingBindInfo signalBindInfo)
          VB: Public Sub New(container As DiContainer, signalBindInfo As SignalBindingBindInfo)
        parameters:
        - id: container
          type: Zenject.DiContainer
        - id: signalBindInfo
          type: Zenject.SignalBindingBindInfo
      overload: Zenject.BindSignalToBinder`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.BindSignalToBinder`1.SignalBindInfo
      commentId: P:Zenject.BindSignalToBinder`1.SignalBindInfo
      language: CSharp
      name:
        CSharp: SignalBindInfo
        VB: SignalBindInfo
      nameWithType:
        CSharp: BindSignalToBinder<TSignal>.SignalBindInfo
        VB: BindSignalToBinder(Of TSignal).SignalBindInfo
      qualifiedName:
        CSharp: Zenject.BindSignalToBinder<TSignal>.SignalBindInfo
        VB: Zenject.BindSignalToBinder(Of TSignal).SignalBindInfo
      type: Property
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs
        id: SignalBindInfo
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs
        startLine: 20
      syntax:
        content:
          CSharp: protected SignalBindingBindInfo SignalBindInfo { get; }
          VB: Protected ReadOnly Property SignalBindInfo As SignalBindingBindInfo
        parameters: []
        return:
          type: Zenject.SignalBindingBindInfo
      overload: Zenject.BindSignalToBinder`1.SignalBindInfo*
      modifiers:
        CSharp:
        - protected
        - get
        VB:
        - Protected
        - ReadOnly
    - id: Zenject.BindSignalToBinder`1.ToMethod(System.Action{`0})
      commentId: M:Zenject.BindSignalToBinder`1.ToMethod(System.Action{`0})
      language: CSharp
      name:
        CSharp: ToMethod(Action<TSignal>)
        VB: ToMethod(Action(Of TSignal))
      nameWithType:
        CSharp: BindSignalToBinder<TSignal>.ToMethod(Action<TSignal>)
        VB: BindSignalToBinder(Of TSignal).ToMethod(Action(Of TSignal))
      qualifiedName:
        CSharp: Zenject.BindSignalToBinder<TSignal>.ToMethod(System.Action<TSignal>)
        VB: Zenject.BindSignalToBinder(Of TSignal).ToMethod(System.Action(Of TSignal))
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs
        id: ToMethod
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs
        startLine: 25
      syntax:
        content:
          CSharp: public SignalCopyBinder ToMethod(Action<TSignal> callback)
          VB: Public Function ToMethod(callback As Action(Of TSignal)) As SignalCopyBinder
        parameters:
        - id: callback
          type: System.Action{{TSignal}}
        return:
          type: Zenject.SignalCopyBinder
      overload: Zenject.BindSignalToBinder`1.ToMethod*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.BindSignalToBinder`1.ToMethod(System.Action)
      commentId: M:Zenject.BindSignalToBinder`1.ToMethod(System.Action)
      language: CSharp
      name:
        CSharp: ToMethod(Action)
        VB: ToMethod(Action)
      nameWithType:
        CSharp: BindSignalToBinder<TSignal>.ToMethod(Action)
        VB: BindSignalToBinder(Of TSignal).ToMethod(Action)
      qualifiedName:
        CSharp: Zenject.BindSignalToBinder<TSignal>.ToMethod(System.Action)
        VB: Zenject.BindSignalToBinder(Of TSignal).ToMethod(System.Action)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs
        id: ToMethod
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs
        startLine: 42
      syntax:
        content:
          CSharp: public SignalCopyBinder ToMethod(Action callback)
          VB: Public Function ToMethod(callback As Action) As SignalCopyBinder
        parameters:
        - id: callback
          type: System.Action
        return:
          type: Zenject.SignalCopyBinder
      overload: Zenject.BindSignalToBinder`1.ToMethod*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.BindSignalToBinder`1.ToMethod``1(System.Action{``0,`0})
      commentId: M:Zenject.BindSignalToBinder`1.ToMethod``1(System.Action{``0,`0})
      language: CSharp
      name:
        CSharp: ToMethod<TObject>(Action<TObject, TSignal>)
        VB: ToMethod(Of TObject)(Action(Of TObject, TSignal))
      nameWithType:
        CSharp: BindSignalToBinder<TSignal>.ToMethod<TObject>(Action<TObject, TSignal>)
        VB: BindSignalToBinder(Of TSignal).ToMethod(Of TObject)(Action(Of TObject, TSignal))
      qualifiedName:
        CSharp: Zenject.BindSignalToBinder<TSignal>.ToMethod<TObject>(System.Action<TObject, TSignal>)
        VB: Zenject.BindSignalToBinder(Of TSignal).ToMethod(Of TObject)(System.Action(Of TObject, TSignal))
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs
        id: ToMethod
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs
        startLine: 47
      syntax:
        content:
          CSharp: public BindSignalFromBinder<TObject, TSignal> ToMethod<TObject>(Action<TObject, TSignal> handler)
          VB: Public Function ToMethod(Of TObject)(handler As Action(Of TObject, TSignal)) As BindSignalFromBinder(Of TObject, TSignal)
        parameters:
        - id: handler
          type: System.Action{{TObject},{TSignal}}
        typeParameters:
        - id: TObject
        return:
          type: Zenject.BindSignalFromBinder{{TObject},{TSignal}}
      overload: Zenject.BindSignalToBinder`1.ToMethod*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.BindSignalToBinder`1.ToMethod``1(System.Func{``0,System.Action})
      commentId: M:Zenject.BindSignalToBinder`1.ToMethod``1(System.Func{``0,System.Action})
      language: CSharp
      name:
        CSharp: ToMethod<TObject>(Func<TObject, Action>)
        VB: ToMethod(Of TObject)(Func(Of TObject, Action))
      nameWithType:
        CSharp: BindSignalToBinder<TSignal>.ToMethod<TObject>(Func<TObject, Action>)
        VB: BindSignalToBinder(Of TSignal).ToMethod(Of TObject)(Func(Of TObject, Action))
      qualifiedName:
        CSharp: Zenject.BindSignalToBinder<TSignal>.ToMethod<TObject>(System.Func<TObject, System.Action>)
        VB: Zenject.BindSignalToBinder(Of TSignal).ToMethod(Of TObject)(System.Func(Of TObject, System.Action))
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs
        id: ToMethod
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs
        startLine: 52
      syntax:
        content:
          CSharp: public BindSignalFromBinder<TObject, TSignal> ToMethod<TObject>(Func<TObject, Action> handlerGetter)
          VB: Public Function ToMethod(Of TObject)(handlerGetter As Func(Of TObject, Action)) As BindSignalFromBinder(Of TObject, TSignal)
        parameters:
        - id: handlerGetter
          type: System.Func{{TObject},System.Action}
        typeParameters:
        - id: TObject
        return:
          type: Zenject.BindSignalFromBinder{{TObject},{TSignal}}
      overload: Zenject.BindSignalToBinder`1.ToMethod*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.BindSignalToBinder`1.ToMethod``1(System.Func{``0,System.Action{`0}})
      commentId: M:Zenject.BindSignalToBinder`1.ToMethod``1(System.Func{``0,System.Action{`0}})
      language: CSharp
      name:
        CSharp: ToMethod<TObject>(Func<TObject, Action<TSignal>>)
        VB: ToMethod(Of TObject)(Func(Of TObject, Action(Of TSignal)))
      nameWithType:
        CSharp: BindSignalToBinder<TSignal>.ToMethod<TObject>(Func<TObject, Action<TSignal>>)
        VB: BindSignalToBinder(Of TSignal).ToMethod(Of TObject)(Func(Of TObject, Action(Of TSignal)))
      qualifiedName:
        CSharp: Zenject.BindSignalToBinder<TSignal>.ToMethod<TObject>(System.Func<TObject, System.Action<TSignal>>)
        VB: Zenject.BindSignalToBinder(Of TSignal).ToMethod(Of TObject)(System.Func(Of TObject, System.Action(Of TSignal)))
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs
        id: ToMethod
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs
        startLine: 57
      syntax:
        content:
          CSharp: public BindSignalFromBinder<TObject, TSignal> ToMethod<TObject>(Func<TObject, Action<TSignal>> handlerGetter)
          VB: Public Function ToMethod(Of TObject)(handlerGetter As Func(Of TObject, Action(Of TSignal))) As BindSignalFromBinder(Of TObject, TSignal)
        parameters:
        - id: handlerGetter
          type: System.Func{{TObject},System.Action{{TSignal}}}
        typeParameters:
        - id: TObject
        return:
          type: Zenject.BindSignalFromBinder{{TObject},{TSignal}}
      overload: Zenject.BindSignalToBinder`1.ToMethod*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Zenject.SignalCallbackWithLookupWrapper
    commentId: T:Zenject.SignalCallbackWithLookupWrapper
    language: CSharp
    name:
      CSharp: SignalCallbackWithLookupWrapper
      VB: SignalCallbackWithLookupWrapper
    nameWithType:
      CSharp: SignalCallbackWithLookupWrapper
      VB: SignalCallbackWithLookupWrapper
    qualifiedName:
      CSharp: Zenject.SignalCallbackWithLookupWrapper
      VB: Zenject.SignalCallbackWithLookupWrapper
    type: Class
    assemblies:
    - Zenject-Signals
    namespace: Zenject
    source:
      remote:
        path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/SignalCallbackWithLookupWrapper.cs
      id: SignalCallbackWithLookupWrapper
      path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/SignalCallbackWithLookupWrapper.cs
      startLine: 7
    syntax:
      content:
        CSharp: 'public class SignalCallbackWithLookupWrapper : IDisposable'
        VB: >-
          Public Class SignalCallbackWithLookupWrapper

              Implements IDisposable
    inheritance:
    - System.Object
    implements:
    - System.IDisposable
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    extensionMethods:
    - Zenject.SignalCallbackWithLookupWrapper.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalCallbackWithLookupWrapper.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalCallbackWithLookupWrapper.UniRx.DisposableExtensions.AddTo``1(UnityEngine.GameObject)
    - Zenject.SignalCallbackWithLookupWrapper.UniRx.DisposableExtensions.AddTo``1(UnityEngine.Component)
    - Zenject.SignalCallbackWithLookupWrapper.UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.GameObject)
    - Zenject.SignalCallbackWithLookupWrapper.UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.Component)
    - Zenject.SignalCallbackWithLookupWrapper.UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable})
    - Zenject.SignalCallbackWithLookupWrapper.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalCallbackWithLookupWrapper,{TProperty}},UniRx.FrameCountType,System.Boolean)
    - Zenject.SignalCallbackWithLookupWrapper.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalCallbackWithLookupWrapper,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
    - Zenject.SignalCallbackWithLookupWrapper.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalCallbackWithLookupWrapper,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Zenject.SignalCallbackWithLookupWrapper.#ctor(Zenject.SignalBindingBindInfo,System.Type,System.Guid,System.Func{System.Object,System.Action{System.Object}},Zenject.SignalBus,Zenject.DiContainer)
      commentId: M:Zenject.SignalCallbackWithLookupWrapper.#ctor(Zenject.SignalBindingBindInfo,System.Type,System.Guid,System.Func{System.Object,System.Action{System.Object}},Zenject.SignalBus,Zenject.DiContainer)
      language: CSharp
      name:
        CSharp: SignalCallbackWithLookupWrapper(SignalBindingBindInfo, Type, Guid, Func<Object, Action<Object>>, SignalBus, DiContainer)
        VB: SignalCallbackWithLookupWrapper(SignalBindingBindInfo, Type, Guid, Func(Of Object, Action(Of Object)), SignalBus, DiContainer)
      nameWithType:
        CSharp: SignalCallbackWithLookupWrapper.SignalCallbackWithLookupWrapper(SignalBindingBindInfo, Type, Guid, Func<Object, Action<Object>>, SignalBus, DiContainer)
        VB: SignalCallbackWithLookupWrapper.SignalCallbackWithLookupWrapper(SignalBindingBindInfo, Type, Guid, Func(Of Object, Action(Of Object)), SignalBus, DiContainer)
      qualifiedName:
        CSharp: Zenject.SignalCallbackWithLookupWrapper.SignalCallbackWithLookupWrapper(Zenject.SignalBindingBindInfo, System.Type, System.Guid, System.Func<System.Object, System.Action<System.Object>>, Zenject.SignalBus, Zenject.DiContainer)
        VB: Zenject.SignalCallbackWithLookupWrapper.SignalCallbackWithLookupWrapper(Zenject.SignalBindingBindInfo, System.Type, System.Guid, System.Func(Of System.Object, System.Action(Of System.Object)), Zenject.SignalBus, Zenject.DiContainer)
      type: Constructor
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/SignalCallbackWithLookupWrapper.cs
        id: .ctor
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/SignalCallbackWithLookupWrapper.cs
        startLine: 17
      syntax:
        content:
          CSharp: public SignalCallbackWithLookupWrapper(SignalBindingBindInfo signalBindInfo, Type objectType, Guid lookupId, Func<object, Action<object>> methodGetter, SignalBus signalBus, DiContainer container)
          VB: Public Sub New(signalBindInfo As SignalBindingBindInfo, objectType As Type, lookupId As Guid, methodGetter As Func(Of Object, Action(Of Object)), signalBus As SignalBus, container As DiContainer)
        parameters:
        - id: signalBindInfo
          type: Zenject.SignalBindingBindInfo
        - id: objectType
          type: System.Type
        - id: lookupId
          type: System.Guid
        - id: methodGetter
          type: System.Func{System.Object,System.Action{System.Object}}
        - id: signalBus
          type: Zenject.SignalBus
        - id: container
          type: Zenject.DiContainer
      overload: Zenject.SignalCallbackWithLookupWrapper.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalCallbackWithLookupWrapper.Dispose
      commentId: M:Zenject.SignalCallbackWithLookupWrapper.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: SignalCallbackWithLookupWrapper.Dispose()
        VB: SignalCallbackWithLookupWrapper.Dispose()
      qualifiedName:
        CSharp: Zenject.SignalCallbackWithLookupWrapper.Dispose()
        VB: Zenject.SignalCallbackWithLookupWrapper.Dispose()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/SignalCallbackWithLookupWrapper.cs
        id: Dispose
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/SignalCallbackWithLookupWrapper.cs
        startLine: 46
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: Zenject.SignalCallbackWithLookupWrapper.Dispose*
      implements:
      - System.IDisposable.Dispose
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Zenject.SignalCallbackWrapper
    commentId: T:Zenject.SignalCallbackWrapper
    language: CSharp
    name:
      CSharp: SignalCallbackWrapper
      VB: SignalCallbackWrapper
    nameWithType:
      CSharp: SignalCallbackWrapper
      VB: SignalCallbackWrapper
    qualifiedName:
      CSharp: Zenject.SignalCallbackWrapper
      VB: Zenject.SignalCallbackWrapper
    type: Class
    assemblies:
    - Zenject-Signals
    namespace: Zenject
    source:
      remote:
        path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/SignalCallbackWrapper.cs
      id: SignalCallbackWrapper
      path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/SignalCallbackWrapper.cs
      startLine: 7
    syntax:
      content:
        CSharp: 'public class SignalCallbackWrapper : IDisposable'
        VB: >-
          Public Class SignalCallbackWrapper

              Implements IDisposable
    inheritance:
    - System.Object
    implements:
    - System.IDisposable
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    extensionMethods:
    - Zenject.SignalCallbackWrapper.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalCallbackWrapper.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalCallbackWrapper.UniRx.DisposableExtensions.AddTo``1(UnityEngine.GameObject)
    - Zenject.SignalCallbackWrapper.UniRx.DisposableExtensions.AddTo``1(UnityEngine.Component)
    - Zenject.SignalCallbackWrapper.UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.GameObject)
    - Zenject.SignalCallbackWrapper.UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.Component)
    - Zenject.SignalCallbackWrapper.UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable})
    - Zenject.SignalCallbackWrapper.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalCallbackWrapper,{TProperty}},UniRx.FrameCountType,System.Boolean)
    - Zenject.SignalCallbackWrapper.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalCallbackWrapper,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
    - Zenject.SignalCallbackWrapper.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalCallbackWrapper,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Zenject.SignalCallbackWrapper.#ctor(Zenject.SignalBindingBindInfo,System.Action{System.Object},Zenject.SignalBus)
      commentId: M:Zenject.SignalCallbackWrapper.#ctor(Zenject.SignalBindingBindInfo,System.Action{System.Object},Zenject.SignalBus)
      language: CSharp
      name:
        CSharp: SignalCallbackWrapper(SignalBindingBindInfo, Action<Object>, SignalBus)
        VB: SignalCallbackWrapper(SignalBindingBindInfo, Action(Of Object), SignalBus)
      nameWithType:
        CSharp: SignalCallbackWrapper.SignalCallbackWrapper(SignalBindingBindInfo, Action<Object>, SignalBus)
        VB: SignalCallbackWrapper.SignalCallbackWrapper(SignalBindingBindInfo, Action(Of Object), SignalBus)
      qualifiedName:
        CSharp: Zenject.SignalCallbackWrapper.SignalCallbackWrapper(Zenject.SignalBindingBindInfo, System.Action<System.Object>, Zenject.SignalBus)
        VB: Zenject.SignalCallbackWrapper.SignalCallbackWrapper(Zenject.SignalBindingBindInfo, System.Action(Of System.Object), Zenject.SignalBus)
      type: Constructor
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/SignalCallbackWrapper.cs
        id: .ctor
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/SignalCallbackWrapper.cs
        startLine: 14
      syntax:
        content:
          CSharp: public SignalCallbackWrapper(SignalBindingBindInfo bindInfo, Action<object> action, SignalBus signalBus)
          VB: Public Sub New(bindInfo As SignalBindingBindInfo, action As Action(Of Object), signalBus As SignalBus)
        parameters:
        - id: bindInfo
          type: Zenject.SignalBindingBindInfo
        - id: action
          type: System.Action{System.Object}
        - id: signalBus
          type: Zenject.SignalBus
      overload: Zenject.SignalCallbackWrapper.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalCallbackWrapper.Dispose
      commentId: M:Zenject.SignalCallbackWrapper.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: SignalCallbackWrapper.Dispose()
        VB: SignalCallbackWrapper.Dispose()
      qualifiedName:
        CSharp: Zenject.SignalCallbackWrapper.Dispose()
        VB: Zenject.SignalCallbackWrapper.Dispose()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/SignalCallbackWrapper.cs
        id: Dispose
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/BindSignal/SignalCallbackWrapper.cs
        startLine: 32
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: Zenject.SignalCallbackWrapper.Dispose*
      implements:
      - System.IDisposable.Dispose
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
    commentId: T:Zenject.DeclareSignalAsyncTickPriorityCopyBinder
    language: CSharp
    name:
      CSharp: DeclareSignalAsyncTickPriorityCopyBinder
      VB: DeclareSignalAsyncTickPriorityCopyBinder
    nameWithType:
      CSharp: DeclareSignalAsyncTickPriorityCopyBinder
      VB: DeclareSignalAsyncTickPriorityCopyBinder
    qualifiedName:
      CSharp: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
      VB: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
    type: Class
    assemblies:
    - Zenject-Signals
    namespace: Zenject
    source:
      remote:
        path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalAsyncTickPriorityCopyBinder.cs
      id: DeclareSignalAsyncTickPriorityCopyBinder
      path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalAsyncTickPriorityCopyBinder.cs
      startLine: 2
    syntax:
      content:
        CSharp: 'public class DeclareSignalAsyncTickPriorityCopyBinder : SignalTickPriorityCopyBinder'
        VB: >-
          Public Class DeclareSignalAsyncTickPriorityCopyBinder

              Inherits SignalTickPriorityCopyBinder
    inheritance:
    - System.Object
    - Zenject.SignalCopyBinder
    - Zenject.SignalTickPriorityCopyBinder
    inheritedMembers:
    - Zenject.SignalTickPriorityCopyBinder.SignalBindInfo
    - Zenject.SignalTickPriorityCopyBinder.WithTickPriority(System.Int32)
    - Zenject.SignalCopyBinder.AddCopyBindInfo(Zenject.BindInfo)
    - Zenject.SignalCopyBinder.CopyIntoAllSubContainers
    - Zenject.SignalCopyBinder.CopyIntoDirectSubContainers
    - Zenject.SignalCopyBinder.MoveIntoAllSubContainers
    - Zenject.SignalCopyBinder.MoveIntoDirectSubContainers
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    extensionMethods:
    - Zenject.DeclareSignalAsyncTickPriorityCopyBinder.ModestTree.LinqExtensions.Yield``1
    - Zenject.DeclareSignalAsyncTickPriorityCopyBinder.ModestTree.LinqExtensions.Yield``1
    - Zenject.DeclareSignalAsyncTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.DeclareSignalAsyncTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Boolean)
    - Zenject.DeclareSignalAsyncTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.DeclareSignalAsyncTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
    - Zenject.DeclareSignalAsyncTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.DeclareSignalAsyncTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.#ctor(Zenject.SignalDeclarationBindInfo)
      commentId: M:Zenject.DeclareSignalAsyncTickPriorityCopyBinder.#ctor(Zenject.SignalDeclarationBindInfo)
      language: CSharp
      name:
        CSharp: DeclareSignalAsyncTickPriorityCopyBinder(SignalDeclarationBindInfo)
        VB: DeclareSignalAsyncTickPriorityCopyBinder(SignalDeclarationBindInfo)
      nameWithType:
        CSharp: DeclareSignalAsyncTickPriorityCopyBinder.DeclareSignalAsyncTickPriorityCopyBinder(SignalDeclarationBindInfo)
        VB: DeclareSignalAsyncTickPriorityCopyBinder.DeclareSignalAsyncTickPriorityCopyBinder(SignalDeclarationBindInfo)
      qualifiedName:
        CSharp: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.DeclareSignalAsyncTickPriorityCopyBinder(Zenject.SignalDeclarationBindInfo)
        VB: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.DeclareSignalAsyncTickPriorityCopyBinder(Zenject.SignalDeclarationBindInfo)
      type: Constructor
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalAsyncTickPriorityCopyBinder.cs
        id: .ctor
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalAsyncTickPriorityCopyBinder.cs
        startLine: 5
      syntax:
        content:
          CSharp: public DeclareSignalAsyncTickPriorityCopyBinder(SignalDeclarationBindInfo signalBindInfo)
          VB: Public Sub New(signalBindInfo As SignalDeclarationBindInfo)
        parameters:
        - id: signalBindInfo
          type: Zenject.SignalDeclarationBindInfo
      overload: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunAsync
      commentId: M:Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunAsync
      language: CSharp
      name:
        CSharp: RunAsync()
        VB: RunAsync()
      nameWithType:
        CSharp: DeclareSignalAsyncTickPriorityCopyBinder.RunAsync()
        VB: DeclareSignalAsyncTickPriorityCopyBinder.RunAsync()
      qualifiedName:
        CSharp: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunAsync()
        VB: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunAsync()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalAsyncTickPriorityCopyBinder.cs
        id: RunAsync
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalAsyncTickPriorityCopyBinder.cs
        startLine: 10
      syntax:
        content:
          CSharp: public SignalTickPriorityCopyBinder RunAsync()
          VB: Public Function RunAsync As SignalTickPriorityCopyBinder
        return:
          type: Zenject.SignalTickPriorityCopyBinder
      overload: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunAsync*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunSync
      commentId: M:Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunSync
      language: CSharp
      name:
        CSharp: RunSync()
        VB: RunSync()
      nameWithType:
        CSharp: DeclareSignalAsyncTickPriorityCopyBinder.RunSync()
        VB: DeclareSignalAsyncTickPriorityCopyBinder.RunSync()
      qualifiedName:
        CSharp: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunSync()
        VB: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunSync()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalAsyncTickPriorityCopyBinder.cs
        id: RunSync
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalAsyncTickPriorityCopyBinder.cs
        startLine: 16
      syntax:
        content:
          CSharp: public SignalCopyBinder RunSync()
          VB: Public Function RunSync As SignalCopyBinder
        return:
          type: Zenject.SignalCopyBinder
      overload: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunSync*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
    commentId: T:Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
    language: CSharp
    name:
      CSharp: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
      VB: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
    nameWithType:
      CSharp: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
      VB: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
    qualifiedName:
      CSharp: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
      VB: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
    type: Class
    assemblies:
    - Zenject-Signals
    namespace: Zenject
    source:
      remote:
        path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.cs
      id: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
      path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.cs
      startLine: 2
    syntax:
      content:
        CSharp: 'public class DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder : DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder'
        VB: >-
          Public Class DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder

              Inherits DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
    inheritance:
    - System.Object
    - Zenject.SignalCopyBinder
    - Zenject.SignalTickPriorityCopyBinder
    - Zenject.DeclareSignalAsyncTickPriorityCopyBinder
    - Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
    inheritedMembers:
    - Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber
    - Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber
    - Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning
    - Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunAsync
    - Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunSync
    - Zenject.SignalTickPriorityCopyBinder.SignalBindInfo
    - Zenject.SignalTickPriorityCopyBinder.WithTickPriority(System.Int32)
    - Zenject.SignalCopyBinder.AddCopyBindInfo(Zenject.BindInfo)
    - Zenject.SignalCopyBinder.CopyIntoAllSubContainers
    - Zenject.SignalCopyBinder.CopyIntoDirectSubContainers
    - Zenject.SignalCopyBinder.MoveIntoAllSubContainers
    - Zenject.SignalCopyBinder.MoveIntoDirectSubContainers
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    extensionMethods:
    - Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.ModestTree.LinqExtensions.Yield``1
    - Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.ModestTree.LinqExtensions.Yield``1
    - Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Boolean)
    - Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
    - Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.#ctor(Zenject.SignalDeclarationBindInfo)
      commentId: M:Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.#ctor(Zenject.SignalDeclarationBindInfo)
      language: CSharp
      name:
        CSharp: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder(SignalDeclarationBindInfo)
        VB: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder(SignalDeclarationBindInfo)
      nameWithType:
        CSharp: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder(SignalDeclarationBindInfo)
        VB: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder(SignalDeclarationBindInfo)
      qualifiedName:
        CSharp: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder(Zenject.SignalDeclarationBindInfo)
        VB: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder(Zenject.SignalDeclarationBindInfo)
      type: Constructor
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.cs
        id: .ctor
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.cs
        startLine: 5
      syntax:
        content:
          CSharp: public DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder(SignalDeclarationBindInfo signalBindInfo)
          VB: Public Sub New(signalBindInfo As SignalDeclarationBindInfo)
        parameters:
        - id: signalBindInfo
          type: Zenject.SignalDeclarationBindInfo
      overload: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.WithId(System.Object)
      commentId: M:Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.WithId(System.Object)
      language: CSharp
      name:
        CSharp: WithId(Object)
        VB: WithId(Object)
      nameWithType:
        CSharp: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.WithId(Object)
        VB: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.WithId(Object)
      qualifiedName:
        CSharp: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.WithId(System.Object)
        VB: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.WithId(System.Object)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.cs
        id: WithId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.cs
        startLine: 11
      syntax:
        content:
          CSharp: public DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder WithId(object identifier)
          VB: Public Function WithId(identifier As Object) As DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        parameters:
        - id: identifier
          type: System.Object
        return:
          type: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
      overload: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.WithId*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
    commentId: T:Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
    language: CSharp
    name:
      CSharp: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
      VB: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
    nameWithType:
      CSharp: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
      VB: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
    qualifiedName:
      CSharp: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
      VB: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
    type: Class
    assemblies:
    - Zenject-Signals
    namespace: Zenject
    source:
      remote:
        path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.cs
      id: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
      path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.cs
      startLine: 2
    syntax:
      content:
        CSharp: 'public class DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder : DeclareSignalAsyncTickPriorityCopyBinder'
        VB: >-
          Public Class DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder

              Inherits DeclareSignalAsyncTickPriorityCopyBinder
    inheritance:
    - System.Object
    - Zenject.SignalCopyBinder
    - Zenject.SignalTickPriorityCopyBinder
    - Zenject.DeclareSignalAsyncTickPriorityCopyBinder
    inheritedMembers:
    - Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunAsync
    - Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunSync
    - Zenject.SignalTickPriorityCopyBinder.SignalBindInfo
    - Zenject.SignalTickPriorityCopyBinder.WithTickPriority(System.Int32)
    - Zenject.SignalCopyBinder.AddCopyBindInfo(Zenject.BindInfo)
    - Zenject.SignalCopyBinder.CopyIntoAllSubContainers
    - Zenject.SignalCopyBinder.CopyIntoDirectSubContainers
    - Zenject.SignalCopyBinder.MoveIntoAllSubContainers
    - Zenject.SignalCopyBinder.MoveIntoDirectSubContainers
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    extensionMethods:
    - Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.ModestTree.LinqExtensions.Yield``1
    - Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.ModestTree.LinqExtensions.Yield``1
    - Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Boolean)
    - Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
    - Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.#ctor(Zenject.SignalDeclarationBindInfo)
      commentId: M:Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.#ctor(Zenject.SignalDeclarationBindInfo)
      language: CSharp
      name:
        CSharp: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder(SignalDeclarationBindInfo)
        VB: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder(SignalDeclarationBindInfo)
      nameWithType:
        CSharp: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder(SignalDeclarationBindInfo)
        VB: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder(SignalDeclarationBindInfo)
      qualifiedName:
        CSharp: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder(Zenject.SignalDeclarationBindInfo)
        VB: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder(Zenject.SignalDeclarationBindInfo)
      type: Constructor
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.cs
        id: .ctor
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.cs
        startLine: 5
      syntax:
        content:
          CSharp: public DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder(SignalDeclarationBindInfo signalBindInfo)
          VB: Public Sub New(signalBindInfo As SignalDeclarationBindInfo)
        parameters:
        - id: signalBindInfo
          type: Zenject.SignalDeclarationBindInfo
      overload: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber
      commentId: M:Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber
      language: CSharp
      name:
        CSharp: RequireSubscriber()
        VB: RequireSubscriber()
      nameWithType:
        CSharp: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber()
        VB: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber()
      qualifiedName:
        CSharp: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber()
        VB: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.cs
        id: RequireSubscriber
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.cs
        startLine: 11
      syntax:
        content:
          CSharp: public DeclareSignalAsyncTickPriorityCopyBinder RequireSubscriber()
          VB: Public Function RequireSubscriber As DeclareSignalAsyncTickPriorityCopyBinder
        return:
          type: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
      overload: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber
      commentId: M:Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber
      language: CSharp
      name:
        CSharp: OptionalSubscriber()
        VB: OptionalSubscriber()
      nameWithType:
        CSharp: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber()
        VB: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber()
      qualifiedName:
        CSharp: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber()
        VB: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.cs
        id: OptionalSubscriber
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.cs
        startLine: 17
      syntax:
        content:
          CSharp: public DeclareSignalAsyncTickPriorityCopyBinder OptionalSubscriber()
          VB: Public Function OptionalSubscriber As DeclareSignalAsyncTickPriorityCopyBinder
        return:
          type: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
      overload: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning
      commentId: M:Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning
      language: CSharp
      name:
        CSharp: OptionalSubscriberWithWarning()
        VB: OptionalSubscriberWithWarning()
      nameWithType:
        CSharp: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning()
        VB: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning()
      qualifiedName:
        CSharp: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning()
        VB: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.cs
        id: OptionalSubscriberWithWarning
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.cs
        startLine: 23
      syntax:
        content:
          CSharp: public DeclareSignalAsyncTickPriorityCopyBinder OptionalSubscriberWithWarning()
          VB: Public Function OptionalSubscriberWithWarning As DeclareSignalAsyncTickPriorityCopyBinder
        return:
          type: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
      overload: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Zenject.SignalBindingBindInfo
    commentId: T:Zenject.SignalBindingBindInfo
    language: CSharp
    name:
      CSharp: SignalBindingBindInfo
      VB: SignalBindingBindInfo
    nameWithType:
      CSharp: SignalBindingBindInfo
      VB: SignalBindingBindInfo
    qualifiedName:
      CSharp: Zenject.SignalBindingBindInfo
      VB: Zenject.SignalBindingBindInfo
    type: Class
    assemblies:
    - Zenject-Signals
    namespace: Zenject
    source:
      remote:
        path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/SignalBindingBindInfo.cs
      id: SignalBindingBindInfo
      path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/SignalBindingBindInfo.cs
      startLine: 4
    syntax:
      content:
        CSharp: public class SignalBindingBindInfo
        VB: Public Class SignalBindingBindInfo
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    extensionMethods:
    - Zenject.SignalBindingBindInfo.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalBindingBindInfo.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalBindingBindInfo.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalBindingBindInfo,{TProperty}},UniRx.FrameCountType,System.Boolean)
    - Zenject.SignalBindingBindInfo.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalBindingBindInfo,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
    - Zenject.SignalBindingBindInfo.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalBindingBindInfo,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Zenject.SignalBindingBindInfo.#ctor(System.Type)
      commentId: M:Zenject.SignalBindingBindInfo.#ctor(System.Type)
      language: CSharp
      name:
        CSharp: SignalBindingBindInfo(Type)
        VB: SignalBindingBindInfo(Type)
      nameWithType:
        CSharp: SignalBindingBindInfo.SignalBindingBindInfo(Type)
        VB: SignalBindingBindInfo.SignalBindingBindInfo(Type)
      qualifiedName:
        CSharp: Zenject.SignalBindingBindInfo.SignalBindingBindInfo(System.Type)
        VB: Zenject.SignalBindingBindInfo.SignalBindingBindInfo(System.Type)
      type: Constructor
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/SignalBindingBindInfo.cs
        id: .ctor
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/SignalBindingBindInfo.cs
        startLine: 7
      syntax:
        content:
          CSharp: public SignalBindingBindInfo(Type signalType)
          VB: Public Sub New(signalType As Type)
        parameters:
        - id: signalType
          type: System.Type
      overload: Zenject.SignalBindingBindInfo.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBindingBindInfo.Identifier
      commentId: P:Zenject.SignalBindingBindInfo.Identifier
      language: CSharp
      name:
        CSharp: Identifier
        VB: Identifier
      nameWithType:
        CSharp: SignalBindingBindInfo.Identifier
        VB: SignalBindingBindInfo.Identifier
      qualifiedName:
        CSharp: Zenject.SignalBindingBindInfo.Identifier
        VB: Zenject.SignalBindingBindInfo.Identifier
      type: Property
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/SignalBindingBindInfo.cs
        id: Identifier
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/SignalBindingBindInfo.cs
        startLine: 12
      syntax:
        content:
          CSharp: public object Identifier { get; set; }
          VB: Public Property Identifier As Object
        parameters: []
        return:
          type: System.Object
      overload: Zenject.SignalBindingBindInfo.Identifier*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Zenject.SignalBindingBindInfo.SignalType
      commentId: P:Zenject.SignalBindingBindInfo.SignalType
      language: CSharp
      name:
        CSharp: SignalType
        VB: SignalType
      nameWithType:
        CSharp: SignalBindingBindInfo.SignalType
        VB: SignalBindingBindInfo.SignalType
      qualifiedName:
        CSharp: Zenject.SignalBindingBindInfo.SignalType
        VB: Zenject.SignalBindingBindInfo.SignalType
      type: Property
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/SignalBindingBindInfo.cs
        id: SignalType
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/SignalBindingBindInfo.cs
        startLine: 17
      syntax:
        content:
          CSharp: public Type SignalType { get; }
          VB: Public ReadOnly Property SignalType As Type
        parameters: []
        return:
          type: System.Type
      overload: Zenject.SignalBindingBindInfo.SignalType*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
  - id: Zenject.SignalDeclarationBindInfo
    commentId: T:Zenject.SignalDeclarationBindInfo
    language: CSharp
    name:
      CSharp: SignalDeclarationBindInfo
      VB: SignalDeclarationBindInfo
    nameWithType:
      CSharp: SignalDeclarationBindInfo
      VB: SignalDeclarationBindInfo
    qualifiedName:
      CSharp: Zenject.SignalDeclarationBindInfo
      VB: Zenject.SignalDeclarationBindInfo
    type: Class
    assemblies:
    - Zenject-Signals
    namespace: Zenject
    source:
      remote:
        path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/SignalDeclarationBindInfo.cs
      id: SignalDeclarationBindInfo
      path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/SignalDeclarationBindInfo.cs
      startLine: 4
    syntax:
      content:
        CSharp: public class SignalDeclarationBindInfo
        VB: Public Class SignalDeclarationBindInfo
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    extensionMethods:
    - Zenject.SignalDeclarationBindInfo.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalDeclarationBindInfo.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalDeclarationBindInfo.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclarationBindInfo,{TProperty}},UniRx.FrameCountType,System.Boolean)
    - Zenject.SignalDeclarationBindInfo.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclarationBindInfo,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
    - Zenject.SignalDeclarationBindInfo.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclarationBindInfo,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Zenject.SignalDeclarationBindInfo.#ctor(System.Type)
      commentId: M:Zenject.SignalDeclarationBindInfo.#ctor(System.Type)
      language: CSharp
      name:
        CSharp: SignalDeclarationBindInfo(Type)
        VB: SignalDeclarationBindInfo(Type)
      nameWithType:
        CSharp: SignalDeclarationBindInfo.SignalDeclarationBindInfo(Type)
        VB: SignalDeclarationBindInfo.SignalDeclarationBindInfo(Type)
      qualifiedName:
        CSharp: Zenject.SignalDeclarationBindInfo.SignalDeclarationBindInfo(System.Type)
        VB: Zenject.SignalDeclarationBindInfo.SignalDeclarationBindInfo(System.Type)
      type: Constructor
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/SignalDeclarationBindInfo.cs
        id: .ctor
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/SignalDeclarationBindInfo.cs
        startLine: 7
      syntax:
        content:
          CSharp: public SignalDeclarationBindInfo(Type signalType)
          VB: Public Sub New(signalType As Type)
        parameters:
        - id: signalType
          type: System.Type
      overload: Zenject.SignalDeclarationBindInfo.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalDeclarationBindInfo.Identifier
      commentId: P:Zenject.SignalDeclarationBindInfo.Identifier
      language: CSharp
      name:
        CSharp: Identifier
        VB: Identifier
      nameWithType:
        CSharp: SignalDeclarationBindInfo.Identifier
        VB: SignalDeclarationBindInfo.Identifier
      qualifiedName:
        CSharp: Zenject.SignalDeclarationBindInfo.Identifier
        VB: Zenject.SignalDeclarationBindInfo.Identifier
      type: Property
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/SignalDeclarationBindInfo.cs
        id: Identifier
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/SignalDeclarationBindInfo.cs
        startLine: 12
      syntax:
        content:
          CSharp: public object Identifier { get; set; }
          VB: Public Property Identifier As Object
        parameters: []
        return:
          type: System.Object
      overload: Zenject.SignalDeclarationBindInfo.Identifier*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Zenject.SignalDeclarationBindInfo.SignalType
      commentId: P:Zenject.SignalDeclarationBindInfo.SignalType
      language: CSharp
      name:
        CSharp: SignalType
        VB: SignalType
      nameWithType:
        CSharp: SignalDeclarationBindInfo.SignalType
        VB: SignalDeclarationBindInfo.SignalType
      qualifiedName:
        CSharp: Zenject.SignalDeclarationBindInfo.SignalType
        VB: Zenject.SignalDeclarationBindInfo.SignalType
      type: Property
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/SignalDeclarationBindInfo.cs
        id: SignalType
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/SignalDeclarationBindInfo.cs
        startLine: 17
      syntax:
        content:
          CSharp: public Type SignalType { get; }
          VB: Public ReadOnly Property SignalType As Type
        parameters: []
        return:
          type: System.Type
      overload: Zenject.SignalDeclarationBindInfo.SignalType*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Zenject.SignalDeclarationBindInfo.RunAsync
      commentId: P:Zenject.SignalDeclarationBindInfo.RunAsync
      language: CSharp
      name:
        CSharp: RunAsync
        VB: RunAsync
      nameWithType:
        CSharp: SignalDeclarationBindInfo.RunAsync
        VB: SignalDeclarationBindInfo.RunAsync
      qualifiedName:
        CSharp: Zenject.SignalDeclarationBindInfo.RunAsync
        VB: Zenject.SignalDeclarationBindInfo.RunAsync
      type: Property
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/SignalDeclarationBindInfo.cs
        id: RunAsync
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/SignalDeclarationBindInfo.cs
        startLine: 22
      syntax:
        content:
          CSharp: public bool RunAsync { get; set; }
          VB: Public Property RunAsync As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Zenject.SignalDeclarationBindInfo.RunAsync*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Zenject.SignalDeclarationBindInfo.TickPriority
      commentId: P:Zenject.SignalDeclarationBindInfo.TickPriority
      language: CSharp
      name:
        CSharp: TickPriority
        VB: TickPriority
      nameWithType:
        CSharp: SignalDeclarationBindInfo.TickPriority
        VB: SignalDeclarationBindInfo.TickPriority
      qualifiedName:
        CSharp: Zenject.SignalDeclarationBindInfo.TickPriority
        VB: Zenject.SignalDeclarationBindInfo.TickPriority
      type: Property
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/SignalDeclarationBindInfo.cs
        id: TickPriority
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/SignalDeclarationBindInfo.cs
        startLine: 27
      syntax:
        content:
          CSharp: public int TickPriority { get; set; }
          VB: Public Property TickPriority As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Zenject.SignalDeclarationBindInfo.TickPriority*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Zenject.SignalDeclarationBindInfo.MissingHandlerResponse
      commentId: P:Zenject.SignalDeclarationBindInfo.MissingHandlerResponse
      language: CSharp
      name:
        CSharp: MissingHandlerResponse
        VB: MissingHandlerResponse
      nameWithType:
        CSharp: SignalDeclarationBindInfo.MissingHandlerResponse
        VB: SignalDeclarationBindInfo.MissingHandlerResponse
      qualifiedName:
        CSharp: Zenject.SignalDeclarationBindInfo.MissingHandlerResponse
        VB: Zenject.SignalDeclarationBindInfo.MissingHandlerResponse
      type: Property
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/SignalDeclarationBindInfo.cs
        id: MissingHandlerResponse
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/DeclareSignal/SignalDeclarationBindInfo.cs
        startLine: 32
      syntax:
        content:
          CSharp: public SignalMissingHandlerResponses MissingHandlerResponse { get; set; }
          VB: Public Property MissingHandlerResponse As SignalMissingHandlerResponses
        parameters: []
        return:
          type: Zenject.SignalMissingHandlerResponses
      overload: Zenject.SignalDeclarationBindInfo.MissingHandlerResponse*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Zenject.SignalCopyBinder
    commentId: T:Zenject.SignalCopyBinder
    language: CSharp
    name:
      CSharp: SignalCopyBinder
      VB: SignalCopyBinder
    nameWithType:
      CSharp: SignalCopyBinder
      VB: SignalCopyBinder
    qualifiedName:
      CSharp: Zenject.SignalCopyBinder
      VB: Zenject.SignalCopyBinder
    type: Class
    assemblies:
    - Zenject-Signals
    namespace: Zenject
    source:
      remote:
        path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalCopyBinder.cs
      id: SignalCopyBinder
      path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalCopyBinder.cs
      startLine: 4
    syntax:
      content:
        CSharp: public class SignalCopyBinder
        VB: Public Class SignalCopyBinder
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    extensionMethods:
    - Zenject.SignalCopyBinder.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalCopyBinder.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalCopyBinder,{TProperty}},UniRx.FrameCountType,System.Boolean)
    - Zenject.SignalCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalCopyBinder,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
    - Zenject.SignalCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalCopyBinder,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Zenject.SignalCopyBinder.#ctor
      commentId: M:Zenject.SignalCopyBinder.#ctor
      language: CSharp
      name:
        CSharp: SignalCopyBinder()
        VB: SignalCopyBinder()
      nameWithType:
        CSharp: SignalCopyBinder.SignalCopyBinder()
        VB: SignalCopyBinder.SignalCopyBinder()
      qualifiedName:
        CSharp: Zenject.SignalCopyBinder.SignalCopyBinder()
        VB: Zenject.SignalCopyBinder.SignalCopyBinder()
      type: Constructor
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalCopyBinder.cs
        id: .ctor
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalCopyBinder.cs
        startLine: 9
      syntax:
        content:
          CSharp: public SignalCopyBinder()
          VB: Public Sub New
      overload: Zenject.SignalCopyBinder.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalCopyBinder.#ctor(Zenject.BindInfo)
      commentId: M:Zenject.SignalCopyBinder.#ctor(Zenject.BindInfo)
      language: CSharp
      name:
        CSharp: SignalCopyBinder(BindInfo)
        VB: SignalCopyBinder(BindInfo)
      nameWithType:
        CSharp: SignalCopyBinder.SignalCopyBinder(BindInfo)
        VB: SignalCopyBinder.SignalCopyBinder(BindInfo)
      qualifiedName:
        CSharp: Zenject.SignalCopyBinder.SignalCopyBinder(Zenject.BindInfo)
        VB: Zenject.SignalCopyBinder.SignalCopyBinder(Zenject.BindInfo)
      type: Constructor
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalCopyBinder.cs
        id: .ctor
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalCopyBinder.cs
        startLine: 14
      syntax:
        content:
          CSharp: public SignalCopyBinder(BindInfo bindInfo)
          VB: Public Sub New(bindInfo As BindInfo)
        parameters:
        - id: bindInfo
          type: Zenject.BindInfo
      overload: Zenject.SignalCopyBinder.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalCopyBinder.AddCopyBindInfo(Zenject.BindInfo)
      commentId: M:Zenject.SignalCopyBinder.AddCopyBindInfo(Zenject.BindInfo)
      language: CSharp
      name:
        CSharp: AddCopyBindInfo(BindInfo)
        VB: AddCopyBindInfo(BindInfo)
      nameWithType:
        CSharp: SignalCopyBinder.AddCopyBindInfo(BindInfo)
        VB: SignalCopyBinder.AddCopyBindInfo(BindInfo)
      qualifiedName:
        CSharp: Zenject.SignalCopyBinder.AddCopyBindInfo(Zenject.BindInfo)
        VB: Zenject.SignalCopyBinder.AddCopyBindInfo(Zenject.BindInfo)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalCopyBinder.cs
        id: AddCopyBindInfo
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalCopyBinder.cs
        startLine: 24
      syntax:
        content:
          CSharp: public void AddCopyBindInfo(BindInfo bindInfo)
          VB: Public Sub AddCopyBindInfo(bindInfo As BindInfo)
        parameters:
        - id: bindInfo
          type: Zenject.BindInfo
      overload: Zenject.SignalCopyBinder.AddCopyBindInfo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalCopyBinder.CopyIntoAllSubContainers
      commentId: M:Zenject.SignalCopyBinder.CopyIntoAllSubContainers
      language: CSharp
      name:
        CSharp: CopyIntoAllSubContainers()
        VB: CopyIntoAllSubContainers()
      nameWithType:
        CSharp: SignalCopyBinder.CopyIntoAllSubContainers()
        VB: SignalCopyBinder.CopyIntoAllSubContainers()
      qualifiedName:
        CSharp: Zenject.SignalCopyBinder.CopyIntoAllSubContainers()
        VB: Zenject.SignalCopyBinder.CopyIntoAllSubContainers()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalCopyBinder.cs
        id: CopyIntoAllSubContainers
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalCopyBinder.cs
        startLine: 29
      syntax:
        content:
          CSharp: public void CopyIntoAllSubContainers()
          VB: Public Sub CopyIntoAllSubContainers
      overload: Zenject.SignalCopyBinder.CopyIntoAllSubContainers*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalCopyBinder.CopyIntoDirectSubContainers
      commentId: M:Zenject.SignalCopyBinder.CopyIntoDirectSubContainers
      language: CSharp
      name:
        CSharp: CopyIntoDirectSubContainers()
        VB: CopyIntoDirectSubContainers()
      nameWithType:
        CSharp: SignalCopyBinder.CopyIntoDirectSubContainers()
        VB: SignalCopyBinder.CopyIntoDirectSubContainers()
      qualifiedName:
        CSharp: Zenject.SignalCopyBinder.CopyIntoDirectSubContainers()
        VB: Zenject.SignalCopyBinder.CopyIntoDirectSubContainers()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalCopyBinder.cs
        id: CopyIntoDirectSubContainers
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalCopyBinder.cs
        startLine: 35
      syntax:
        content:
          CSharp: public void CopyIntoDirectSubContainers()
          VB: Public Sub CopyIntoDirectSubContainers
      overload: Zenject.SignalCopyBinder.CopyIntoDirectSubContainers*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalCopyBinder.MoveIntoAllSubContainers
      commentId: M:Zenject.SignalCopyBinder.MoveIntoAllSubContainers
      language: CSharp
      name:
        CSharp: MoveIntoAllSubContainers()
        VB: MoveIntoAllSubContainers()
      nameWithType:
        CSharp: SignalCopyBinder.MoveIntoAllSubContainers()
        VB: SignalCopyBinder.MoveIntoAllSubContainers()
      qualifiedName:
        CSharp: Zenject.SignalCopyBinder.MoveIntoAllSubContainers()
        VB: Zenject.SignalCopyBinder.MoveIntoAllSubContainers()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalCopyBinder.cs
        id: MoveIntoAllSubContainers
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalCopyBinder.cs
        startLine: 41
      syntax:
        content:
          CSharp: public void MoveIntoAllSubContainers()
          VB: Public Sub MoveIntoAllSubContainers
      overload: Zenject.SignalCopyBinder.MoveIntoAllSubContainers*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalCopyBinder.MoveIntoDirectSubContainers
      commentId: M:Zenject.SignalCopyBinder.MoveIntoDirectSubContainers
      language: CSharp
      name:
        CSharp: MoveIntoDirectSubContainers()
        VB: MoveIntoDirectSubContainers()
      nameWithType:
        CSharp: SignalCopyBinder.MoveIntoDirectSubContainers()
        VB: SignalCopyBinder.MoveIntoDirectSubContainers()
      qualifiedName:
        CSharp: Zenject.SignalCopyBinder.MoveIntoDirectSubContainers()
        VB: Zenject.SignalCopyBinder.MoveIntoDirectSubContainers()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalCopyBinder.cs
        id: MoveIntoDirectSubContainers
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalCopyBinder.cs
        startLine: 47
      syntax:
        content:
          CSharp: public void MoveIntoDirectSubContainers()
          VB: Public Sub MoveIntoDirectSubContainers
      overload: Zenject.SignalCopyBinder.MoveIntoDirectSubContainers*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Zenject.SignalExtensions
    commentId: T:Zenject.SignalExtensions
    language: CSharp
    name:
      CSharp: SignalExtensions
      VB: SignalExtensions
    nameWithType:
      CSharp: SignalExtensions
      VB: SignalExtensions
    qualifiedName:
      CSharp: Zenject.SignalExtensions
      VB: Zenject.SignalExtensions
    type: Class
    assemblies:
    - Zenject-Signals
    namespace: Zenject
    source:
      remote:
        path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalExtensions.cs
      id: SignalExtensions
      path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalExtensions.cs
      startLine: 3
    syntax:
      content:
        CSharp: public static class SignalExtensions
        VB: Public Module SignalExtensions
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Zenject.SignalExtensions.CreateDefaultSignalDeclarationBindInfo(Zenject.DiContainer,System.Type)
      commentId: M:Zenject.SignalExtensions.CreateDefaultSignalDeclarationBindInfo(Zenject.DiContainer,System.Type)
      language: CSharp
      name:
        CSharp: CreateDefaultSignalDeclarationBindInfo(DiContainer, Type)
        VB: CreateDefaultSignalDeclarationBindInfo(DiContainer, Type)
      nameWithType:
        CSharp: SignalExtensions.CreateDefaultSignalDeclarationBindInfo(DiContainer, Type)
        VB: SignalExtensions.CreateDefaultSignalDeclarationBindInfo(DiContainer, Type)
      qualifiedName:
        CSharp: Zenject.SignalExtensions.CreateDefaultSignalDeclarationBindInfo(Zenject.DiContainer, System.Type)
        VB: Zenject.SignalExtensions.CreateDefaultSignalDeclarationBindInfo(Zenject.DiContainer, System.Type)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalExtensions.cs
        id: CreateDefaultSignalDeclarationBindInfo
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalExtensions.cs
        startLine: 5
      syntax:
        content:
          CSharp: public static SignalDeclarationBindInfo CreateDefaultSignalDeclarationBindInfo(DiContainer container, Type signalType)
          VB: Public Shared Function CreateDefaultSignalDeclarationBindInfo(container As DiContainer, signalType As Type) As SignalDeclarationBindInfo
        parameters:
        - id: container
          type: Zenject.DiContainer
        - id: signalType
          type: System.Type
        return:
          type: Zenject.SignalDeclarationBindInfo
      overload: Zenject.SignalExtensions.CreateDefaultSignalDeclarationBindInfo*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Zenject.SignalExtensions.DeclareSignal(Zenject.DiContainer,System.Type)
      commentId: M:Zenject.SignalExtensions.DeclareSignal(Zenject.DiContainer,System.Type)
      language: CSharp
      name:
        CSharp: DeclareSignal(DiContainer, Type)
        VB: DeclareSignal(DiContainer, Type)
      nameWithType:
        CSharp: SignalExtensions.DeclareSignal(DiContainer, Type)
        VB: SignalExtensions.DeclareSignal(DiContainer, Type)
      qualifiedName:
        CSharp: Zenject.SignalExtensions.DeclareSignal(Zenject.DiContainer, System.Type)
        VB: Zenject.SignalExtensions.DeclareSignal(Zenject.DiContainer, System.Type)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalExtensions.cs
        id: DeclareSignal
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalExtensions.cs
        startLine: 15
      syntax:
        content:
          CSharp: public static DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder DeclareSignal(this DiContainer container, Type type)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function DeclareSignal(container As DiContainer, type As Type) As DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        parameters:
        - id: container
          type: Zenject.DiContainer
        - id: type
          type: System.Type
        return:
          type: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
      overload: Zenject.SignalExtensions.DeclareSignal*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Zenject.SignalExtensions.DeclareSignal``1(Zenject.DiContainer)
      commentId: M:Zenject.SignalExtensions.DeclareSignal``1(Zenject.DiContainer)
      language: CSharp
      name:
        CSharp: DeclareSignal<TSignal>(DiContainer)
        VB: DeclareSignal(Of TSignal)(DiContainer)
      nameWithType:
        CSharp: SignalExtensions.DeclareSignal<TSignal>(DiContainer)
        VB: SignalExtensions.DeclareSignal(Of TSignal)(DiContainer)
      qualifiedName:
        CSharp: Zenject.SignalExtensions.DeclareSignal<TSignal>(Zenject.DiContainer)
        VB: Zenject.SignalExtensions.DeclareSignal(Of TSignal)(Zenject.DiContainer)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalExtensions.cs
        id: DeclareSignal
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalExtensions.cs
        startLine: 27
      syntax:
        content:
          CSharp: public static DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder DeclareSignal<TSignal>(this DiContainer container)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function DeclareSignal(Of TSignal)(container As DiContainer) As DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        parameters:
        - id: container
          type: Zenject.DiContainer
        typeParameters:
        - id: TSignal
        return:
          type: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
      overload: Zenject.SignalExtensions.DeclareSignal*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Zenject.SignalExtensions.DeclareSignalWithInterfaces``1(Zenject.DiContainer)
      commentId: M:Zenject.SignalExtensions.DeclareSignalWithInterfaces``1(Zenject.DiContainer)
      language: CSharp
      name:
        CSharp: DeclareSignalWithInterfaces<TSignal>(DiContainer)
        VB: DeclareSignalWithInterfaces(Of TSignal)(DiContainer)
      nameWithType:
        CSharp: SignalExtensions.DeclareSignalWithInterfaces<TSignal>(DiContainer)
        VB: SignalExtensions.DeclareSignalWithInterfaces(Of TSignal)(DiContainer)
      qualifiedName:
        CSharp: Zenject.SignalExtensions.DeclareSignalWithInterfaces<TSignal>(Zenject.DiContainer)
        VB: Zenject.SignalExtensions.DeclareSignalWithInterfaces(Of TSignal)(Zenject.DiContainer)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalExtensions.cs
        id: DeclareSignalWithInterfaces
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalExtensions.cs
        startLine: 32
      syntax:
        content:
          CSharp: public static DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder DeclareSignalWithInterfaces<TSignal>(this DiContainer container)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function DeclareSignalWithInterfaces(Of TSignal)(container As DiContainer) As DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        parameters:
        - id: container
          type: Zenject.DiContainer
        typeParameters:
        - id: TSignal
        return:
          type: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
      overload: Zenject.SignalExtensions.DeclareSignalWithInterfaces*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Zenject.SignalExtensions.BindSignal``1(Zenject.DiContainer)
      commentId: M:Zenject.SignalExtensions.BindSignal``1(Zenject.DiContainer)
      language: CSharp
      name:
        CSharp: BindSignal<TSignal>(DiContainer)
        VB: BindSignal(Of TSignal)(DiContainer)
      nameWithType:
        CSharp: SignalExtensions.BindSignal<TSignal>(DiContainer)
        VB: SignalExtensions.BindSignal(Of TSignal)(DiContainer)
      qualifiedName:
        CSharp: Zenject.SignalExtensions.BindSignal<TSignal>(Zenject.DiContainer)
        VB: Zenject.SignalExtensions.BindSignal(Of TSignal)(Zenject.DiContainer)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalExtensions.cs
        id: BindSignal
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalExtensions.cs
        startLine: 48
      syntax:
        content:
          CSharp: public static BindSignalIdToBinder<TSignal> BindSignal<TSignal>(this DiContainer container)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function BindSignal(Of TSignal)(container As DiContainer) As BindSignalIdToBinder(Of TSignal)
        parameters:
        - id: container
          type: Zenject.DiContainer
        typeParameters:
        - id: TSignal
        return:
          type: Zenject.BindSignalIdToBinder{{TSignal}}
      overload: Zenject.SignalExtensions.BindSignal*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Zenject.SignalTickPriorityCopyBinder
    commentId: T:Zenject.SignalTickPriorityCopyBinder
    language: CSharp
    name:
      CSharp: SignalTickPriorityCopyBinder
      VB: SignalTickPriorityCopyBinder
    nameWithType:
      CSharp: SignalTickPriorityCopyBinder
      VB: SignalTickPriorityCopyBinder
    qualifiedName:
      CSharp: Zenject.SignalTickPriorityCopyBinder
      VB: Zenject.SignalTickPriorityCopyBinder
    type: Class
    assemblies:
    - Zenject-Signals
    namespace: Zenject
    source:
      remote:
        path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalTickPriorityCopyBinder.cs
      id: SignalTickPriorityCopyBinder
      path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalTickPriorityCopyBinder.cs
      startLine: 2
    syntax:
      content:
        CSharp: 'public class SignalTickPriorityCopyBinder : SignalCopyBinder'
        VB: >-
          Public Class SignalTickPriorityCopyBinder

              Inherits SignalCopyBinder
    inheritance:
    - System.Object
    - Zenject.SignalCopyBinder
    inheritedMembers:
    - Zenject.SignalCopyBinder.AddCopyBindInfo(Zenject.BindInfo)
    - Zenject.SignalCopyBinder.CopyIntoAllSubContainers
    - Zenject.SignalCopyBinder.CopyIntoDirectSubContainers
    - Zenject.SignalCopyBinder.MoveIntoAllSubContainers
    - Zenject.SignalCopyBinder.MoveIntoDirectSubContainers
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    extensionMethods:
    - Zenject.SignalTickPriorityCopyBinder.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalTickPriorityCopyBinder.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Boolean)
    - Zenject.SignalTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
    - Zenject.SignalTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Zenject.SignalTickPriorityCopyBinder.#ctor(Zenject.SignalDeclarationBindInfo)
      commentId: M:Zenject.SignalTickPriorityCopyBinder.#ctor(Zenject.SignalDeclarationBindInfo)
      language: CSharp
      name:
        CSharp: SignalTickPriorityCopyBinder(SignalDeclarationBindInfo)
        VB: SignalTickPriorityCopyBinder(SignalDeclarationBindInfo)
      nameWithType:
        CSharp: SignalTickPriorityCopyBinder.SignalTickPriorityCopyBinder(SignalDeclarationBindInfo)
        VB: SignalTickPriorityCopyBinder.SignalTickPriorityCopyBinder(SignalDeclarationBindInfo)
      qualifiedName:
        CSharp: Zenject.SignalTickPriorityCopyBinder.SignalTickPriorityCopyBinder(Zenject.SignalDeclarationBindInfo)
        VB: Zenject.SignalTickPriorityCopyBinder.SignalTickPriorityCopyBinder(Zenject.SignalDeclarationBindInfo)
      type: Constructor
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalTickPriorityCopyBinder.cs
        id: .ctor
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalTickPriorityCopyBinder.cs
        startLine: 5
      syntax:
        content:
          CSharp: public SignalTickPriorityCopyBinder(SignalDeclarationBindInfo signalBindInfo)
          VB: Public Sub New(signalBindInfo As SignalDeclarationBindInfo)
        parameters:
        - id: signalBindInfo
          type: Zenject.SignalDeclarationBindInfo
      overload: Zenject.SignalTickPriorityCopyBinder.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalTickPriorityCopyBinder.SignalBindInfo
      commentId: P:Zenject.SignalTickPriorityCopyBinder.SignalBindInfo
      language: CSharp
      name:
        CSharp: SignalBindInfo
        VB: SignalBindInfo
      nameWithType:
        CSharp: SignalTickPriorityCopyBinder.SignalBindInfo
        VB: SignalTickPriorityCopyBinder.SignalBindInfo
      qualifiedName:
        CSharp: Zenject.SignalTickPriorityCopyBinder.SignalBindInfo
        VB: Zenject.SignalTickPriorityCopyBinder.SignalBindInfo
      type: Property
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalTickPriorityCopyBinder.cs
        id: SignalBindInfo
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalTickPriorityCopyBinder.cs
        startLine: 11
      syntax:
        content:
          CSharp: protected SignalDeclarationBindInfo SignalBindInfo { get; }
          VB: Protected ReadOnly Property SignalBindInfo As SignalDeclarationBindInfo
        parameters: []
        return:
          type: Zenject.SignalDeclarationBindInfo
      overload: Zenject.SignalTickPriorityCopyBinder.SignalBindInfo*
      modifiers:
        CSharp:
        - protected
        - get
        VB:
        - Protected
        - ReadOnly
    - id: Zenject.SignalTickPriorityCopyBinder.WithTickPriority(System.Int32)
      commentId: M:Zenject.SignalTickPriorityCopyBinder.WithTickPriority(System.Int32)
      language: CSharp
      name:
        CSharp: WithTickPriority(Int32)
        VB: WithTickPriority(Int32)
      nameWithType:
        CSharp: SignalTickPriorityCopyBinder.WithTickPriority(Int32)
        VB: SignalTickPriorityCopyBinder.WithTickPriority(Int32)
      qualifiedName:
        CSharp: Zenject.SignalTickPriorityCopyBinder.WithTickPriority(System.Int32)
        VB: Zenject.SignalTickPriorityCopyBinder.WithTickPriority(System.Int32)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalTickPriorityCopyBinder.cs
        id: WithTickPriority
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/Binders/SignalTickPriorityCopyBinder.cs
        startLine: 16
      syntax:
        content:
          CSharp: public SignalCopyBinder WithTickPriority(int priority)
          VB: Public Function WithTickPriority(priority As Integer) As SignalCopyBinder
        parameters:
        - id: priority
          type: System.Int32
        return:
          type: Zenject.SignalCopyBinder
      overload: Zenject.SignalTickPriorityCopyBinder.WithTickPriority*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Zenject.SignalDeclaration
    commentId: T:Zenject.SignalDeclaration
    language: CSharp
    name:
      CSharp: SignalDeclaration
      VB: SignalDeclaration
    nameWithType:
      CSharp: SignalDeclaration
      VB: SignalDeclaration
    qualifiedName:
      CSharp: Zenject.SignalDeclaration
      VB: Zenject.SignalDeclaration
    type: Class
    assemblies:
    - Zenject-Signals
    namespace: Zenject
    source:
      remote:
        path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
      id: SignalDeclaration
      path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
      startLine: 9
    syntax:
      content:
        CSharp: 'public class SignalDeclaration : ITickable, IDisposable'
        VB: >-
          Public Class SignalDeclaration

              Inherits ITickable

              Implements IDisposable
    inheritance:
    - System.Object
    implements:
    - System.IDisposable
    extensionMethods:
    - Zenject.SignalDeclaration.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalDeclaration.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalDeclaration.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclaration,{TProperty}},UniRx.FrameCountType,System.Boolean)
    - Zenject.SignalDeclaration.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclaration,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
    - Zenject.SignalDeclaration.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclaration,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Zenject.SignalDeclaration.#ctor(Zenject.SignalDeclarationBindInfo,Zenject.ZenjectSettings)
      commentId: M:Zenject.SignalDeclaration.#ctor(Zenject.SignalDeclarationBindInfo,Zenject.ZenjectSettings)
      language: CSharp
      name:
        CSharp: SignalDeclaration(SignalDeclarationBindInfo, ZenjectSettings)
        VB: SignalDeclaration(SignalDeclarationBindInfo, ZenjectSettings)
      nameWithType:
        CSharp: SignalDeclaration.SignalDeclaration(SignalDeclarationBindInfo, ZenjectSettings)
        VB: SignalDeclaration.SignalDeclaration(SignalDeclarationBindInfo, ZenjectSettings)
      qualifiedName:
        CSharp: Zenject.SignalDeclaration.SignalDeclaration(Zenject.SignalDeclarationBindInfo, Zenject.ZenjectSettings)
        VB: Zenject.SignalDeclaration.SignalDeclaration(Zenject.SignalDeclarationBindInfo, Zenject.ZenjectSettings)
      type: Constructor
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
        id: .ctor
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
        startLine: 22
      syntax:
        content:
          CSharp: public SignalDeclaration(SignalDeclarationBindInfo bindInfo, ZenjectSettings zenjectSettings)
          VB: Public Sub New(bindInfo As SignalDeclarationBindInfo, zenjectSettings As ZenjectSettings)
        parameters:
        - id: bindInfo
          type: Zenject.SignalDeclarationBindInfo
        - id: zenjectSettings
          type: Zenject.ZenjectSettings
      overload: Zenject.SignalDeclaration.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalDeclaration.Subscriptions
      commentId: P:Zenject.SignalDeclaration.Subscriptions
      language: CSharp
      name:
        CSharp: Subscriptions
        VB: Subscriptions
      nameWithType:
        CSharp: SignalDeclaration.Subscriptions
        VB: SignalDeclaration.Subscriptions
      qualifiedName:
        CSharp: Zenject.SignalDeclaration.Subscriptions
        VB: Zenject.SignalDeclaration.Subscriptions
      type: Property
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
        id: Subscriptions
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
        startLine: 43
      syntax:
        content:
          CSharp: public List<SignalSubscription> Subscriptions { get; }
          VB: Public ReadOnly Property Subscriptions As List(Of SignalSubscription)
        parameters: []
        return:
          type: System.Collections.Generic.List{Zenject.SignalSubscription}
      overload: Zenject.SignalDeclaration.Subscriptions*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Zenject.SignalDeclaration.TickPriority
      commentId: P:Zenject.SignalDeclaration.TickPriority
      language: CSharp
      name:
        CSharp: TickPriority
        VB: TickPriority
      nameWithType:
        CSharp: SignalDeclaration.TickPriority
        VB: SignalDeclaration.TickPriority
      qualifiedName:
        CSharp: Zenject.SignalDeclaration.TickPriority
        VB: Zenject.SignalDeclaration.TickPriority
      type: Property
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
        id: TickPriority
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
        startLine: 45
      syntax:
        content:
          CSharp: public int TickPriority { get; }
          VB: Public ReadOnly Property TickPriority As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Zenject.SignalDeclaration.TickPriority*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Zenject.SignalDeclaration.IsAsync
      commentId: P:Zenject.SignalDeclaration.IsAsync
      language: CSharp
      name:
        CSharp: IsAsync
        VB: IsAsync
      nameWithType:
        CSharp: SignalDeclaration.IsAsync
        VB: SignalDeclaration.IsAsync
      qualifiedName:
        CSharp: Zenject.SignalDeclaration.IsAsync
        VB: Zenject.SignalDeclaration.IsAsync
      type: Property
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
        id: IsAsync
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
        startLine: 50
      syntax:
        content:
          CSharp: public bool IsAsync { get; }
          VB: Public ReadOnly Property IsAsync As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Zenject.SignalDeclaration.IsAsync*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Zenject.SignalDeclaration.BindingId
      commentId: P:Zenject.SignalDeclaration.BindingId
      language: CSharp
      name:
        CSharp: BindingId
        VB: BindingId
      nameWithType:
        CSharp: SignalDeclaration.BindingId
        VB: SignalDeclaration.BindingId
      qualifiedName:
        CSharp: Zenject.SignalDeclaration.BindingId
        VB: Zenject.SignalDeclaration.BindingId
      type: Property
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
        id: BindingId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
        startLine: 55
      syntax:
        content:
          CSharp: public BindingId BindingId { get; }
          VB: Public ReadOnly Property BindingId As BindingId
        parameters: []
        return:
          type: Zenject.BindingId
      overload: Zenject.SignalDeclaration.BindingId*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Zenject.SignalDeclaration.Dispose
      commentId: M:Zenject.SignalDeclaration.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: SignalDeclaration.Dispose()
        VB: SignalDeclaration.Dispose()
      qualifiedName:
        CSharp: Zenject.SignalDeclaration.Dispose()
        VB: Zenject.SignalDeclaration.Dispose()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
        id: Dispose
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
        startLine: 60
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: Zenject.SignalDeclaration.Dispose*
      implements:
      - System.IDisposable.Dispose
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalDeclaration.Fire(System.Object)
      commentId: M:Zenject.SignalDeclaration.Fire(System.Object)
      language: CSharp
      name:
        CSharp: Fire(Object)
        VB: Fire(Object)
      nameWithType:
        CSharp: SignalDeclaration.Fire(Object)
        VB: SignalDeclaration.Fire(Object)
      qualifiedName:
        CSharp: Zenject.SignalDeclaration.Fire(System.Object)
        VB: Zenject.SignalDeclaration.Fire(System.Object)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
        id: Fire
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
        startLine: 83
      syntax:
        content:
          CSharp: public void Fire(object signal)
          VB: Public Sub Fire(signal As Object)
        parameters:
        - id: signal
          type: System.Object
      overload: Zenject.SignalDeclaration.Fire*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalDeclaration.Tick
      commentId: M:Zenject.SignalDeclaration.Tick
      language: CSharp
      name:
        CSharp: Tick()
        VB: Tick()
      nameWithType:
        CSharp: SignalDeclaration.Tick()
        VB: SignalDeclaration.Tick()
      qualifiedName:
        CSharp: Zenject.SignalDeclaration.Tick()
        VB: Zenject.SignalDeclaration.Tick()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
        id: Tick
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
        startLine: 139
      syntax:
        content:
          CSharp: public void Tick()
          VB: Public Sub Tick
      overload: Zenject.SignalDeclaration.Tick*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalDeclaration.Add(Zenject.SignalSubscription)
      commentId: M:Zenject.SignalDeclaration.Add(Zenject.SignalSubscription)
      language: CSharp
      name:
        CSharp: Add(SignalSubscription)
        VB: Add(SignalSubscription)
      nameWithType:
        CSharp: SignalDeclaration.Add(SignalSubscription)
        VB: SignalDeclaration.Add(SignalSubscription)
      qualifiedName:
        CSharp: Zenject.SignalDeclaration.Add(Zenject.SignalSubscription)
        VB: Zenject.SignalDeclaration.Add(Zenject.SignalSubscription)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
        id: Add
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
        startLine: 166
      syntax:
        content:
          CSharp: public void Add(SignalSubscription subscription)
          VB: Public Sub Add(subscription As SignalSubscription)
        parameters:
        - id: subscription
          type: Zenject.SignalSubscription
      overload: Zenject.SignalDeclaration.Add*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalDeclaration.Remove(Zenject.SignalSubscription)
      commentId: M:Zenject.SignalDeclaration.Remove(Zenject.SignalSubscription)
      language: CSharp
      name:
        CSharp: Remove(SignalSubscription)
        VB: Remove(SignalSubscription)
      nameWithType:
        CSharp: SignalDeclaration.Remove(SignalSubscription)
        VB: SignalDeclaration.Remove(SignalSubscription)
      qualifiedName:
        CSharp: Zenject.SignalDeclaration.Remove(Zenject.SignalSubscription)
        VB: Zenject.SignalDeclaration.Remove(Zenject.SignalSubscription)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
        id: Remove
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
        startLine: 172
      syntax:
        content:
          CSharp: public void Remove(SignalSubscription subscription)
          VB: Public Sub Remove(subscription As SignalSubscription)
        parameters:
        - id: subscription
          type: Zenject.SignalSubscription
      overload: Zenject.SignalDeclaration.Remove*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Zenject.SignalDeclaration.Factory
    commentId: T:Zenject.SignalDeclaration.Factory
    language: CSharp
    name:
      CSharp: SignalDeclaration.Factory
      VB: SignalDeclaration.Factory
    nameWithType:
      CSharp: SignalDeclaration.Factory
      VB: SignalDeclaration.Factory
    qualifiedName:
      CSharp: Zenject.SignalDeclaration.Factory
      VB: Zenject.SignalDeclaration.Factory
    type: Class
    assemblies:
    - Zenject-Signals
    namespace: Zenject
    source:
      remote:
        path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
      id: Factory
      path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs
      startLine: 177
    syntax:
      content:
        CSharp: 'public class Factory : PlaceholderFactory<SignalDeclarationBindInfo, SignalDeclaration>, IPlaceholderFactory, IValidatable, IFactory<SignalDeclarationBindInfo, SignalDeclaration>, IFactory'
        VB: >-
          Public Class Factory

              Inherits PlaceholderFactory(Of SignalDeclarationBindInfo, SignalDeclaration)

              Implements IPlaceholderFactory, IValidatable, IFactory(Of SignalDeclarationBindInfo, SignalDeclaration), IFactory
    inheritance:
    - System.Object
    - Zenject.PlaceholderFactoryBase{Zenject.SignalDeclaration}
    - Zenject.PlaceholderFactory{Zenject.SignalDeclarationBindInfo,Zenject.SignalDeclaration}
    implements:
    - Zenject.IPlaceholderFactory
    - Zenject.IValidatable
    - Zenject.IFactory{Zenject.SignalDeclarationBindInfo,Zenject.SignalDeclaration}
    - Zenject.IFactory
    inheritedMembers:
    - Zenject.PlaceholderFactory{Zenject.SignalDeclarationBindInfo,Zenject.SignalDeclaration}.Create(Zenject.SignalDeclarationBindInfo)
    - Zenject.PlaceholderFactory{Zenject.SignalDeclarationBindInfo,Zenject.SignalDeclaration}.ParamTypes
    - Zenject.PlaceholderFactoryBase{Zenject.SignalDeclaration}.CreateInternal(System.Collections.Generic.List{Zenject.TypeValuePair})
    - Zenject.PlaceholderFactoryBase{Zenject.SignalDeclaration}.Validate
    - Zenject.PlaceholderFactoryBase{Zenject.SignalDeclaration}.ParamTypes
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    extensionMethods:
    - Zenject.SignalDeclaration.Factory.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalDeclaration.Factory.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalDeclaration.Factory.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclaration.Factory,{TProperty}},UniRx.FrameCountType,System.Boolean)
    - Zenject.SignalDeclaration.Factory.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclaration.Factory,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
    - Zenject.SignalDeclaration.Factory.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclaration.Factory,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Zenject.SignalSubscription
    commentId: T:Zenject.SignalSubscription
    language: CSharp
    name:
      CSharp: SignalSubscription
      VB: SignalSubscription
    nameWithType:
      CSharp: SignalSubscription
      VB: SignalSubscription
    qualifiedName:
      CSharp: Zenject.SignalSubscription
      VB: Zenject.SignalSubscription
    type: Class
    assemblies:
    - Zenject-Signals
    namespace: Zenject
    source:
      remote:
        path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscription.cs
      id: SignalSubscription
      path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscription.cs
      startLine: 6
    syntax:
      content:
        CSharp: 'public class SignalSubscription : IDisposable'
        VB: >-
          Public Class SignalSubscription

              Implements IDisposable
    inheritance:
    - System.Object
    implements:
    - System.IDisposable
    - IPoolable{System.Action{System.Object},Zenject.SignalDeclaration}
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    extensionMethods:
    - Zenject.SignalSubscription.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalSubscription.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalSubscription.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalSubscription,{TProperty}},UniRx.FrameCountType,System.Boolean)
    - Zenject.SignalSubscription.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalSubscription,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
    - Zenject.SignalSubscription.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalSubscription,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Zenject.SignalSubscription.#ctor(Zenject.SignalSubscription.Pool)
      commentId: M:Zenject.SignalSubscription.#ctor(Zenject.SignalSubscription.Pool)
      language: CSharp
      name:
        CSharp: SignalSubscription(SignalSubscription.Pool)
        VB: SignalSubscription(SignalSubscription.Pool)
      nameWithType:
        CSharp: SignalSubscription.SignalSubscription(SignalSubscription.Pool)
        VB: SignalSubscription.SignalSubscription(SignalSubscription.Pool)
      qualifiedName:
        CSharp: Zenject.SignalSubscription.SignalSubscription(Zenject.SignalSubscription.Pool)
        VB: Zenject.SignalSubscription.SignalSubscription(Zenject.SignalSubscription.Pool)
      type: Constructor
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscription.cs
        id: .ctor
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscription.cs
        startLine: 14
      syntax:
        content:
          CSharp: public SignalSubscription(SignalSubscription.Pool pool)
          VB: Public Sub New(pool As SignalSubscription.Pool)
        parameters:
        - id: pool
          type: Zenject.SignalSubscription.Pool
      overload: Zenject.SignalSubscription.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalSubscription.SignalId
      commentId: P:Zenject.SignalSubscription.SignalId
      language: CSharp
      name:
        CSharp: SignalId
        VB: SignalId
      nameWithType:
        CSharp: SignalSubscription.SignalId
        VB: SignalSubscription.SignalId
      qualifiedName:
        CSharp: Zenject.SignalSubscription.SignalId
        VB: Zenject.SignalSubscription.SignalId
      type: Property
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscription.cs
        id: SignalId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscription.cs
        startLine: 21
      syntax:
        content:
          CSharp: public BindingId SignalId { get; }
          VB: Public ReadOnly Property SignalId As BindingId
        parameters: []
        return:
          type: Zenject.BindingId
      overload: Zenject.SignalSubscription.SignalId*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Zenject.SignalSubscription.OnSpawned(System.Action{System.Object},Zenject.SignalDeclaration)
      commentId: M:Zenject.SignalSubscription.OnSpawned(System.Action{System.Object},Zenject.SignalDeclaration)
      language: CSharp
      name:
        CSharp: OnSpawned(Action<Object>, SignalDeclaration)
        VB: OnSpawned(Action(Of Object), SignalDeclaration)
      nameWithType:
        CSharp: SignalSubscription.OnSpawned(Action<Object>, SignalDeclaration)
        VB: SignalSubscription.OnSpawned(Action(Of Object), SignalDeclaration)
      qualifiedName:
        CSharp: Zenject.SignalSubscription.OnSpawned(System.Action<System.Object>, Zenject.SignalDeclaration)
        VB: Zenject.SignalSubscription.OnSpawned(System.Action(Of System.Object), Zenject.SignalDeclaration)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscription.cs
        id: OnSpawned
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscription.cs
        startLine: 26
      syntax:
        content:
          CSharp: public void OnSpawned(Action<object> callback, SignalDeclaration declaration)
          VB: Public Sub OnSpawned(callback As Action(Of Object), declaration As SignalDeclaration)
        parameters:
        - id: callback
          type: System.Action{System.Object}
        - id: declaration
          type: Zenject.SignalDeclaration
      overload: Zenject.SignalSubscription.OnSpawned*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalSubscription.OnDespawned
      commentId: M:Zenject.SignalSubscription.OnDespawned
      language: CSharp
      name:
        CSharp: OnDespawned()
        VB: OnDespawned()
      nameWithType:
        CSharp: SignalSubscription.OnDespawned()
        VB: SignalSubscription.OnDespawned()
      qualifiedName:
        CSharp: Zenject.SignalSubscription.OnDespawned()
        VB: Zenject.SignalSubscription.OnDespawned()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscription.cs
        id: OnDespawned
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscription.cs
        startLine: 38
      syntax:
        content:
          CSharp: public void OnDespawned()
          VB: Public Sub OnDespawned
      overload: Zenject.SignalSubscription.OnDespawned*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalSubscription.Dispose
      commentId: M:Zenject.SignalSubscription.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: SignalSubscription.Dispose()
        VB: SignalSubscription.Dispose()
      qualifiedName:
        CSharp: Zenject.SignalSubscription.Dispose()
        VB: Zenject.SignalSubscription.Dispose()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscription.cs
        id: Dispose
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscription.cs
        startLine: 55
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: Zenject.SignalSubscription.Dispose*
      implements:
      - System.IDisposable.Dispose
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalSubscription.OnDeclarationDespawned
      commentId: M:Zenject.SignalSubscription.OnDeclarationDespawned
      language: CSharp
      name:
        CSharp: OnDeclarationDespawned()
        VB: OnDeclarationDespawned()
      nameWithType:
        CSharp: SignalSubscription.OnDeclarationDespawned()
        VB: SignalSubscription.OnDeclarationDespawned()
      qualifiedName:
        CSharp: Zenject.SignalSubscription.OnDeclarationDespawned()
        VB: Zenject.SignalSubscription.OnDeclarationDespawned()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscription.cs
        id: OnDeclarationDespawned
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscription.cs
        startLine: 67
      syntax:
        content:
          CSharp: public void OnDeclarationDespawned()
          VB: Public Sub OnDeclarationDespawned
      overload: Zenject.SignalSubscription.OnDeclarationDespawned*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalSubscription.Invoke(System.Object)
      commentId: M:Zenject.SignalSubscription.Invoke(System.Object)
      language: CSharp
      name:
        CSharp: Invoke(Object)
        VB: Invoke(Object)
      nameWithType:
        CSharp: SignalSubscription.Invoke(Object)
        VB: SignalSubscription.Invoke(Object)
      qualifiedName:
        CSharp: Zenject.SignalSubscription.Invoke(System.Object)
        VB: Zenject.SignalSubscription.Invoke(System.Object)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscription.cs
        id: Invoke
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscription.cs
        startLine: 72
      syntax:
        content:
          CSharp: public void Invoke(object signal)
          VB: Public Sub Invoke(signal As Object)
        parameters:
        - id: signal
          type: System.Object
      overload: Zenject.SignalSubscription.Invoke*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Zenject.SignalSubscription.Pool
    commentId: T:Zenject.SignalSubscription.Pool
    language: CSharp
    name:
      CSharp: SignalSubscription.Pool
      VB: SignalSubscription.Pool
    nameWithType:
      CSharp: SignalSubscription.Pool
      VB: SignalSubscription.Pool
    qualifiedName:
      CSharp: Zenject.SignalSubscription.Pool
      VB: Zenject.SignalSubscription.Pool
    type: Class
    assemblies:
    - Zenject-Signals
    namespace: Zenject
    source:
      remote:
        path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscription.cs
      id: Pool
      path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscription.cs
      startLine: 77
    syntax:
      content:
        CSharp: 'public class Pool : PoolableMemoryPool<Action<object>, SignalDeclaration, SignalSubscription>, IValidatable, IDisposable, IMemoryPool<Action<object>, SignalDeclaration, SignalSubscription>, IDespawnableMemoryPool<SignalSubscription>, IMemoryPool, IFactory<Action<object>, SignalDeclaration, SignalSubscription>, IFactory'
        VB: >-
          Public Class Pool

              Inherits PoolableMemoryPool(Of Action(Of Object), SignalDeclaration, SignalSubscription)

              Implements IValidatable, IDisposable, IMemoryPool(Of Action(Of Object), SignalDeclaration, SignalSubscription), IDespawnableMemoryPool(Of SignalSubscription), IMemoryPool, IFactory(Of Action(Of Object), SignalDeclaration, SignalSubscription), IFactory
    inheritance:
    - System.Object
    - Zenject.MemoryPoolBase{Zenject.SignalSubscription}
    - Zenject.MemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}
    - Zenject.PoolableMemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}
    implements:
    - Zenject.IValidatable
    - System.IDisposable
    - Zenject.IMemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}
    - Zenject.IDespawnableMemoryPool{Zenject.SignalSubscription}
    - Zenject.IMemoryPool
    - Zenject.IFactory{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}
    - Zenject.IFactory
    inheritedMembers:
    - Zenject.PoolableMemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}.OnDespawned(Zenject.SignalSubscription)
    - Zenject.PoolableMemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}.Reinitialize(System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription)
    - Zenject.MemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}.Spawn(System.Action{System.Object},Zenject.SignalDeclaration)
    - Zenject.MemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}.Zenject#IFactory{TParam1,TParam2,TValue}#Create(System.Action{System.Object},Zenject.SignalDeclaration)
    - Zenject.MemoryPoolBase{Zenject.SignalSubscription}.Container
    - Zenject.MemoryPoolBase{Zenject.SignalSubscription}.InactiveItems
    - Zenject.MemoryPoolBase{Zenject.SignalSubscription}.NumTotal
    - Zenject.MemoryPoolBase{Zenject.SignalSubscription}.NumInactive
    - Zenject.MemoryPoolBase{Zenject.SignalSubscription}.NumActive
    - Zenject.MemoryPoolBase{Zenject.SignalSubscription}.ItemType
    - Zenject.MemoryPoolBase{Zenject.SignalSubscription}.Dispose
    - Zenject.MemoryPoolBase{Zenject.SignalSubscription}.Zenject#IMemoryPool#Despawn(System.Object)
    - Zenject.MemoryPoolBase{Zenject.SignalSubscription}.Despawn(Zenject.SignalSubscription)
    - Zenject.MemoryPoolBase{Zenject.SignalSubscription}.Zenject#IValidatable#Validate
    - Zenject.MemoryPoolBase{Zenject.SignalSubscription}.Clear
    - Zenject.MemoryPoolBase{Zenject.SignalSubscription}.ShrinkBy(System.Int32)
    - Zenject.MemoryPoolBase{Zenject.SignalSubscription}.ExpandBy(System.Int32)
    - Zenject.MemoryPoolBase{Zenject.SignalSubscription}.GetInternal
    - Zenject.MemoryPoolBase{Zenject.SignalSubscription}.Resize(System.Int32)
    - Zenject.MemoryPoolBase{Zenject.SignalSubscription}.OnDespawned(Zenject.SignalSubscription)
    - Zenject.MemoryPoolBase{Zenject.SignalSubscription}.OnSpawned(Zenject.SignalSubscription)
    - Zenject.MemoryPoolBase{Zenject.SignalSubscription}.OnCreated(Zenject.SignalSubscription)
    - Zenject.MemoryPoolBase{Zenject.SignalSubscription}.OnDestroyed(Zenject.SignalSubscription)
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    extensionMethods:
    - Zenject.SignalSubscription.Pool.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalSubscription.Pool.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalSubscription.Pool.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalSubscription.Pool,{TProperty}},UniRx.FrameCountType,System.Boolean)
    - Zenject.SignalSubscription.Pool.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalSubscription.Pool,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
    - Zenject.SignalSubscription.Pool.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalSubscription.Pool,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Zenject.SignalSubscriptionId
    commentId: T:Zenject.SignalSubscriptionId
    language: CSharp
    name:
      CSharp: SignalSubscriptionId
      VB: SignalSubscriptionId
    nameWithType:
      CSharp: SignalSubscriptionId
      VB: SignalSubscriptionId
    qualifiedName:
      CSharp: Zenject.SignalSubscriptionId
      VB: Zenject.SignalSubscriptionId
    type: Struct
    assemblies:
    - Zenject-Signals
    namespace: Zenject
    source:
      remote:
        path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscriptionId.cs
      id: SignalSubscriptionId
      path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscriptionId.cs
      startLine: 5
    syntax:
      content:
        CSharp: 'public struct SignalSubscriptionId : IEquatable<SignalSubscriptionId>'
        VB: >-
          Public Structure SignalSubscriptionId

              Implements IEquatable(Of SignalSubscriptionId)
    implements:
    - System.IEquatable{Zenject.SignalSubscriptionId}
    inheritedMembers:
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    extensionMethods:
    - Zenject.SignalSubscriptionId.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalSubscriptionId.ModestTree.LinqExtensions.Yield``1
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Zenject.SignalSubscriptionId.#ctor(Zenject.BindingId,System.Object)
      commentId: M:Zenject.SignalSubscriptionId.#ctor(Zenject.BindingId,System.Object)
      language: CSharp
      name:
        CSharp: SignalSubscriptionId(BindingId, Object)
        VB: SignalSubscriptionId(BindingId, Object)
      nameWithType:
        CSharp: SignalSubscriptionId.SignalSubscriptionId(BindingId, Object)
        VB: SignalSubscriptionId.SignalSubscriptionId(BindingId, Object)
      qualifiedName:
        CSharp: Zenject.SignalSubscriptionId.SignalSubscriptionId(Zenject.BindingId, System.Object)
        VB: Zenject.SignalSubscriptionId.SignalSubscriptionId(Zenject.BindingId, System.Object)
      type: Constructor
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscriptionId.cs
        id: .ctor
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscriptionId.cs
        startLine: 11
      syntax:
        content:
          CSharp: public SignalSubscriptionId(BindingId signalId, object callback)
          VB: Public Sub New(signalId As BindingId, callback As Object)
        parameters:
        - id: signalId
          type: Zenject.BindingId
        - id: callback
          type: System.Object
      overload: Zenject.SignalSubscriptionId.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalSubscriptionId.SignalId
      commentId: P:Zenject.SignalSubscriptionId.SignalId
      language: CSharp
      name:
        CSharp: SignalId
        VB: SignalId
      nameWithType:
        CSharp: SignalSubscriptionId.SignalId
        VB: SignalSubscriptionId.SignalId
      qualifiedName:
        CSharp: Zenject.SignalSubscriptionId.SignalId
        VB: Zenject.SignalSubscriptionId.SignalId
      type: Property
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscriptionId.cs
        id: SignalId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscriptionId.cs
        startLine: 17
      syntax:
        content:
          CSharp: public readonly BindingId SignalId { get; }
          VB: Public ReadOnly Property SignalId As BindingId
        parameters: []
        return:
          type: Zenject.BindingId
      overload: Zenject.SignalSubscriptionId.SignalId*
      modifiers:
        CSharp:
        - public
        - readonly
        - get
        VB:
        - Public
        - ReadOnly
    - id: Zenject.SignalSubscriptionId.Callback
      commentId: P:Zenject.SignalSubscriptionId.Callback
      language: CSharp
      name:
        CSharp: Callback
        VB: Callback
      nameWithType:
        CSharp: SignalSubscriptionId.Callback
        VB: SignalSubscriptionId.Callback
      qualifiedName:
        CSharp: Zenject.SignalSubscriptionId.Callback
        VB: Zenject.SignalSubscriptionId.Callback
      type: Property
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscriptionId.cs
        id: Callback
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscriptionId.cs
        startLine: 22
      syntax:
        content:
          CSharp: public readonly object Callback { get; }
          VB: Public ReadOnly Property Callback As Object
        parameters: []
        return:
          type: System.Object
      overload: Zenject.SignalSubscriptionId.Callback*
      modifiers:
        CSharp:
        - public
        - readonly
        - get
        VB:
        - Public
        - ReadOnly
    - id: Zenject.SignalSubscriptionId.GetHashCode
      commentId: M:Zenject.SignalSubscriptionId.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: SignalSubscriptionId.GetHashCode()
        VB: SignalSubscriptionId.GetHashCode()
      qualifiedName:
        CSharp: Zenject.SignalSubscriptionId.GetHashCode()
        VB: Zenject.SignalSubscriptionId.GetHashCode()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscriptionId.cs
        id: GetHashCode
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscriptionId.cs
        startLine: 27
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Zenject.SignalSubscriptionId.GetHashCode*
      overridden: System.ValueType.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Zenject.SignalSubscriptionId.Equals(System.Object)
      commentId: M:Zenject.SignalSubscriptionId.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: SignalSubscriptionId.Equals(Object)
        VB: SignalSubscriptionId.Equals(Object)
      qualifiedName:
        CSharp: Zenject.SignalSubscriptionId.Equals(System.Object)
        VB: Zenject.SignalSubscriptionId.Equals(System.Object)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscriptionId.cs
        id: Equals
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscriptionId.cs
        startLine: 38
      syntax:
        content:
          CSharp: public override bool Equals(object that)
          VB: Public Overrides Function Equals(that As Object) As Boolean
        parameters:
        - id: that
          type: System.Object
        return:
          type: System.Boolean
      overload: Zenject.SignalSubscriptionId.Equals*
      overridden: System.ValueType.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Zenject.SignalSubscriptionId.Equals(Zenject.SignalSubscriptionId)
      commentId: M:Zenject.SignalSubscriptionId.Equals(Zenject.SignalSubscriptionId)
      language: CSharp
      name:
        CSharp: Equals(SignalSubscriptionId)
        VB: Equals(SignalSubscriptionId)
      nameWithType:
        CSharp: SignalSubscriptionId.Equals(SignalSubscriptionId)
        VB: SignalSubscriptionId.Equals(SignalSubscriptionId)
      qualifiedName:
        CSharp: Zenject.SignalSubscriptionId.Equals(Zenject.SignalSubscriptionId)
        VB: Zenject.SignalSubscriptionId.Equals(Zenject.SignalSubscriptionId)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscriptionId.cs
        id: Equals
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscriptionId.cs
        startLine: 48
      syntax:
        content:
          CSharp: public bool Equals(SignalSubscriptionId that)
          VB: Public Function Equals(that As SignalSubscriptionId) As Boolean
        parameters:
        - id: that
          type: Zenject.SignalSubscriptionId
        return:
          type: System.Boolean
      overload: Zenject.SignalSubscriptionId.Equals*
      implements:
      - System.IEquatable{Zenject.SignalSubscriptionId}.Equals(Zenject.SignalSubscriptionId)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalSubscriptionId.op_Equality(Zenject.SignalSubscriptionId,Zenject.SignalSubscriptionId)
      commentId: M:Zenject.SignalSubscriptionId.op_Equality(Zenject.SignalSubscriptionId,Zenject.SignalSubscriptionId)
      language: CSharp
      name:
        CSharp: Equality(SignalSubscriptionId, SignalSubscriptionId)
        VB: Equality(SignalSubscriptionId, SignalSubscriptionId)
      nameWithType:
        CSharp: SignalSubscriptionId.Equality(SignalSubscriptionId, SignalSubscriptionId)
        VB: SignalSubscriptionId.Equality(SignalSubscriptionId, SignalSubscriptionId)
      qualifiedName:
        CSharp: Zenject.SignalSubscriptionId.Equality(Zenject.SignalSubscriptionId, Zenject.SignalSubscriptionId)
        VB: Zenject.SignalSubscriptionId.Equality(Zenject.SignalSubscriptionId, Zenject.SignalSubscriptionId)
      type: Operator
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscriptionId.cs
        id: op_Equality
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscriptionId.cs
        startLine: 54
      syntax:
        content:
          CSharp: public static bool operator ==(SignalSubscriptionId left, SignalSubscriptionId right)
          VB: Public Shared Operator =(left As SignalSubscriptionId, right As SignalSubscriptionId) As Boolean
        parameters:
        - id: left
          type: Zenject.SignalSubscriptionId
        - id: right
          type: Zenject.SignalSubscriptionId
        return:
          type: System.Boolean
      overload: Zenject.SignalSubscriptionId.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Zenject.SignalSubscriptionId.op_Inequality(Zenject.SignalSubscriptionId,Zenject.SignalSubscriptionId)
      commentId: M:Zenject.SignalSubscriptionId.op_Inequality(Zenject.SignalSubscriptionId,Zenject.SignalSubscriptionId)
      language: CSharp
      name:
        CSharp: Inequality(SignalSubscriptionId, SignalSubscriptionId)
        VB: Inequality(SignalSubscriptionId, SignalSubscriptionId)
      nameWithType:
        CSharp: SignalSubscriptionId.Inequality(SignalSubscriptionId, SignalSubscriptionId)
        VB: SignalSubscriptionId.Inequality(SignalSubscriptionId, SignalSubscriptionId)
      qualifiedName:
        CSharp: Zenject.SignalSubscriptionId.Inequality(Zenject.SignalSubscriptionId, Zenject.SignalSubscriptionId)
        VB: Zenject.SignalSubscriptionId.Inequality(Zenject.SignalSubscriptionId, Zenject.SignalSubscriptionId)
      type: Operator
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscriptionId.cs
        id: op_Inequality
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalSubscriptionId.cs
        startLine: 59
      syntax:
        content:
          CSharp: public static bool operator !=(SignalSubscriptionId left, SignalSubscriptionId right)
          VB: Public Shared Operator <>(left As SignalSubscriptionId, right As SignalSubscriptionId) As Boolean
        parameters:
        - id: left
          type: Zenject.SignalSubscriptionId
        - id: right
          type: Zenject.SignalSubscriptionId
        return:
          type: System.Boolean
      overload: Zenject.SignalSubscriptionId.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Zenject.SignalBus
    commentId: T:Zenject.SignalBus
    language: CSharp
    name:
      CSharp: SignalBus
      VB: SignalBus
    nameWithType:
      CSharp: SignalBus
      VB: SignalBus
    qualifiedName:
      CSharp: Zenject.SignalBus
      VB: Zenject.SignalBus
    type: Class
    assemblies:
    - Zenject-Signals
    namespace: Zenject
    source:
      remote:
        path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
      id: SignalBus
      path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
      startLine: 10
    syntax:
      content:
        CSharp: 'public class SignalBus : ILateDisposable'
        VB: >-
          Public Class SignalBus

              Inherits ILateDisposable
    inheritance:
    - System.Object
    extensionMethods:
    - Zenject.SignalBus.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalBus.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalBus.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalBus,{TProperty}},UniRx.FrameCountType,System.Boolean)
    - Zenject.SignalBus.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalBus,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
    - Zenject.SignalBus.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalBus,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Zenject.SignalBus.#ctor(System.Collections.Generic.List{Zenject.SignalDeclaration},Zenject.SignalBus,Zenject.ZenjectSettings,Zenject.SignalSubscription.Pool,Zenject.SignalDeclaration.Factory,Zenject.DiContainer)
      commentId: M:Zenject.SignalBus.#ctor(System.Collections.Generic.List{Zenject.SignalDeclaration},Zenject.SignalBus,Zenject.ZenjectSettings,Zenject.SignalSubscription.Pool,Zenject.SignalDeclaration.Factory,Zenject.DiContainer)
      language: CSharp
      name:
        CSharp: SignalBus(List<SignalDeclaration>, SignalBus, ZenjectSettings, SignalSubscription.Pool, SignalDeclaration.Factory, DiContainer)
        VB: SignalBus(List(Of SignalDeclaration), SignalBus, ZenjectSettings, SignalSubscription.Pool, SignalDeclaration.Factory, DiContainer)
      nameWithType:
        CSharp: SignalBus.SignalBus(List<SignalDeclaration>, SignalBus, ZenjectSettings, SignalSubscription.Pool, SignalDeclaration.Factory, DiContainer)
        VB: SignalBus.SignalBus(List(Of SignalDeclaration), SignalBus, ZenjectSettings, SignalSubscription.Pool, SignalDeclaration.Factory, DiContainer)
      qualifiedName:
        CSharp: Zenject.SignalBus.SignalBus(System.Collections.Generic.List<Zenject.SignalDeclaration>, Zenject.SignalBus, Zenject.ZenjectSettings, Zenject.SignalSubscription.Pool, Zenject.SignalDeclaration.Factory, Zenject.DiContainer)
        VB: Zenject.SignalBus.SignalBus(System.Collections.Generic.List(Of Zenject.SignalDeclaration), Zenject.SignalBus, Zenject.ZenjectSettings, Zenject.SignalSubscription.Pool, Zenject.SignalDeclaration.Factory, Zenject.DiContainer)
      type: Constructor
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: .ctor
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 20
      syntax:
        content:
          CSharp: public SignalBus(List<SignalDeclaration> signalDeclarations, SignalBus parentBus, ZenjectSettings zenjectSettings, SignalSubscription.Pool subscriptionPool, SignalDeclaration.Factory signalDeclarationFactory, DiContainer container)
          VB: Public Sub New(signalDeclarations As List(Of SignalDeclaration), parentBus As SignalBus, zenjectSettings As ZenjectSettings, subscriptionPool As SignalSubscription.Pool, signalDeclarationFactory As SignalDeclaration.Factory, container As DiContainer)
        parameters:
        - id: signalDeclarations
          type: System.Collections.Generic.List{Zenject.SignalDeclaration}
        - id: parentBus
          type: Zenject.SignalBus
        - id: zenjectSettings
          type: Zenject.ZenjectSettings
        - id: subscriptionPool
          type: Zenject.SignalSubscription.Pool
        - id: signalDeclarationFactory
          type: Zenject.SignalDeclaration.Factory
        - id: container
          type: Zenject.DiContainer
      overload: Zenject.SignalBus.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.ParentBus
      commentId: P:Zenject.SignalBus.ParentBus
      language: CSharp
      name:
        CSharp: ParentBus
        VB: ParentBus
      nameWithType:
        CSharp: SignalBus.ParentBus
        VB: SignalBus.ParentBus
      qualifiedName:
        CSharp: Zenject.SignalBus.ParentBus
        VB: Zenject.SignalBus.ParentBus
      type: Property
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: ParentBus
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 48
      syntax:
        content:
          CSharp: public SignalBus ParentBus { get; }
          VB: Public ReadOnly Property ParentBus As SignalBus
        parameters: []
        return:
          type: Zenject.SignalBus
      overload: Zenject.SignalBus.ParentBus*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Zenject.SignalBus.NumSubscribers
      commentId: P:Zenject.SignalBus.NumSubscribers
      language: CSharp
      name:
        CSharp: NumSubscribers
        VB: NumSubscribers
      nameWithType:
        CSharp: SignalBus.NumSubscribers
        VB: SignalBus.NumSubscribers
      qualifiedName:
        CSharp: Zenject.SignalBus.NumSubscribers
        VB: Zenject.SignalBus.NumSubscribers
      type: Property
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: NumSubscribers
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 53
      syntax:
        content:
          CSharp: public int NumSubscribers { get; }
          VB: Public ReadOnly Property NumSubscribers As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Zenject.SignalBus.NumSubscribers*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Zenject.SignalBus.AbstractFire``1
      commentId: M:Zenject.SignalBus.AbstractFire``1
      language: CSharp
      name:
        CSharp: AbstractFire<TSignal>()
        VB: AbstractFire(Of TSignal)()
      nameWithType:
        CSharp: SignalBus.AbstractFire<TSignal>()
        VB: SignalBus.AbstractFire(Of TSignal)()
      qualifiedName:
        CSharp: Zenject.SignalBus.AbstractFire<TSignal>()
        VB: Zenject.SignalBus.AbstractFire(Of TSignal)()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: AbstractFire
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 60
      syntax:
        content:
          CSharp: >-
            public void AbstractFire<TSignal>()

                where TSignal : new()
          VB: Public Sub AbstractFire(Of TSignal As New)
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.AbstractFire*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.AbstractFire``1(``0)
      commentId: M:Zenject.SignalBus.AbstractFire``1(``0)
      language: CSharp
      name:
        CSharp: AbstractFire<TSignal>(TSignal)
        VB: AbstractFire(Of TSignal)(TSignal)
      nameWithType:
        CSharp: SignalBus.AbstractFire<TSignal>(TSignal)
        VB: SignalBus.AbstractFire(Of TSignal)(TSignal)
      qualifiedName:
        CSharp: Zenject.SignalBus.AbstractFire<TSignal>(TSignal)
        VB: Zenject.SignalBus.AbstractFire(Of TSignal)(TSignal)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: AbstractFire
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 61
      syntax:
        content:
          CSharp: public void AbstractFire<TSignal>(TSignal signal)
          VB: Public Sub AbstractFire(Of TSignal)(signal As TSignal)
        parameters:
        - id: signal
          type: '{TSignal}'
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.AbstractFire*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.AbstractFireId``1(System.Object,``0)
      commentId: M:Zenject.SignalBus.AbstractFireId``1(System.Object,``0)
      language: CSharp
      name:
        CSharp: AbstractFireId<TSignal>(Object, TSignal)
        VB: AbstractFireId(Of TSignal)(Object, TSignal)
      nameWithType:
        CSharp: SignalBus.AbstractFireId<TSignal>(Object, TSignal)
        VB: SignalBus.AbstractFireId(Of TSignal)(Object, TSignal)
      qualifiedName:
        CSharp: Zenject.SignalBus.AbstractFireId<TSignal>(System.Object, TSignal)
        VB: Zenject.SignalBus.AbstractFireId(Of TSignal)(System.Object, TSignal)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: AbstractFireId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 62
      syntax:
        content:
          CSharp: public void AbstractFireId<TSignal>(object identifier, TSignal signal)
          VB: Public Sub AbstractFireId(Of TSignal)(identifier As Object, signal As TSignal)
        parameters:
        - id: identifier
          type: System.Object
        - id: signal
          type: '{TSignal}'
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.AbstractFireId*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.LateDispose
      commentId: M:Zenject.SignalBus.LateDispose
      language: CSharp
      name:
        CSharp: LateDispose()
        VB: LateDispose()
      nameWithType:
        CSharp: SignalBus.LateDispose()
        VB: SignalBus.LateDispose()
      qualifiedName:
        CSharp: Zenject.SignalBus.LateDispose()
        VB: Zenject.SignalBus.LateDispose()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: LateDispose
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 76
      syntax:
        content:
          CSharp: public void LateDispose()
          VB: Public Sub LateDispose
      overload: Zenject.SignalBus.LateDispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.FireId``1(System.Object,``0)
      commentId: M:Zenject.SignalBus.FireId``1(System.Object,``0)
      language: CSharp
      name:
        CSharp: FireId<TSignal>(Object, TSignal)
        VB: FireId(Of TSignal)(Object, TSignal)
      nameWithType:
        CSharp: SignalBus.FireId<TSignal>(Object, TSignal)
        VB: SignalBus.FireId(Of TSignal)(Object, TSignal)
      qualifiedName:
        CSharp: Zenject.SignalBus.FireId<TSignal>(System.Object, TSignal)
        VB: Zenject.SignalBus.FireId(Of TSignal)(System.Object, TSignal)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: FireId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 101
      syntax:
        content:
          CSharp: public void FireId<TSignal>(object identifier, TSignal signal)
          VB: Public Sub FireId(Of TSignal)(identifier As Object, signal As TSignal)
        parameters:
        - id: identifier
          type: System.Object
        - id: signal
          type: '{TSignal}'
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.FireId*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.Fire``1(``0)
      commentId: M:Zenject.SignalBus.Fire``1(``0)
      language: CSharp
      name:
        CSharp: Fire<TSignal>(TSignal)
        VB: Fire(Of TSignal)(TSignal)
      nameWithType:
        CSharp: SignalBus.Fire<TSignal>(TSignal)
        VB: SignalBus.Fire(Of TSignal)(TSignal)
      qualifiedName:
        CSharp: Zenject.SignalBus.Fire<TSignal>(TSignal)
        VB: Zenject.SignalBus.Fire(Of TSignal)(TSignal)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: Fire
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 106
      syntax:
        content:
          CSharp: public void Fire<TSignal>(TSignal signal)
          VB: Public Sub Fire(Of TSignal)(signal As TSignal)
        parameters:
        - id: signal
          type: '{TSignal}'
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.Fire*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.FireId``1(System.Object)
      commentId: M:Zenject.SignalBus.FireId``1(System.Object)
      language: CSharp
      name:
        CSharp: FireId<TSignal>(Object)
        VB: FireId(Of TSignal)(Object)
      nameWithType:
        CSharp: SignalBus.FireId<TSignal>(Object)
        VB: SignalBus.FireId(Of TSignal)(Object)
      qualifiedName:
        CSharp: Zenject.SignalBus.FireId<TSignal>(System.Object)
        VB: Zenject.SignalBus.FireId(Of TSignal)(System.Object)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: FireId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 111
      syntax:
        content:
          CSharp: public void FireId<TSignal>(object identifier)
          VB: Public Sub FireId(Of TSignal)(identifier As Object)
        parameters:
        - id: identifier
          type: System.Object
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.FireId*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.Fire``1
      commentId: M:Zenject.SignalBus.Fire``1
      language: CSharp
      name:
        CSharp: Fire<TSignal>()
        VB: Fire(Of TSignal)()
      nameWithType:
        CSharp: SignalBus.Fire<TSignal>()
        VB: SignalBus.Fire(Of TSignal)()
      qualifiedName:
        CSharp: Zenject.SignalBus.Fire<TSignal>()
        VB: Zenject.SignalBus.Fire(Of TSignal)()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: Fire
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 116
      syntax:
        content:
          CSharp: public void Fire<TSignal>()
          VB: Public Sub Fire(Of TSignal)
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.Fire*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.FireId(System.Object,System.Object)
      commentId: M:Zenject.SignalBus.FireId(System.Object,System.Object)
      language: CSharp
      name:
        CSharp: FireId(Object, Object)
        VB: FireId(Object, Object)
      nameWithType:
        CSharp: SignalBus.FireId(Object, Object)
        VB: SignalBus.FireId(Object, Object)
      qualifiedName:
        CSharp: Zenject.SignalBus.FireId(System.Object, System.Object)
        VB: Zenject.SignalBus.FireId(System.Object, System.Object)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: FireId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 121
      syntax:
        content:
          CSharp: public void FireId(object identifier, object signal)
          VB: Public Sub FireId(identifier As Object, signal As Object)
        parameters:
        - id: identifier
          type: System.Object
        - id: signal
          type: System.Object
      overload: Zenject.SignalBus.FireId*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.Fire(System.Object)
      commentId: M:Zenject.SignalBus.Fire(System.Object)
      language: CSharp
      name:
        CSharp: Fire(Object)
        VB: Fire(Object)
      nameWithType:
        CSharp: SignalBus.Fire(Object)
        VB: SignalBus.Fire(Object)
      qualifiedName:
        CSharp: Zenject.SignalBus.Fire(System.Object)
        VB: Zenject.SignalBus.Fire(System.Object)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: Fire
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 126
      syntax:
        content:
          CSharp: public void Fire(object signal)
          VB: Public Sub Fire(signal As Object)
        parameters:
        - id: signal
          type: System.Object
      overload: Zenject.SignalBus.Fire*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.IsSignalDeclared``1
      commentId: M:Zenject.SignalBus.IsSignalDeclared``1
      language: CSharp
      name:
        CSharp: IsSignalDeclared<TSignal>()
        VB: IsSignalDeclared(Of TSignal)()
      nameWithType:
        CSharp: SignalBus.IsSignalDeclared<TSignal>()
        VB: SignalBus.IsSignalDeclared(Of TSignal)()
      qualifiedName:
        CSharp: Zenject.SignalBus.IsSignalDeclared<TSignal>()
        VB: Zenject.SignalBus.IsSignalDeclared(Of TSignal)()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: IsSignalDeclared
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 131
      syntax:
        content:
          CSharp: public bool IsSignalDeclared<TSignal>()
          VB: Public Function IsSignalDeclared(Of TSignal) As Boolean
        typeParameters:
        - id: TSignal
        return:
          type: System.Boolean
      overload: Zenject.SignalBus.IsSignalDeclared*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.IsSignalDeclared``1(System.Object)
      commentId: M:Zenject.SignalBus.IsSignalDeclared``1(System.Object)
      language: CSharp
      name:
        CSharp: IsSignalDeclared<TSignal>(Object)
        VB: IsSignalDeclared(Of TSignal)(Object)
      nameWithType:
        CSharp: SignalBus.IsSignalDeclared<TSignal>(Object)
        VB: SignalBus.IsSignalDeclared(Of TSignal)(Object)
      qualifiedName:
        CSharp: Zenject.SignalBus.IsSignalDeclared<TSignal>(System.Object)
        VB: Zenject.SignalBus.IsSignalDeclared(Of TSignal)(System.Object)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: IsSignalDeclared
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 136
      syntax:
        content:
          CSharp: public bool IsSignalDeclared<TSignal>(object identifier)
          VB: Public Function IsSignalDeclared(Of TSignal)(identifier As Object) As Boolean
        parameters:
        - id: identifier
          type: System.Object
        typeParameters:
        - id: TSignal
        return:
          type: System.Boolean
      overload: Zenject.SignalBus.IsSignalDeclared*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.IsSignalDeclared(System.Type)
      commentId: M:Zenject.SignalBus.IsSignalDeclared(System.Type)
      language: CSharp
      name:
        CSharp: IsSignalDeclared(Type)
        VB: IsSignalDeclared(Type)
      nameWithType:
        CSharp: SignalBus.IsSignalDeclared(Type)
        VB: SignalBus.IsSignalDeclared(Type)
      qualifiedName:
        CSharp: Zenject.SignalBus.IsSignalDeclared(System.Type)
        VB: Zenject.SignalBus.IsSignalDeclared(System.Type)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: IsSignalDeclared
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 141
      syntax:
        content:
          CSharp: public bool IsSignalDeclared(Type signalType)
          VB: Public Function IsSignalDeclared(signalType As Type) As Boolean
        parameters:
        - id: signalType
          type: System.Type
        return:
          type: System.Boolean
      overload: Zenject.SignalBus.IsSignalDeclared*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.IsSignalDeclared(System.Type,System.Object)
      commentId: M:Zenject.SignalBus.IsSignalDeclared(System.Type,System.Object)
      language: CSharp
      name:
        CSharp: IsSignalDeclared(Type, Object)
        VB: IsSignalDeclared(Type, Object)
      nameWithType:
        CSharp: SignalBus.IsSignalDeclared(Type, Object)
        VB: SignalBus.IsSignalDeclared(Type, Object)
      qualifiedName:
        CSharp: Zenject.SignalBus.IsSignalDeclared(System.Type, System.Object)
        VB: Zenject.SignalBus.IsSignalDeclared(System.Type, System.Object)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: IsSignalDeclared
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 146
      syntax:
        content:
          CSharp: public bool IsSignalDeclared(Type signalType, object identifier)
          VB: Public Function IsSignalDeclared(signalType As Type, identifier As Object) As Boolean
        parameters:
        - id: signalType
          type: System.Type
        - id: identifier
          type: System.Object
        return:
          type: System.Boolean
      overload: Zenject.SignalBus.IsSignalDeclared*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.TryFireId``1(System.Object,``0)
      commentId: M:Zenject.SignalBus.TryFireId``1(System.Object,``0)
      language: CSharp
      name:
        CSharp: TryFireId<TSignal>(Object, TSignal)
        VB: TryFireId(Of TSignal)(Object, TSignal)
      nameWithType:
        CSharp: SignalBus.TryFireId<TSignal>(Object, TSignal)
        VB: SignalBus.TryFireId(Of TSignal)(Object, TSignal)
      qualifiedName:
        CSharp: Zenject.SignalBus.TryFireId<TSignal>(System.Object, TSignal)
        VB: Zenject.SignalBus.TryFireId(Of TSignal)(System.Object, TSignal)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: TryFireId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 152
      syntax:
        content:
          CSharp: public void TryFireId<TSignal>(object identifier, TSignal signal)
          VB: Public Sub TryFireId(Of TSignal)(identifier As Object, signal As TSignal)
        parameters:
        - id: identifier
          type: System.Object
        - id: signal
          type: '{TSignal}'
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.TryFireId*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.TryFire``1(``0)
      commentId: M:Zenject.SignalBus.TryFire``1(``0)
      language: CSharp
      name:
        CSharp: TryFire<TSignal>(TSignal)
        VB: TryFire(Of TSignal)(TSignal)
      nameWithType:
        CSharp: SignalBus.TryFire<TSignal>(TSignal)
        VB: SignalBus.TryFire(Of TSignal)(TSignal)
      qualifiedName:
        CSharp: Zenject.SignalBus.TryFire<TSignal>(TSignal)
        VB: Zenject.SignalBus.TryFire(Of TSignal)(TSignal)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: TryFire
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 157
      syntax:
        content:
          CSharp: public void TryFire<TSignal>(TSignal signal)
          VB: Public Sub TryFire(Of TSignal)(signal As TSignal)
        parameters:
        - id: signal
          type: '{TSignal}'
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.TryFire*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.TryFireId``1(System.Object)
      commentId: M:Zenject.SignalBus.TryFireId``1(System.Object)
      language: CSharp
      name:
        CSharp: TryFireId<TSignal>(Object)
        VB: TryFireId(Of TSignal)(Object)
      nameWithType:
        CSharp: SignalBus.TryFireId<TSignal>(Object)
        VB: SignalBus.TryFireId(Of TSignal)(Object)
      qualifiedName:
        CSharp: Zenject.SignalBus.TryFireId<TSignal>(System.Object)
        VB: Zenject.SignalBus.TryFireId(Of TSignal)(System.Object)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: TryFireId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 162
      syntax:
        content:
          CSharp: public void TryFireId<TSignal>(object identifier)
          VB: Public Sub TryFireId(Of TSignal)(identifier As Object)
        parameters:
        - id: identifier
          type: System.Object
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.TryFireId*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.TryFire``1
      commentId: M:Zenject.SignalBus.TryFire``1
      language: CSharp
      name:
        CSharp: TryFire<TSignal>()
        VB: TryFire(Of TSignal)()
      nameWithType:
        CSharp: SignalBus.TryFire<TSignal>()
        VB: SignalBus.TryFire(Of TSignal)()
      qualifiedName:
        CSharp: Zenject.SignalBus.TryFire<TSignal>()
        VB: Zenject.SignalBus.TryFire(Of TSignal)()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: TryFire
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 167
      syntax:
        content:
          CSharp: public void TryFire<TSignal>()
          VB: Public Sub TryFire(Of TSignal)
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.TryFire*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.TryFireId(System.Object,System.Object)
      commentId: M:Zenject.SignalBus.TryFireId(System.Object,System.Object)
      language: CSharp
      name:
        CSharp: TryFireId(Object, Object)
        VB: TryFireId(Object, Object)
      nameWithType:
        CSharp: SignalBus.TryFireId(Object, Object)
        VB: SignalBus.TryFireId(Object, Object)
      qualifiedName:
        CSharp: Zenject.SignalBus.TryFireId(System.Object, System.Object)
        VB: Zenject.SignalBus.TryFireId(System.Object, System.Object)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: TryFireId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 172
      syntax:
        content:
          CSharp: public void TryFireId(object identifier, object signal)
          VB: Public Sub TryFireId(identifier As Object, signal As Object)
        parameters:
        - id: identifier
          type: System.Object
        - id: signal
          type: System.Object
      overload: Zenject.SignalBus.TryFireId*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.TryFire(System.Object)
      commentId: M:Zenject.SignalBus.TryFire(System.Object)
      language: CSharp
      name:
        CSharp: TryFire(Object)
        VB: TryFire(Object)
      nameWithType:
        CSharp: SignalBus.TryFire(Object)
        VB: SignalBus.TryFire(Object)
      qualifiedName:
        CSharp: Zenject.SignalBus.TryFire(System.Object)
        VB: Zenject.SignalBus.TryFire(System.Object)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: TryFire
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 177
      syntax:
        content:
          CSharp: public void TryFire(object signal)
          VB: Public Sub TryFire(signal As Object)
        parameters:
        - id: signal
          type: System.Object
      overload: Zenject.SignalBus.TryFire*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.SubscribeId``1(System.Object,System.Action)
      commentId: M:Zenject.SignalBus.SubscribeId``1(System.Object,System.Action)
      language: CSharp
      name:
        CSharp: SubscribeId<TSignal>(Object, Action)
        VB: SubscribeId(Of TSignal)(Object, Action)
      nameWithType:
        CSharp: SignalBus.SubscribeId<TSignal>(Object, Action)
        VB: SignalBus.SubscribeId(Of TSignal)(Object, Action)
      qualifiedName:
        CSharp: Zenject.SignalBus.SubscribeId<TSignal>(System.Object, System.Action)
        VB: Zenject.SignalBus.SubscribeId(Of TSignal)(System.Object, System.Action)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: SubscribeId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 229
      syntax:
        content:
          CSharp: public void SubscribeId<TSignal>(object identifier, Action callback)
          VB: Public Sub SubscribeId(Of TSignal)(identifier As Object, callback As Action)
        parameters:
        - id: identifier
          type: System.Object
        - id: callback
          type: System.Action
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.SubscribeId*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.Subscribe``1(System.Action)
      commentId: M:Zenject.SignalBus.Subscribe``1(System.Action)
      language: CSharp
      name:
        CSharp: Subscribe<TSignal>(Action)
        VB: Subscribe(Of TSignal)(Action)
      nameWithType:
        CSharp: SignalBus.Subscribe<TSignal>(Action)
        VB: SignalBus.Subscribe(Of TSignal)(Action)
      qualifiedName:
        CSharp: Zenject.SignalBus.Subscribe<TSignal>(System.Action)
        VB: Zenject.SignalBus.Subscribe(Of TSignal)(System.Action)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: Subscribe
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 235
      syntax:
        content:
          CSharp: public void Subscribe<TSignal>(Action callback)
          VB: Public Sub Subscribe(Of TSignal)(callback As Action)
        parameters:
        - id: callback
          type: System.Action
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.SubscribeId``1(System.Object,System.Action{``0})
      commentId: M:Zenject.SignalBus.SubscribeId``1(System.Object,System.Action{``0})
      language: CSharp
      name:
        CSharp: SubscribeId<TSignal>(Object, Action<TSignal>)
        VB: SubscribeId(Of TSignal)(Object, Action(Of TSignal))
      nameWithType:
        CSharp: SignalBus.SubscribeId<TSignal>(Object, Action<TSignal>)
        VB: SignalBus.SubscribeId(Of TSignal)(Object, Action(Of TSignal))
      qualifiedName:
        CSharp: Zenject.SignalBus.SubscribeId<TSignal>(System.Object, System.Action<TSignal>)
        VB: Zenject.SignalBus.SubscribeId(Of TSignal)(System.Object, System.Action(Of TSignal))
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: SubscribeId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 240
      syntax:
        content:
          CSharp: public void SubscribeId<TSignal>(object identifier, Action<TSignal> callback)
          VB: Public Sub SubscribeId(Of TSignal)(identifier As Object, callback As Action(Of TSignal))
        parameters:
        - id: identifier
          type: System.Object
        - id: callback
          type: System.Action{{TSignal}}
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.SubscribeId*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.Subscribe``1(System.Action{``0})
      commentId: M:Zenject.SignalBus.Subscribe``1(System.Action{``0})
      language: CSharp
      name:
        CSharp: Subscribe<TSignal>(Action<TSignal>)
        VB: Subscribe(Of TSignal)(Action(Of TSignal))
      nameWithType:
        CSharp: SignalBus.Subscribe<TSignal>(Action<TSignal>)
        VB: SignalBus.Subscribe(Of TSignal)(Action(Of TSignal))
      qualifiedName:
        CSharp: Zenject.SignalBus.Subscribe<TSignal>(System.Action<TSignal>)
        VB: Zenject.SignalBus.Subscribe(Of TSignal)(System.Action(Of TSignal))
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: Subscribe
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 246
      syntax:
        content:
          CSharp: public void Subscribe<TSignal>(Action<TSignal> callback)
          VB: Public Sub Subscribe(Of TSignal)(callback As Action(Of TSignal))
        parameters:
        - id: callback
          type: System.Action{{TSignal}}
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.SubscribeId(System.Type,System.Object,System.Action{System.Object})
      commentId: M:Zenject.SignalBus.SubscribeId(System.Type,System.Object,System.Action{System.Object})
      language: CSharp
      name:
        CSharp: SubscribeId(Type, Object, Action<Object>)
        VB: SubscribeId(Type, Object, Action(Of Object))
      nameWithType:
        CSharp: SignalBus.SubscribeId(Type, Object, Action<Object>)
        VB: SignalBus.SubscribeId(Type, Object, Action(Of Object))
      qualifiedName:
        CSharp: Zenject.SignalBus.SubscribeId(System.Type, System.Object, System.Action<System.Object>)
        VB: Zenject.SignalBus.SubscribeId(System.Type, System.Object, System.Action(Of System.Object))
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: SubscribeId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 251
      syntax:
        content:
          CSharp: public void SubscribeId(Type signalType, object identifier, Action<object> callback)
          VB: Public Sub SubscribeId(signalType As Type, identifier As Object, callback As Action(Of Object))
        parameters:
        - id: signalType
          type: System.Type
        - id: identifier
          type: System.Object
        - id: callback
          type: System.Action{System.Object}
      overload: Zenject.SignalBus.SubscribeId*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.Subscribe(System.Type,System.Action{System.Object})
      commentId: M:Zenject.SignalBus.Subscribe(System.Type,System.Action{System.Object})
      language: CSharp
      name:
        CSharp: Subscribe(Type, Action<Object>)
        VB: Subscribe(Type, Action(Of Object))
      nameWithType:
        CSharp: SignalBus.Subscribe(Type, Action<Object>)
        VB: SignalBus.Subscribe(Type, Action(Of Object))
      qualifiedName:
        CSharp: Zenject.SignalBus.Subscribe(System.Type, System.Action<System.Object>)
        VB: Zenject.SignalBus.Subscribe(System.Type, System.Action(Of System.Object))
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: Subscribe
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 256
      syntax:
        content:
          CSharp: public void Subscribe(Type signalType, Action<object> callback)
          VB: Public Sub Subscribe(signalType As Type, callback As Action(Of Object))
        parameters:
        - id: signalType
          type: System.Type
        - id: callback
          type: System.Action{System.Object}
      overload: Zenject.SignalBus.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.UnsubscribeId``1(System.Object,System.Action)
      commentId: M:Zenject.SignalBus.UnsubscribeId``1(System.Object,System.Action)
      language: CSharp
      name:
        CSharp: UnsubscribeId<TSignal>(Object, Action)
        VB: UnsubscribeId(Of TSignal)(Object, Action)
      nameWithType:
        CSharp: SignalBus.UnsubscribeId<TSignal>(Object, Action)
        VB: SignalBus.UnsubscribeId(Of TSignal)(Object, Action)
      qualifiedName:
        CSharp: Zenject.SignalBus.UnsubscribeId<TSignal>(System.Object, System.Action)
        VB: Zenject.SignalBus.UnsubscribeId(Of TSignal)(System.Object, System.Action)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: UnsubscribeId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 261
      syntax:
        content:
          CSharp: public void UnsubscribeId<TSignal>(object identifier, Action callback)
          VB: Public Sub UnsubscribeId(Of TSignal)(identifier As Object, callback As Action)
        parameters:
        - id: identifier
          type: System.Object
        - id: callback
          type: System.Action
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.UnsubscribeId*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.Unsubscribe``1(System.Action)
      commentId: M:Zenject.SignalBus.Unsubscribe``1(System.Action)
      language: CSharp
      name:
        CSharp: Unsubscribe<TSignal>(Action)
        VB: Unsubscribe(Of TSignal)(Action)
      nameWithType:
        CSharp: SignalBus.Unsubscribe<TSignal>(Action)
        VB: SignalBus.Unsubscribe(Of TSignal)(Action)
      qualifiedName:
        CSharp: Zenject.SignalBus.Unsubscribe<TSignal>(System.Action)
        VB: Zenject.SignalBus.Unsubscribe(Of TSignal)(System.Action)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: Unsubscribe
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 266
      syntax:
        content:
          CSharp: public void Unsubscribe<TSignal>(Action callback)
          VB: Public Sub Unsubscribe(Of TSignal)(callback As Action)
        parameters:
        - id: callback
          type: System.Action
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.Unsubscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.UnsubscribeId(System.Type,System.Object,System.Action)
      commentId: M:Zenject.SignalBus.UnsubscribeId(System.Type,System.Object,System.Action)
      language: CSharp
      name:
        CSharp: UnsubscribeId(Type, Object, Action)
        VB: UnsubscribeId(Type, Object, Action)
      nameWithType:
        CSharp: SignalBus.UnsubscribeId(Type, Object, Action)
        VB: SignalBus.UnsubscribeId(Type, Object, Action)
      qualifiedName:
        CSharp: Zenject.SignalBus.UnsubscribeId(System.Type, System.Object, System.Action)
        VB: Zenject.SignalBus.UnsubscribeId(System.Type, System.Object, System.Action)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: UnsubscribeId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 271
      syntax:
        content:
          CSharp: public void UnsubscribeId(Type signalType, object identifier, Action callback)
          VB: Public Sub UnsubscribeId(signalType As Type, identifier As Object, callback As Action)
        parameters:
        - id: signalType
          type: System.Type
        - id: identifier
          type: System.Object
        - id: callback
          type: System.Action
      overload: Zenject.SignalBus.UnsubscribeId*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.Unsubscribe(System.Type,System.Action)
      commentId: M:Zenject.SignalBus.Unsubscribe(System.Type,System.Action)
      language: CSharp
      name:
        CSharp: Unsubscribe(Type, Action)
        VB: Unsubscribe(Type, Action)
      nameWithType:
        CSharp: SignalBus.Unsubscribe(Type, Action)
        VB: SignalBus.Unsubscribe(Type, Action)
      qualifiedName:
        CSharp: Zenject.SignalBus.Unsubscribe(System.Type, System.Action)
        VB: Zenject.SignalBus.Unsubscribe(System.Type, System.Action)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: Unsubscribe
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 276
      syntax:
        content:
          CSharp: public void Unsubscribe(Type signalType, Action callback)
          VB: Public Sub Unsubscribe(signalType As Type, callback As Action)
        parameters:
        - id: signalType
          type: System.Type
        - id: callback
          type: System.Action
      overload: Zenject.SignalBus.Unsubscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.UnsubscribeId(System.Type,System.Object,System.Action{System.Object})
      commentId: M:Zenject.SignalBus.UnsubscribeId(System.Type,System.Object,System.Action{System.Object})
      language: CSharp
      name:
        CSharp: UnsubscribeId(Type, Object, Action<Object>)
        VB: UnsubscribeId(Type, Object, Action(Of Object))
      nameWithType:
        CSharp: SignalBus.UnsubscribeId(Type, Object, Action<Object>)
        VB: SignalBus.UnsubscribeId(Type, Object, Action(Of Object))
      qualifiedName:
        CSharp: Zenject.SignalBus.UnsubscribeId(System.Type, System.Object, System.Action<System.Object>)
        VB: Zenject.SignalBus.UnsubscribeId(System.Type, System.Object, System.Action(Of System.Object))
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: UnsubscribeId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 281
      syntax:
        content:
          CSharp: public void UnsubscribeId(Type signalType, object identifier, Action<object> callback)
          VB: Public Sub UnsubscribeId(signalType As Type, identifier As Object, callback As Action(Of Object))
        parameters:
        - id: signalType
          type: System.Type
        - id: identifier
          type: System.Object
        - id: callback
          type: System.Action{System.Object}
      overload: Zenject.SignalBus.UnsubscribeId*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.Unsubscribe(System.Type,System.Action{System.Object})
      commentId: M:Zenject.SignalBus.Unsubscribe(System.Type,System.Action{System.Object})
      language: CSharp
      name:
        CSharp: Unsubscribe(Type, Action<Object>)
        VB: Unsubscribe(Type, Action(Of Object))
      nameWithType:
        CSharp: SignalBus.Unsubscribe(Type, Action<Object>)
        VB: SignalBus.Unsubscribe(Type, Action(Of Object))
      qualifiedName:
        CSharp: Zenject.SignalBus.Unsubscribe(System.Type, System.Action<System.Object>)
        VB: Zenject.SignalBus.Unsubscribe(System.Type, System.Action(Of System.Object))
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: Unsubscribe
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 286
      syntax:
        content:
          CSharp: public void Unsubscribe(Type signalType, Action<object> callback)
          VB: Public Sub Unsubscribe(signalType As Type, callback As Action(Of Object))
        parameters:
        - id: signalType
          type: System.Type
        - id: callback
          type: System.Action{System.Object}
      overload: Zenject.SignalBus.Unsubscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.UnsubscribeId``1(System.Object,System.Action{``0})
      commentId: M:Zenject.SignalBus.UnsubscribeId``1(System.Object,System.Action{``0})
      language: CSharp
      name:
        CSharp: UnsubscribeId<TSignal>(Object, Action<TSignal>)
        VB: UnsubscribeId(Of TSignal)(Object, Action(Of TSignal))
      nameWithType:
        CSharp: SignalBus.UnsubscribeId<TSignal>(Object, Action<TSignal>)
        VB: SignalBus.UnsubscribeId(Of TSignal)(Object, Action(Of TSignal))
      qualifiedName:
        CSharp: Zenject.SignalBus.UnsubscribeId<TSignal>(System.Object, System.Action<TSignal>)
        VB: Zenject.SignalBus.UnsubscribeId(Of TSignal)(System.Object, System.Action(Of TSignal))
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: UnsubscribeId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 291
      syntax:
        content:
          CSharp: public void UnsubscribeId<TSignal>(object identifier, Action<TSignal> callback)
          VB: Public Sub UnsubscribeId(Of TSignal)(identifier As Object, callback As Action(Of TSignal))
        parameters:
        - id: identifier
          type: System.Object
        - id: callback
          type: System.Action{{TSignal}}
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.UnsubscribeId*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.Unsubscribe``1(System.Action{``0})
      commentId: M:Zenject.SignalBus.Unsubscribe``1(System.Action{``0})
      language: CSharp
      name:
        CSharp: Unsubscribe<TSignal>(Action<TSignal>)
        VB: Unsubscribe(Of TSignal)(Action(Of TSignal))
      nameWithType:
        CSharp: SignalBus.Unsubscribe<TSignal>(Action<TSignal>)
        VB: SignalBus.Unsubscribe(Of TSignal)(Action(Of TSignal))
      qualifiedName:
        CSharp: Zenject.SignalBus.Unsubscribe<TSignal>(System.Action<TSignal>)
        VB: Zenject.SignalBus.Unsubscribe(Of TSignal)(System.Action(Of TSignal))
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: Unsubscribe
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 296
      syntax:
        content:
          CSharp: public void Unsubscribe<TSignal>(Action<TSignal> callback)
          VB: Public Sub Unsubscribe(Of TSignal)(callback As Action(Of TSignal))
        parameters:
        - id: callback
          type: System.Action{{TSignal}}
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.Unsubscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.TryUnsubscribeId``1(System.Object,System.Action)
      commentId: M:Zenject.SignalBus.TryUnsubscribeId``1(System.Object,System.Action)
      language: CSharp
      name:
        CSharp: TryUnsubscribeId<TSignal>(Object, Action)
        VB: TryUnsubscribeId(Of TSignal)(Object, Action)
      nameWithType:
        CSharp: SignalBus.TryUnsubscribeId<TSignal>(Object, Action)
        VB: SignalBus.TryUnsubscribeId(Of TSignal)(Object, Action)
      qualifiedName:
        CSharp: Zenject.SignalBus.TryUnsubscribeId<TSignal>(System.Object, System.Action)
        VB: Zenject.SignalBus.TryUnsubscribeId(Of TSignal)(System.Object, System.Action)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: TryUnsubscribeId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 301
      syntax:
        content:
          CSharp: public void TryUnsubscribeId<TSignal>(object identifier, Action callback)
          VB: Public Sub TryUnsubscribeId(Of TSignal)(identifier As Object, callback As Action)
        parameters:
        - id: identifier
          type: System.Object
        - id: callback
          type: System.Action
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.TryUnsubscribeId*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.TryUnsubscribe``1(System.Action)
      commentId: M:Zenject.SignalBus.TryUnsubscribe``1(System.Action)
      language: CSharp
      name:
        CSharp: TryUnsubscribe<TSignal>(Action)
        VB: TryUnsubscribe(Of TSignal)(Action)
      nameWithType:
        CSharp: SignalBus.TryUnsubscribe<TSignal>(Action)
        VB: SignalBus.TryUnsubscribe(Of TSignal)(Action)
      qualifiedName:
        CSharp: Zenject.SignalBus.TryUnsubscribe<TSignal>(System.Action)
        VB: Zenject.SignalBus.TryUnsubscribe(Of TSignal)(System.Action)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: TryUnsubscribe
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 306
      syntax:
        content:
          CSharp: public void TryUnsubscribe<TSignal>(Action callback)
          VB: Public Sub TryUnsubscribe(Of TSignal)(callback As Action)
        parameters:
        - id: callback
          type: System.Action
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.TryUnsubscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.TryUnsubscribeId(System.Type,System.Object,System.Action)
      commentId: M:Zenject.SignalBus.TryUnsubscribeId(System.Type,System.Object,System.Action)
      language: CSharp
      name:
        CSharp: TryUnsubscribeId(Type, Object, Action)
        VB: TryUnsubscribeId(Type, Object, Action)
      nameWithType:
        CSharp: SignalBus.TryUnsubscribeId(Type, Object, Action)
        VB: SignalBus.TryUnsubscribeId(Type, Object, Action)
      qualifiedName:
        CSharp: Zenject.SignalBus.TryUnsubscribeId(System.Type, System.Object, System.Action)
        VB: Zenject.SignalBus.TryUnsubscribeId(System.Type, System.Object, System.Action)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: TryUnsubscribeId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 311
      syntax:
        content:
          CSharp: public void TryUnsubscribeId(Type signalType, object identifier, Action callback)
          VB: Public Sub TryUnsubscribeId(signalType As Type, identifier As Object, callback As Action)
        parameters:
        - id: signalType
          type: System.Type
        - id: identifier
          type: System.Object
        - id: callback
          type: System.Action
      overload: Zenject.SignalBus.TryUnsubscribeId*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.TryUnsubscribe(System.Type,System.Action)
      commentId: M:Zenject.SignalBus.TryUnsubscribe(System.Type,System.Action)
      language: CSharp
      name:
        CSharp: TryUnsubscribe(Type, Action)
        VB: TryUnsubscribe(Type, Action)
      nameWithType:
        CSharp: SignalBus.TryUnsubscribe(Type, Action)
        VB: SignalBus.TryUnsubscribe(Type, Action)
      qualifiedName:
        CSharp: Zenject.SignalBus.TryUnsubscribe(System.Type, System.Action)
        VB: Zenject.SignalBus.TryUnsubscribe(System.Type, System.Action)
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: TryUnsubscribe
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 316
      syntax:
        content:
          CSharp: public void TryUnsubscribe(Type signalType, Action callback)
          VB: Public Sub TryUnsubscribe(signalType As Type, callback As Action)
        parameters:
        - id: signalType
          type: System.Type
        - id: callback
          type: System.Action
      overload: Zenject.SignalBus.TryUnsubscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.TryUnsubscribeId(System.Type,System.Object,System.Action{System.Object})
      commentId: M:Zenject.SignalBus.TryUnsubscribeId(System.Type,System.Object,System.Action{System.Object})
      language: CSharp
      name:
        CSharp: TryUnsubscribeId(Type, Object, Action<Object>)
        VB: TryUnsubscribeId(Type, Object, Action(Of Object))
      nameWithType:
        CSharp: SignalBus.TryUnsubscribeId(Type, Object, Action<Object>)
        VB: SignalBus.TryUnsubscribeId(Type, Object, Action(Of Object))
      qualifiedName:
        CSharp: Zenject.SignalBus.TryUnsubscribeId(System.Type, System.Object, System.Action<System.Object>)
        VB: Zenject.SignalBus.TryUnsubscribeId(System.Type, System.Object, System.Action(Of System.Object))
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: TryUnsubscribeId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 321
      syntax:
        content:
          CSharp: public void TryUnsubscribeId(Type signalType, object identifier, Action<object> callback)
          VB: Public Sub TryUnsubscribeId(signalType As Type, identifier As Object, callback As Action(Of Object))
        parameters:
        - id: signalType
          type: System.Type
        - id: identifier
          type: System.Object
        - id: callback
          type: System.Action{System.Object}
      overload: Zenject.SignalBus.TryUnsubscribeId*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.TryUnsubscribe(System.Type,System.Action{System.Object})
      commentId: M:Zenject.SignalBus.TryUnsubscribe(System.Type,System.Action{System.Object})
      language: CSharp
      name:
        CSharp: TryUnsubscribe(Type, Action<Object>)
        VB: TryUnsubscribe(Type, Action(Of Object))
      nameWithType:
        CSharp: SignalBus.TryUnsubscribe(Type, Action<Object>)
        VB: SignalBus.TryUnsubscribe(Type, Action(Of Object))
      qualifiedName:
        CSharp: Zenject.SignalBus.TryUnsubscribe(System.Type, System.Action<System.Object>)
        VB: Zenject.SignalBus.TryUnsubscribe(System.Type, System.Action(Of System.Object))
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: TryUnsubscribe
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 326
      syntax:
        content:
          CSharp: public void TryUnsubscribe(Type signalType, Action<object> callback)
          VB: Public Sub TryUnsubscribe(signalType As Type, callback As Action(Of Object))
        parameters:
        - id: signalType
          type: System.Type
        - id: callback
          type: System.Action{System.Object}
      overload: Zenject.SignalBus.TryUnsubscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.TryUnsubscribeId``1(System.Object,System.Action{``0})
      commentId: M:Zenject.SignalBus.TryUnsubscribeId``1(System.Object,System.Action{``0})
      language: CSharp
      name:
        CSharp: TryUnsubscribeId<TSignal>(Object, Action<TSignal>)
        VB: TryUnsubscribeId(Of TSignal)(Object, Action(Of TSignal))
      nameWithType:
        CSharp: SignalBus.TryUnsubscribeId<TSignal>(Object, Action<TSignal>)
        VB: SignalBus.TryUnsubscribeId(Of TSignal)(Object, Action(Of TSignal))
      qualifiedName:
        CSharp: Zenject.SignalBus.TryUnsubscribeId<TSignal>(System.Object, System.Action<TSignal>)
        VB: Zenject.SignalBus.TryUnsubscribeId(Of TSignal)(System.Object, System.Action(Of TSignal))
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: TryUnsubscribeId
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 331
      syntax:
        content:
          CSharp: public void TryUnsubscribeId<TSignal>(object identifier, Action<TSignal> callback)
          VB: Public Sub TryUnsubscribeId(Of TSignal)(identifier As Object, callback As Action(Of TSignal))
        parameters:
        - id: identifier
          type: System.Object
        - id: callback
          type: System.Action{{TSignal}}
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.TryUnsubscribeId*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.TryUnsubscribe``1(System.Action{``0})
      commentId: M:Zenject.SignalBus.TryUnsubscribe``1(System.Action{``0})
      language: CSharp
      name:
        CSharp: TryUnsubscribe<TSignal>(Action<TSignal>)
        VB: TryUnsubscribe(Of TSignal)(Action(Of TSignal))
      nameWithType:
        CSharp: SignalBus.TryUnsubscribe<TSignal>(Action<TSignal>)
        VB: SignalBus.TryUnsubscribe(Of TSignal)(Action(Of TSignal))
      qualifiedName:
        CSharp: Zenject.SignalBus.TryUnsubscribe<TSignal>(System.Action<TSignal>)
        VB: Zenject.SignalBus.TryUnsubscribe(Of TSignal)(System.Action(Of TSignal))
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: TryUnsubscribe
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 336
      syntax:
        content:
          CSharp: public void TryUnsubscribe<TSignal>(Action<TSignal> callback)
          VB: Public Sub TryUnsubscribe(Of TSignal)(callback As Action(Of TSignal))
        parameters:
        - id: callback
          type: System.Action{{TSignal}}
        typeParameters:
        - id: TSignal
      overload: Zenject.SignalBus.TryUnsubscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.DeclareSignal``1(System.Object,System.Nullable{Zenject.SignalMissingHandlerResponses},System.Nullable{System.Boolean},System.Nullable{System.Int32})
      commentId: M:Zenject.SignalBus.DeclareSignal``1(System.Object,System.Nullable{Zenject.SignalMissingHandlerResponses},System.Nullable{System.Boolean},System.Nullable{System.Int32})
      language: CSharp
      name:
        CSharp: DeclareSignal<T>(Object, Nullable<SignalMissingHandlerResponses>, Nullable<Boolean>, Nullable<Int32>)
        VB: DeclareSignal(Of T)(Object, Nullable(Of SignalMissingHandlerResponses), Nullable(Of Boolean), Nullable(Of Int32))
      nameWithType:
        CSharp: SignalBus.DeclareSignal<T>(Object, Nullable<SignalMissingHandlerResponses>, Nullable<Boolean>, Nullable<Int32>)
        VB: SignalBus.DeclareSignal(Of T)(Object, Nullable(Of SignalMissingHandlerResponses), Nullable(Of Boolean), Nullable(Of Int32))
      qualifiedName:
        CSharp: Zenject.SignalBus.DeclareSignal<T>(System.Object, System.Nullable<Zenject.SignalMissingHandlerResponses>, System.Nullable<System.Boolean>, System.Nullable<System.Int32>)
        VB: Zenject.SignalBus.DeclareSignal(Of T)(System.Object, System.Nullable(Of Zenject.SignalMissingHandlerResponses), System.Nullable(Of System.Boolean), System.Nullable(Of System.Int32))
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: DeclareSignal
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 399
      syntax:
        content:
          CSharp: public void DeclareSignal<T>(object identifier = null, SignalMissingHandlerResponses? missingHandlerResponse = null, bool? forceAsync = null, int? asyncTickPriority = null)
          VB: Public Sub DeclareSignal(Of T)(identifier As Object = Nothing, missingHandlerResponse As SignalMissingHandlerResponses? = Nothing, forceAsync As Boolean? = Nothing, asyncTickPriority As Integer? = Nothing)
        parameters:
        - id: identifier
          type: System.Object
        - id: missingHandlerResponse
          type: System.Nullable{Zenject.SignalMissingHandlerResponses}
        - id: forceAsync
          type: System.Nullable{System.Boolean}
        - id: asyncTickPriority
          type: System.Nullable{System.Int32}
        typeParameters:
        - id: T
      overload: Zenject.SignalBus.DeclareSignal*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalBus.DeclareSignal(System.Type,System.Object,System.Nullable{Zenject.SignalMissingHandlerResponses},System.Nullable{System.Boolean},System.Nullable{System.Int32})
      commentId: M:Zenject.SignalBus.DeclareSignal(System.Type,System.Object,System.Nullable{Zenject.SignalMissingHandlerResponses},System.Nullable{System.Boolean},System.Nullable{System.Int32})
      language: CSharp
      name:
        CSharp: DeclareSignal(Type, Object, Nullable<SignalMissingHandlerResponses>, Nullable<Boolean>, Nullable<Int32>)
        VB: DeclareSignal(Type, Object, Nullable(Of SignalMissingHandlerResponses), Nullable(Of Boolean), Nullable(Of Int32))
      nameWithType:
        CSharp: SignalBus.DeclareSignal(Type, Object, Nullable<SignalMissingHandlerResponses>, Nullable<Boolean>, Nullable<Int32>)
        VB: SignalBus.DeclareSignal(Type, Object, Nullable(Of SignalMissingHandlerResponses), Nullable(Of Boolean), Nullable(Of Int32))
      qualifiedName:
        CSharp: Zenject.SignalBus.DeclareSignal(System.Type, System.Object, System.Nullable<Zenject.SignalMissingHandlerResponses>, System.Nullable<System.Boolean>, System.Nullable<System.Int32>)
        VB: Zenject.SignalBus.DeclareSignal(System.Type, System.Object, System.Nullable(Of Zenject.SignalMissingHandlerResponses), System.Nullable(Of System.Boolean), System.Nullable(Of System.Int32))
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        id: DeclareSignal
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs
        startLine: 405
      syntax:
        content:
          CSharp: public void DeclareSignal(Type signalType, object identifier = null, SignalMissingHandlerResponses? missingHandlerResponse = null, bool? forceAsync = null, int? asyncTickPriority = null)
          VB: Public Sub DeclareSignal(signalType As Type, identifier As Object = Nothing, missingHandlerResponse As SignalMissingHandlerResponses? = Nothing, forceAsync As Boolean? = Nothing, asyncTickPriority As Integer? = Nothing)
        parameters:
        - id: signalType
          type: System.Type
        - id: identifier
          type: System.Object
        - id: missingHandlerResponse
          type: System.Nullable{Zenject.SignalMissingHandlerResponses}
        - id: forceAsync
          type: System.Nullable{System.Boolean}
        - id: asyncTickPriority
          type: System.Nullable{System.Int32}
      overload: Zenject.SignalBus.DeclareSignal*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Zenject.SignalBusInstaller
    commentId: T:Zenject.SignalBusInstaller
    language: CSharp
    name:
      CSharp: SignalBusInstaller
      VB: SignalBusInstaller
    nameWithType:
      CSharp: SignalBusInstaller
      VB: SignalBusInstaller
    qualifiedName:
      CSharp: Zenject.SignalBusInstaller
      VB: Zenject.SignalBusInstaller
    type: Class
    assemblies:
    - Zenject-Signals
    namespace: Zenject
    source:
      remote:
        path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBusInstaller.cs
      id: SignalBusInstaller
      path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBusInstaller.cs
      startLine: 5
    syntax:
      content:
        CSharp: 'public class SignalBusInstaller : Installer<SignalBusInstaller>, IInstaller'
        VB: >-
          Public Class SignalBusInstaller

              Inherits Installer(Of SignalBusInstaller)

              Implements IInstaller
    inheritance:
    - System.Object
    - Zenject.InstallerBase
    - Zenject.Installer{Zenject.SignalBusInstaller}
    implements:
    - Zenject.IInstaller
    inheritedMembers:
    - Zenject.Installer{Zenject.SignalBusInstaller}.Install(Zenject.DiContainer)
    - Zenject.InstallerBase.Container
    - Zenject.InstallerBase.IsEnabled
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    extensionMethods:
    - Zenject.SignalBusInstaller.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalBusInstaller.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalBusInstaller.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalBusInstaller,{TProperty}},UniRx.FrameCountType,System.Boolean)
    - Zenject.SignalBusInstaller.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalBusInstaller,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
    - Zenject.SignalBusInstaller.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalBusInstaller,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Zenject.SignalBusInstaller.InstallBindings
      commentId: M:Zenject.SignalBusInstaller.InstallBindings
      language: CSharp
      name:
        CSharp: InstallBindings()
        VB: InstallBindings()
      nameWithType:
        CSharp: SignalBusInstaller.InstallBindings()
        VB: SignalBusInstaller.InstallBindings()
      qualifiedName:
        CSharp: Zenject.SignalBusInstaller.InstallBindings()
        VB: Zenject.SignalBusInstaller.InstallBindings()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBusInstaller.cs
        id: InstallBindings
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBusInstaller.cs
        startLine: 7
      syntax:
        content:
          CSharp: public override void InstallBindings()
          VB: Public Overrides Sub InstallBindings
      overload: Zenject.SignalBusInstaller.InstallBindings*
      overridden: Zenject.InstallerBase.InstallBindings
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Zenject.SignalDeclarationAsyncInitializer
    commentId: T:Zenject.SignalDeclarationAsyncInitializer
    language: CSharp
    name:
      CSharp: SignalDeclarationAsyncInitializer
      VB: SignalDeclarationAsyncInitializer
    nameWithType:
      CSharp: SignalDeclarationAsyncInitializer
      VB: SignalDeclarationAsyncInitializer
    qualifiedName:
      CSharp: Zenject.SignalDeclarationAsyncInitializer
      VB: Zenject.SignalDeclarationAsyncInitializer
    type: Class
    assemblies:
    - Zenject-Signals
    namespace: Zenject
    source:
      remote:
        path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalDeclarationAsyncInitializer.cs
      id: SignalDeclarationAsyncInitializer
      path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalDeclarationAsyncInitializer.cs
      startLine: 9
    syntax:
      content:
        CSharp: 'public class SignalDeclarationAsyncInitializer : IInitializable'
        VB: >-
          Public Class SignalDeclarationAsyncInitializer

              Inherits IInitializable
    inheritance:
    - System.Object
    extensionMethods:
    - Zenject.SignalDeclarationAsyncInitializer.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalDeclarationAsyncInitializer.ModestTree.LinqExtensions.Yield``1
    - Zenject.SignalDeclarationAsyncInitializer.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclarationAsyncInitializer,{TProperty}},UniRx.FrameCountType,System.Boolean)
    - Zenject.SignalDeclarationAsyncInitializer.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclarationAsyncInitializer,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
    - Zenject.SignalDeclarationAsyncInitializer.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclarationAsyncInitializer,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Zenject.SignalDeclarationAsyncInitializer.#ctor(System.Collections.Generic.List{Zenject.SignalDeclaration},Zenject.LazyInject{Zenject.TickableManager})
      commentId: M:Zenject.SignalDeclarationAsyncInitializer.#ctor(System.Collections.Generic.List{Zenject.SignalDeclaration},Zenject.LazyInject{Zenject.TickableManager})
      language: CSharp
      name:
        CSharp: SignalDeclarationAsyncInitializer(List<SignalDeclaration>, LazyInject<TickableManager>)
        VB: SignalDeclarationAsyncInitializer(List(Of SignalDeclaration), LazyInject(Of TickableManager))
      nameWithType:
        CSharp: SignalDeclarationAsyncInitializer.SignalDeclarationAsyncInitializer(List<SignalDeclaration>, LazyInject<TickableManager>)
        VB: SignalDeclarationAsyncInitializer.SignalDeclarationAsyncInitializer(List(Of SignalDeclaration), LazyInject(Of TickableManager))
      qualifiedName:
        CSharp: Zenject.SignalDeclarationAsyncInitializer.SignalDeclarationAsyncInitializer(System.Collections.Generic.List<Zenject.SignalDeclaration>, Zenject.LazyInject<Zenject.TickableManager>)
        VB: Zenject.SignalDeclarationAsyncInitializer.SignalDeclarationAsyncInitializer(System.Collections.Generic.List(Of Zenject.SignalDeclaration), Zenject.LazyInject(Of Zenject.TickableManager))
      type: Constructor
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalDeclarationAsyncInitializer.cs
        id: .ctor
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalDeclarationAsyncInitializer.cs
        startLine: 14
      syntax:
        content:
          CSharp: public SignalDeclarationAsyncInitializer(List<SignalDeclaration> declarations, LazyInject<TickableManager> tickManager)
          VB: Public Sub New(declarations As List(Of SignalDeclaration), tickManager As LazyInject(Of TickableManager))
        parameters:
        - id: declarations
          type: System.Collections.Generic.List{Zenject.SignalDeclaration}
        - id: tickManager
          type: Zenject.LazyInject{Zenject.TickableManager}
      overload: Zenject.SignalDeclarationAsyncInitializer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Zenject.SignalDeclarationAsyncInitializer.Initialize
      commentId: M:Zenject.SignalDeclarationAsyncInitializer.Initialize
      language: CSharp
      name:
        CSharp: Initialize()
        VB: Initialize()
      nameWithType:
        CSharp: SignalDeclarationAsyncInitializer.Initialize()
        VB: SignalDeclarationAsyncInitializer.Initialize()
      qualifiedName:
        CSharp: Zenject.SignalDeclarationAsyncInitializer.Initialize()
        VB: Zenject.SignalDeclarationAsyncInitializer.Initialize()
      type: Method
      assemblies:
      - Zenject-Signals
      namespace: Zenject
      source:
        remote:
          path: D:/UnityProject/Barista/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalDeclarationAsyncInitializer.cs
        id: Initialize
        path: ../Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalDeclarationAsyncInitializer.cs
        startLine: 24
      syntax:
        content:
          CSharp: public void Initialize()
          VB: Public Sub Initialize
      overload: Zenject.SignalDeclarationAsyncInitializer.Initialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  ModestTree.LinqExtensions.Yield``1(``0):
    name:
      CSharp:
      - id: ModestTree.LinqExtensions.Yield``1(``0)
        name: Yield<T>
        nameWithType: LinqExtensions.Yield<T>
        qualifiedName: ModestTree.LinqExtensions.Yield<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: ModestTree.LinqExtensions.Yield``1(``0)
        name: Yield(Of T)
        nameWithType: LinqExtensions.Yield(Of T)
        qualifiedName: ModestTree.LinqExtensions.Yield(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:ModestTree.LinqExtensions.Yield``1(``0)
  ModestTree:
    name:
      CSharp:
      - name: ModestTree
        nameWithType: ModestTree
        qualifiedName: ModestTree
      VB:
      - name: ModestTree
        nameWithType: ModestTree
        qualifiedName: ModestTree
    isDefinition: true
    commentId: N:ModestTree
  ModestTree.LinqExtensions:
    name:
      CSharp:
      - id: ModestTree.LinqExtensions
        name: LinqExtensions
        nameWithType: LinqExtensions
        qualifiedName: ModestTree.LinqExtensions
      VB:
      - id: ModestTree.LinqExtensions
        name: LinqExtensions
        nameWithType: LinqExtensions
        qualifiedName: ModestTree.LinqExtensions
    isDefinition: true
    parent: ModestTree
    commentId: T:ModestTree.LinqExtensions
  Zenject.BindSignalFromBinder`2.ModestTree.LinqExtensions.Yield``1:
    name:
      CSharp:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield<BindSignalFromBinder<TObject, TSignal>>
        nameWithType: LinqExtensions.Yield<BindSignalFromBinder<TObject, TSignal>>
        qualifiedName: ModestTree.LinqExtensions.Yield<Zenject.BindSignalFromBinder<TObject, TSignal>>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield(Of BindSignalFromBinder(Of TObject, TSignal))
        nameWithType: LinqExtensions.Yield(Of BindSignalFromBinder(Of TObject, TSignal))
        qualifiedName: ModestTree.LinqExtensions.Yield(Of Zenject.BindSignalFromBinder(Of TObject, TSignal))
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: ModestTree.LinqExtensions.Yield``1(``0)
    parent: ModestTree.LinqExtensions
    commentId: M:ModestTree.LinqExtensions.Yield``1(``0)
  UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean):
    name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged<TSource, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<TSource, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<TSource, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TSource
        nameWithType: TSource
        qualifiedName: TSource
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TSource
        nameWithType: TSource
        qualifiedName: TSource
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged(Of TSource, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of TSource, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of TSource, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TSource
        nameWithType: TSource
        qualifiedName: TSource
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TSource
        nameWithType: TSource
        qualifiedName: TSource
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
  UniRx:
    name:
      CSharp:
      - name: UniRx
        nameWithType: UniRx
        qualifiedName: UniRx
      VB:
      - name: UniRx
        nameWithType: UniRx
        qualifiedName: UniRx
    isDefinition: true
    commentId: N:UniRx
  UniRx.ObserveExtensions:
    name:
      CSharp:
      - id: UniRx.ObserveExtensions
        name: ObserveExtensions
        nameWithType: ObserveExtensions
        qualifiedName: UniRx.ObserveExtensions
      VB:
      - id: UniRx.ObserveExtensions
        name: ObserveExtensions
        nameWithType: ObserveExtensions
        qualifiedName: UniRx.ObserveExtensions
    isDefinition: true
    parent: UniRx
    commentId: T:UniRx.ObserveExtensions
  ? Zenject.BindSignalFromBinder`2.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.BindSignalFromBinder{{TObject},{TSignal}},{TProperty}},UniRx.FrameCountType,System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged<BindSignalFromBinder<TObject, TSignal>, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<BindSignalFromBinder<TObject, TSignal>, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.BindSignalFromBinder<TObject, TSignal>, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.BindSignalFromBinder`2
        name: BindSignalFromBinder
        nameWithType: BindSignalFromBinder
        qualifiedName: Zenject.BindSignalFromBinder
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged(Of BindSignalFromBinder(Of TObject, TSignal), TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of BindSignalFromBinder(Of TObject, TSignal), TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.BindSignalFromBinder(Of TObject, TSignal), TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.BindSignalFromBinder`2
        name: BindSignalFromBinder
        nameWithType: BindSignalFromBinder
        qualifiedName: Zenject.BindSignalFromBinder
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
  ? UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged<TSource, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<TSource, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<TSource, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TSource
        nameWithType: TSource
        qualifiedName: TSource
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TSource
        nameWithType: TSource
        qualifiedName: TSource
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged(Of TSource, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of TSource, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of TSource, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TSource
        nameWithType: TSource
        qualifiedName: TSource
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TSource
        nameWithType: TSource
        qualifiedName: TSource
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
  ? Zenject.BindSignalFromBinder`2.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.BindSignalFromBinder{{TObject},{TSignal}},{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged<BindSignalFromBinder<TObject, TSignal>, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<BindSignalFromBinder<TObject, TSignal>, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.BindSignalFromBinder<TObject, TSignal>, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.BindSignalFromBinder`2
        name: BindSignalFromBinder
        nameWithType: BindSignalFromBinder
        qualifiedName: Zenject.BindSignalFromBinder
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged(Of BindSignalFromBinder(Of TObject, TSignal), TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of BindSignalFromBinder(Of TObject, TSignal), TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.BindSignalFromBinder(Of TObject, TSignal), TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.BindSignalFromBinder`2
        name: BindSignalFromBinder
        nameWithType: BindSignalFromBinder
        qualifiedName: Zenject.BindSignalFromBinder
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
  ? UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged<TSource, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<TSource, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<TSource, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TSource
        nameWithType: TSource
        qualifiedName: TSource
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TSource
        nameWithType: TSource
        qualifiedName: TSource
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged(Of TSource, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of TSource, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of TSource, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TSource
        nameWithType: TSource
        qualifiedName: TSource
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TSource
        nameWithType: TSource
        qualifiedName: TSource
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
  ? Zenject.BindSignalFromBinder`2.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.BindSignalFromBinder{{TObject},{TSignal}},{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged<BindSignalFromBinder<TObject, TSignal>, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<BindSignalFromBinder<TObject, TSignal>, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.BindSignalFromBinder<TObject, TSignal>, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.BindSignalFromBinder`2
        name: BindSignalFromBinder
        nameWithType: BindSignalFromBinder
        qualifiedName: Zenject.BindSignalFromBinder
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged(Of BindSignalFromBinder(Of TObject, TSignal), TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of BindSignalFromBinder(Of TObject, TSignal), TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.BindSignalFromBinder(Of TObject, TSignal), TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.BindSignalFromBinder`2
        name: BindSignalFromBinder
        nameWithType: BindSignalFromBinder
        qualifiedName: Zenject.BindSignalFromBinder
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
  Zenject:
    name:
      CSharp:
      - name: Zenject
        nameWithType: Zenject
        qualifiedName: Zenject
      VB:
      - name: Zenject
        nameWithType: Zenject
        qualifiedName: Zenject
    isDefinition: true
    commentId: N:Zenject
  Zenject.SignalBindingBindInfo:
    name:
      CSharp:
      - id: Zenject.SignalBindingBindInfo
        name: SignalBindingBindInfo
        nameWithType: SignalBindingBindInfo
        qualifiedName: Zenject.SignalBindingBindInfo
      VB:
      - id: Zenject.SignalBindingBindInfo
        name: SignalBindingBindInfo
        nameWithType: SignalBindingBindInfo
        qualifiedName: Zenject.SignalBindingBindInfo
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.SignalBindingBindInfo
  Zenject.BindStatement:
    name:
      CSharp:
      - id: Zenject.BindStatement
        name: BindStatement
        nameWithType: BindStatement
        qualifiedName: Zenject.BindStatement
      VB:
      - id: Zenject.BindStatement
        name: BindStatement
        nameWithType: BindStatement
        qualifiedName: Zenject.BindStatement
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.BindStatement
  System.Func`2:
    name:
      CSharp:
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Func`2
  System.Func{{TObject},System.Action{{TSignal}}}:
    name:
      CSharp:
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Func`2
    parent: System
    commentId: T:System.Func{`0,System.Action{`1}}
  Zenject.DiContainer:
    name:
      CSharp:
      - id: Zenject.DiContainer
        name: DiContainer
        nameWithType: DiContainer
        qualifiedName: Zenject.DiContainer
      VB:
      - id: Zenject.DiContainer
        name: DiContainer
        nameWithType: DiContainer
        qualifiedName: Zenject.DiContainer
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.DiContainer
  Zenject.BindSignalFromBinder`2.#ctor*:
    name:
      CSharp:
      - id: Zenject.BindSignalFromBinder`2.#ctor*
        name: BindSignalFromBinder
        nameWithType: BindSignalFromBinder<TObject, TSignal>.BindSignalFromBinder
        qualifiedName: Zenject.BindSignalFromBinder<TObject, TSignal>.BindSignalFromBinder
      VB:
      - id: Zenject.BindSignalFromBinder`2.#ctor*
        name: BindSignalFromBinder
        nameWithType: BindSignalFromBinder(Of TObject, TSignal).BindSignalFromBinder
        qualifiedName: Zenject.BindSignalFromBinder(Of TObject, TSignal).BindSignalFromBinder
    isDefinition: true
    commentId: Overload:Zenject.BindSignalFromBinder`2.#ctor
  Zenject.SignalCopyBinder:
    name:
      CSharp:
      - id: Zenject.SignalCopyBinder
        name: SignalCopyBinder
        nameWithType: SignalCopyBinder
        qualifiedName: Zenject.SignalCopyBinder
      VB:
      - id: Zenject.SignalCopyBinder
        name: SignalCopyBinder
        nameWithType: SignalCopyBinder
        qualifiedName: Zenject.SignalCopyBinder
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.SignalCopyBinder
  Zenject.BindSignalFromBinder`2.FromResolve*:
    name:
      CSharp:
      - id: Zenject.BindSignalFromBinder`2.FromResolve*
        name: FromResolve
        nameWithType: BindSignalFromBinder<TObject, TSignal>.FromResolve
        qualifiedName: Zenject.BindSignalFromBinder<TObject, TSignal>.FromResolve
      VB:
      - id: Zenject.BindSignalFromBinder`2.FromResolve*
        name: FromResolve
        nameWithType: BindSignalFromBinder(Of TObject, TSignal).FromResolve
        qualifiedName: Zenject.BindSignalFromBinder(Of TObject, TSignal).FromResolve
    isDefinition: true
    commentId: Overload:Zenject.BindSignalFromBinder`2.FromResolve
  Zenject.BindSignalFromBinder`2.FromResolveAll*:
    name:
      CSharp:
      - id: Zenject.BindSignalFromBinder`2.FromResolveAll*
        name: FromResolveAll
        nameWithType: BindSignalFromBinder<TObject, TSignal>.FromResolveAll
        qualifiedName: Zenject.BindSignalFromBinder<TObject, TSignal>.FromResolveAll
      VB:
      - id: Zenject.BindSignalFromBinder`2.FromResolveAll*
        name: FromResolveAll
        nameWithType: BindSignalFromBinder(Of TObject, TSignal).FromResolveAll
        qualifiedName: Zenject.BindSignalFromBinder(Of TObject, TSignal).FromResolveAll
    isDefinition: true
    commentId: Overload:Zenject.BindSignalFromBinder`2.FromResolveAll
  Zenject.BindSignalFromBinder`2.FromNew*:
    name:
      CSharp:
      - id: Zenject.BindSignalFromBinder`2.FromNew*
        name: FromNew
        nameWithType: BindSignalFromBinder<TObject, TSignal>.FromNew
        qualifiedName: Zenject.BindSignalFromBinder<TObject, TSignal>.FromNew
      VB:
      - id: Zenject.BindSignalFromBinder`2.FromNew*
        name: FromNew
        nameWithType: BindSignalFromBinder(Of TObject, TSignal).FromNew
        qualifiedName: Zenject.BindSignalFromBinder(Of TObject, TSignal).FromNew
    isDefinition: true
    commentId: Overload:Zenject.BindSignalFromBinder`2.FromNew
  System.Action`1:
    name:
      CSharp:
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Action`1
  System.Action{Zenject.ConcreteBinderGeneric{{TObject}}}:
    name:
      CSharp:
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.ConcreteBinderGeneric`1
        name: ConcreteBinderGeneric
        nameWithType: ConcreteBinderGeneric
        qualifiedName: Zenject.ConcreteBinderGeneric
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.ConcreteBinderGeneric`1
        name: ConcreteBinderGeneric
        nameWithType: ConcreteBinderGeneric
        qualifiedName: Zenject.ConcreteBinderGeneric
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Action`1
    parent: System
    commentId: T:System.Action{Zenject.ConcreteBinderGeneric{`0}}
  Zenject.BindSignalFromBinder`2.From*:
    name:
      CSharp:
      - id: Zenject.BindSignalFromBinder`2.From*
        name: From
        nameWithType: BindSignalFromBinder<TObject, TSignal>.From
        qualifiedName: Zenject.BindSignalFromBinder<TObject, TSignal>.From
      VB:
      - id: Zenject.BindSignalFromBinder`2.From*
        name: From
        nameWithType: BindSignalFromBinder(Of TObject, TSignal).From
        qualifiedName: Zenject.BindSignalFromBinder(Of TObject, TSignal).From
    isDefinition: true
    commentId: Overload:Zenject.BindSignalFromBinder`2.From
  Zenject.BindSignalFromBinder`2:
    name:
      CSharp:
      - id: Zenject.BindSignalFromBinder`2
        name: BindSignalFromBinder
        nameWithType: BindSignalFromBinder
        qualifiedName: Zenject.BindSignalFromBinder
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.BindSignalFromBinder`2
        name: BindSignalFromBinder
        nameWithType: BindSignalFromBinder
        qualifiedName: Zenject.BindSignalFromBinder
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Zenject.BindSignalFromBinder`2
  Zenject.BindSignalToBinder`1:
    name:
      CSharp:
      - id: Zenject.BindSignalToBinder`1
        name: BindSignalToBinder
        nameWithType: BindSignalToBinder
        qualifiedName: Zenject.BindSignalToBinder
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.BindSignalToBinder`1
        name: BindSignalToBinder
        nameWithType: BindSignalToBinder
        qualifiedName: Zenject.BindSignalToBinder
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Zenject.BindSignalToBinder`1
  Zenject.BindSignalToBinder{{TSignal}}:
    name:
      CSharp:
      - id: Zenject.BindSignalToBinder`1
        name: BindSignalToBinder
        nameWithType: BindSignalToBinder
        qualifiedName: Zenject.BindSignalToBinder
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.BindSignalToBinder`1
        name: BindSignalToBinder
        nameWithType: BindSignalToBinder
        qualifiedName: Zenject.BindSignalToBinder
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.BindSignalToBinder`1
    parent: Zenject
    commentId: T:Zenject.BindSignalToBinder{`0}
  Zenject.BindSignalToBinder`1.SignalBindInfo:
    name:
      CSharp:
      - id: Zenject.BindSignalToBinder`1.SignalBindInfo
        name: SignalBindInfo
        nameWithType: BindSignalToBinder<TSignal>.SignalBindInfo
        qualifiedName: Zenject.BindSignalToBinder<TSignal>.SignalBindInfo
      VB:
      - id: Zenject.BindSignalToBinder`1.SignalBindInfo
        name: SignalBindInfo
        nameWithType: BindSignalToBinder(Of TSignal).SignalBindInfo
        qualifiedName: Zenject.BindSignalToBinder(Of TSignal).SignalBindInfo
    isDefinition: true
    commentId: P:Zenject.BindSignalToBinder`1.SignalBindInfo
  Zenject.BindSignalToBinder{{TSignal}}.SignalBindInfo:
    name:
      CSharp:
      - id: Zenject.BindSignalToBinder`1.SignalBindInfo
        name: SignalBindInfo
        nameWithType: BindSignalToBinder<TSignal>.SignalBindInfo
        qualifiedName: Zenject.BindSignalToBinder<TSignal>.SignalBindInfo
      VB:
      - id: Zenject.BindSignalToBinder`1.SignalBindInfo
        name: SignalBindInfo
        nameWithType: BindSignalToBinder(Of TSignal).SignalBindInfo
        qualifiedName: Zenject.BindSignalToBinder(Of TSignal).SignalBindInfo
    isDefinition: false
    definition: Zenject.BindSignalToBinder`1.SignalBindInfo
    parent: Zenject.BindSignalToBinder{{TSignal}}
    commentId: P:Zenject.BindSignalToBinder{`0}.SignalBindInfo
  Zenject.BindSignalToBinder`1.ToMethod(System.Action{`0}):
    name:
      CSharp:
      - id: Zenject.BindSignalToBinder`1.ToMethod(System.Action{`0})
        name: ToMethod
        nameWithType: BindSignalToBinder<TSignal>.ToMethod
        qualifiedName: Zenject.BindSignalToBinder<TSignal>.ToMethod
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.BindSignalToBinder`1.ToMethod(System.Action{`0})
        name: ToMethod
        nameWithType: BindSignalToBinder(Of TSignal).ToMethod
        qualifiedName: Zenject.BindSignalToBinder(Of TSignal).ToMethod
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.BindSignalToBinder`1.ToMethod(System.Action{`0})
  Zenject.BindSignalToBinder{{TSignal}}.ToMethod(System.Action{{TSignal}}):
    name:
      CSharp:
      - id: Zenject.BindSignalToBinder`1.ToMethod(System.Action{`0})
        name: ToMethod
        nameWithType: BindSignalToBinder<TSignal>.ToMethod
        qualifiedName: Zenject.BindSignalToBinder<TSignal>.ToMethod
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.BindSignalToBinder`1.ToMethod(System.Action{`0})
        name: ToMethod
        nameWithType: BindSignalToBinder(Of TSignal).ToMethod
        qualifiedName: Zenject.BindSignalToBinder(Of TSignal).ToMethod
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.BindSignalToBinder`1.ToMethod(System.Action{`0})
    parent: Zenject.BindSignalToBinder{{TSignal}}
    commentId: M:Zenject.BindSignalToBinder{`0}.ToMethod(System.Action{`0})
  Zenject.BindSignalToBinder`1.ToMethod(System.Action):
    name:
      CSharp:
      - id: Zenject.BindSignalToBinder`1.ToMethod(System.Action)
        name: ToMethod
        nameWithType: BindSignalToBinder<TSignal>.ToMethod
        qualifiedName: Zenject.BindSignalToBinder<TSignal>.ToMethod
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.BindSignalToBinder`1.ToMethod(System.Action)
        name: ToMethod
        nameWithType: BindSignalToBinder(Of TSignal).ToMethod
        qualifiedName: Zenject.BindSignalToBinder(Of TSignal).ToMethod
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.BindSignalToBinder`1.ToMethod(System.Action)
  Zenject.BindSignalToBinder{{TSignal}}.ToMethod(System.Action):
    name:
      CSharp:
      - id: Zenject.BindSignalToBinder`1.ToMethod(System.Action)
        name: ToMethod
        nameWithType: BindSignalToBinder<TSignal>.ToMethod
        qualifiedName: Zenject.BindSignalToBinder<TSignal>.ToMethod
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.BindSignalToBinder`1.ToMethod(System.Action)
        name: ToMethod
        nameWithType: BindSignalToBinder(Of TSignal).ToMethod
        qualifiedName: Zenject.BindSignalToBinder(Of TSignal).ToMethod
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.BindSignalToBinder`1.ToMethod(System.Action)
    parent: Zenject.BindSignalToBinder{{TSignal}}
    commentId: M:Zenject.BindSignalToBinder{`0}.ToMethod(System.Action)
  Zenject.BindSignalToBinder`1.ToMethod``1(System.Action{``0,`0}):
    name:
      CSharp:
      - id: Zenject.BindSignalToBinder`1.ToMethod``1(System.Action{``0,`0})
        name: ToMethod<TObject>
        nameWithType: BindSignalToBinder<TSignal>.ToMethod<TObject>
        qualifiedName: Zenject.BindSignalToBinder<TSignal>.ToMethod<TObject>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.BindSignalToBinder`1.ToMethod``1(System.Action{``0,`0})
        name: ToMethod(Of TObject)
        nameWithType: BindSignalToBinder(Of TSignal).ToMethod(Of TObject)
        qualifiedName: Zenject.BindSignalToBinder(Of TSignal).ToMethod(Of TObject)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.BindSignalToBinder`1.ToMethod``1(System.Action{``0,`0})
  Zenject.BindSignalToBinder{{TSignal}}.ToMethod``1(System.Action{{TObject},{TSignal}}):
    name:
      CSharp:
      - id: Zenject.BindSignalToBinder`1.ToMethod``1(System.Action{``0,`0})
        name: ToMethod<TObject>
        nameWithType: BindSignalToBinder<TSignal>.ToMethod<TObject>
        qualifiedName: Zenject.BindSignalToBinder<TSignal>.ToMethod<TObject>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.BindSignalToBinder`1.ToMethod``1(System.Action{``0,`0})
        name: ToMethod(Of TObject)
        nameWithType: BindSignalToBinder(Of TSignal).ToMethod(Of TObject)
        qualifiedName: Zenject.BindSignalToBinder(Of TSignal).ToMethod(Of TObject)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.BindSignalToBinder`1.ToMethod``1(System.Action{``0,`0})
    parent: Zenject.BindSignalToBinder{{TSignal}}
    commentId: M:Zenject.BindSignalToBinder{`0}.ToMethod``1(System.Action{``0,`0})
  Zenject.BindSignalToBinder`1.ToMethod``1(System.Func{``0,System.Action}):
    name:
      CSharp:
      - id: Zenject.BindSignalToBinder`1.ToMethod``1(System.Func{``0,System.Action})
        name: ToMethod<TObject>
        nameWithType: BindSignalToBinder<TSignal>.ToMethod<TObject>
        qualifiedName: Zenject.BindSignalToBinder<TSignal>.ToMethod<TObject>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.BindSignalToBinder`1.ToMethod``1(System.Func{``0,System.Action})
        name: ToMethod(Of TObject)
        nameWithType: BindSignalToBinder(Of TSignal).ToMethod(Of TObject)
        qualifiedName: Zenject.BindSignalToBinder(Of TSignal).ToMethod(Of TObject)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.BindSignalToBinder`1.ToMethod``1(System.Func{``0,System.Action})
  Zenject.BindSignalToBinder{{TSignal}}.ToMethod``1(System.Func{{TObject},System.Action}):
    name:
      CSharp:
      - id: Zenject.BindSignalToBinder`1.ToMethod``1(System.Func{``0,System.Action})
        name: ToMethod<TObject>
        nameWithType: BindSignalToBinder<TSignal>.ToMethod<TObject>
        qualifiedName: Zenject.BindSignalToBinder<TSignal>.ToMethod<TObject>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.BindSignalToBinder`1.ToMethod``1(System.Func{``0,System.Action})
        name: ToMethod(Of TObject)
        nameWithType: BindSignalToBinder(Of TSignal).ToMethod(Of TObject)
        qualifiedName: Zenject.BindSignalToBinder(Of TSignal).ToMethod(Of TObject)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.BindSignalToBinder`1.ToMethod``1(System.Func{``0,System.Action})
    parent: Zenject.BindSignalToBinder{{TSignal}}
    commentId: M:Zenject.BindSignalToBinder{`0}.ToMethod``1(System.Func{``0,System.Action})
  Zenject.BindSignalToBinder`1.ToMethod``1(System.Func{``0,System.Action{`0}}):
    name:
      CSharp:
      - id: Zenject.BindSignalToBinder`1.ToMethod``1(System.Func{``0,System.Action{`0}})
        name: ToMethod<TObject>
        nameWithType: BindSignalToBinder<TSignal>.ToMethod<TObject>
        qualifiedName: Zenject.BindSignalToBinder<TSignal>.ToMethod<TObject>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.BindSignalToBinder`1.ToMethod``1(System.Func{``0,System.Action{`0}})
        name: ToMethod(Of TObject)
        nameWithType: BindSignalToBinder(Of TSignal).ToMethod(Of TObject)
        qualifiedName: Zenject.BindSignalToBinder(Of TSignal).ToMethod(Of TObject)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.BindSignalToBinder`1.ToMethod``1(System.Func{``0,System.Action{`0}})
  Zenject.BindSignalToBinder{{TSignal}}.ToMethod``1(System.Func{{TObject},System.Action{{TSignal}}}):
    name:
      CSharp:
      - id: Zenject.BindSignalToBinder`1.ToMethod``1(System.Func{``0,System.Action{`0}})
        name: ToMethod<TObject>
        nameWithType: BindSignalToBinder<TSignal>.ToMethod<TObject>
        qualifiedName: Zenject.BindSignalToBinder<TSignal>.ToMethod<TObject>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.BindSignalToBinder`1.ToMethod``1(System.Func{``0,System.Action{`0}})
        name: ToMethod(Of TObject)
        nameWithType: BindSignalToBinder(Of TSignal).ToMethod(Of TObject)
        qualifiedName: Zenject.BindSignalToBinder(Of TSignal).ToMethod(Of TObject)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.BindSignalToBinder`1.ToMethod``1(System.Func{``0,System.Action{`0}})
    parent: Zenject.BindSignalToBinder{{TSignal}}
    commentId: M:Zenject.BindSignalToBinder{`0}.ToMethod``1(System.Func{``0,System.Action{`0}})
  Zenject.BindSignalIdToBinder`1.ModestTree.LinqExtensions.Yield``1:
    name:
      CSharp:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield<BindSignalIdToBinder<TSignal>>
        nameWithType: LinqExtensions.Yield<BindSignalIdToBinder<TSignal>>
        qualifiedName: ModestTree.LinqExtensions.Yield<Zenject.BindSignalIdToBinder<TSignal>>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield(Of BindSignalIdToBinder(Of TSignal))
        nameWithType: LinqExtensions.Yield(Of BindSignalIdToBinder(Of TSignal))
        qualifiedName: ModestTree.LinqExtensions.Yield(Of Zenject.BindSignalIdToBinder(Of TSignal))
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: ModestTree.LinqExtensions.Yield``1(``0)
    parent: ModestTree.LinqExtensions
    commentId: M:ModestTree.LinqExtensions.Yield``1(``0)
  ? Zenject.BindSignalIdToBinder`1.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.BindSignalIdToBinder{{TSignal}},{TProperty}},UniRx.FrameCountType,System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged<BindSignalIdToBinder<TSignal>, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<BindSignalIdToBinder<TSignal>, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.BindSignalIdToBinder<TSignal>, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.BindSignalIdToBinder`1
        name: BindSignalIdToBinder
        nameWithType: BindSignalIdToBinder
        qualifiedName: Zenject.BindSignalIdToBinder
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged(Of BindSignalIdToBinder(Of TSignal), TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of BindSignalIdToBinder(Of TSignal), TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.BindSignalIdToBinder(Of TSignal), TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.BindSignalIdToBinder`1
        name: BindSignalIdToBinder
        nameWithType: BindSignalIdToBinder
        qualifiedName: Zenject.BindSignalIdToBinder
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
  ? Zenject.BindSignalIdToBinder`1.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.BindSignalIdToBinder{{TSignal}},{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged<BindSignalIdToBinder<TSignal>, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<BindSignalIdToBinder<TSignal>, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.BindSignalIdToBinder<TSignal>, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.BindSignalIdToBinder`1
        name: BindSignalIdToBinder
        nameWithType: BindSignalIdToBinder
        qualifiedName: Zenject.BindSignalIdToBinder
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged(Of BindSignalIdToBinder(Of TSignal), TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of BindSignalIdToBinder(Of TSignal), TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.BindSignalIdToBinder(Of TSignal), TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.BindSignalIdToBinder`1
        name: BindSignalIdToBinder
        nameWithType: BindSignalIdToBinder
        qualifiedName: Zenject.BindSignalIdToBinder
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
  ? Zenject.BindSignalIdToBinder`1.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.BindSignalIdToBinder{{TSignal}},{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged<BindSignalIdToBinder<TSignal>, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<BindSignalIdToBinder<TSignal>, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.BindSignalIdToBinder<TSignal>, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.BindSignalIdToBinder`1
        name: BindSignalIdToBinder
        nameWithType: BindSignalIdToBinder
        qualifiedName: Zenject.BindSignalIdToBinder
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged(Of BindSignalIdToBinder(Of TSignal), TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of BindSignalIdToBinder(Of TSignal), TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.BindSignalIdToBinder(Of TSignal), TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.BindSignalIdToBinder`1
        name: BindSignalIdToBinder
        nameWithType: BindSignalIdToBinder
        qualifiedName: Zenject.BindSignalIdToBinder
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
  Zenject.BindSignalIdToBinder`1.#ctor*:
    name:
      CSharp:
      - id: Zenject.BindSignalIdToBinder`1.#ctor*
        name: BindSignalIdToBinder
        nameWithType: BindSignalIdToBinder<TSignal>.BindSignalIdToBinder
        qualifiedName: Zenject.BindSignalIdToBinder<TSignal>.BindSignalIdToBinder
      VB:
      - id: Zenject.BindSignalIdToBinder`1.#ctor*
        name: BindSignalIdToBinder
        nameWithType: BindSignalIdToBinder(Of TSignal).BindSignalIdToBinder
        qualifiedName: Zenject.BindSignalIdToBinder(Of TSignal).BindSignalIdToBinder
    isDefinition: true
    commentId: Overload:Zenject.BindSignalIdToBinder`1.#ctor
  Zenject.BindSignalIdToBinder`1.WithId*:
    name:
      CSharp:
      - id: Zenject.BindSignalIdToBinder`1.WithId*
        name: WithId
        nameWithType: BindSignalIdToBinder<TSignal>.WithId
        qualifiedName: Zenject.BindSignalIdToBinder<TSignal>.WithId
      VB:
      - id: Zenject.BindSignalIdToBinder`1.WithId*
        name: WithId
        nameWithType: BindSignalIdToBinder(Of TSignal).WithId
        qualifiedName: Zenject.BindSignalIdToBinder(Of TSignal).WithId
    isDefinition: true
    commentId: Overload:Zenject.BindSignalIdToBinder`1.WithId
  Zenject.BindSignalIdToBinder`1:
    name:
      CSharp:
      - id: Zenject.BindSignalIdToBinder`1
        name: BindSignalIdToBinder
        nameWithType: BindSignalIdToBinder
        qualifiedName: Zenject.BindSignalIdToBinder
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.BindSignalIdToBinder`1
        name: BindSignalIdToBinder
        nameWithType: BindSignalIdToBinder
        qualifiedName: Zenject.BindSignalIdToBinder
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Zenject.BindSignalIdToBinder`1
  Zenject.BindSignalToBinder`1.ModestTree.LinqExtensions.Yield``1:
    name:
      CSharp:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield<BindSignalToBinder<TSignal>>
        nameWithType: LinqExtensions.Yield<BindSignalToBinder<TSignal>>
        qualifiedName: ModestTree.LinqExtensions.Yield<Zenject.BindSignalToBinder<TSignal>>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield(Of BindSignalToBinder(Of TSignal))
        nameWithType: LinqExtensions.Yield(Of BindSignalToBinder(Of TSignal))
        qualifiedName: ModestTree.LinqExtensions.Yield(Of Zenject.BindSignalToBinder(Of TSignal))
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: ModestTree.LinqExtensions.Yield``1(``0)
    parent: ModestTree.LinqExtensions
    commentId: M:ModestTree.LinqExtensions.Yield``1(``0)
  ? Zenject.BindSignalToBinder`1.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.BindSignalToBinder{{TSignal}},{TProperty}},UniRx.FrameCountType,System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged<BindSignalToBinder<TSignal>, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<BindSignalToBinder<TSignal>, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.BindSignalToBinder<TSignal>, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.BindSignalToBinder`1
        name: BindSignalToBinder
        nameWithType: BindSignalToBinder
        qualifiedName: Zenject.BindSignalToBinder
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged(Of BindSignalToBinder(Of TSignal), TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of BindSignalToBinder(Of TSignal), TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.BindSignalToBinder(Of TSignal), TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.BindSignalToBinder`1
        name: BindSignalToBinder
        nameWithType: BindSignalToBinder
        qualifiedName: Zenject.BindSignalToBinder
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
  ? Zenject.BindSignalToBinder`1.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.BindSignalToBinder{{TSignal}},{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged<BindSignalToBinder<TSignal>, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<BindSignalToBinder<TSignal>, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.BindSignalToBinder<TSignal>, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.BindSignalToBinder`1
        name: BindSignalToBinder
        nameWithType: BindSignalToBinder
        qualifiedName: Zenject.BindSignalToBinder
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged(Of BindSignalToBinder(Of TSignal), TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of BindSignalToBinder(Of TSignal), TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.BindSignalToBinder(Of TSignal), TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.BindSignalToBinder`1
        name: BindSignalToBinder
        nameWithType: BindSignalToBinder
        qualifiedName: Zenject.BindSignalToBinder
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
  ? Zenject.BindSignalToBinder`1.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.BindSignalToBinder{{TSignal}},{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged<BindSignalToBinder<TSignal>, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<BindSignalToBinder<TSignal>, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.BindSignalToBinder<TSignal>, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.BindSignalToBinder`1
        name: BindSignalToBinder
        nameWithType: BindSignalToBinder
        qualifiedName: Zenject.BindSignalToBinder
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged(Of BindSignalToBinder(Of TSignal), TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of BindSignalToBinder(Of TSignal), TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.BindSignalToBinder(Of TSignal), TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.BindSignalToBinder`1
        name: BindSignalToBinder
        nameWithType: BindSignalToBinder
        qualifiedName: Zenject.BindSignalToBinder
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
  Zenject.BindSignalToBinder`1.#ctor*:
    name:
      CSharp:
      - id: Zenject.BindSignalToBinder`1.#ctor*
        name: BindSignalToBinder
        nameWithType: BindSignalToBinder<TSignal>.BindSignalToBinder
        qualifiedName: Zenject.BindSignalToBinder<TSignal>.BindSignalToBinder
      VB:
      - id: Zenject.BindSignalToBinder`1.#ctor*
        name: BindSignalToBinder
        nameWithType: BindSignalToBinder(Of TSignal).BindSignalToBinder
        qualifiedName: Zenject.BindSignalToBinder(Of TSignal).BindSignalToBinder
    isDefinition: true
    commentId: Overload:Zenject.BindSignalToBinder`1.#ctor
  Zenject.BindSignalToBinder`1.SignalBindInfo*:
    name:
      CSharp:
      - id: Zenject.BindSignalToBinder`1.SignalBindInfo*
        name: SignalBindInfo
        nameWithType: BindSignalToBinder<TSignal>.SignalBindInfo
        qualifiedName: Zenject.BindSignalToBinder<TSignal>.SignalBindInfo
      VB:
      - id: Zenject.BindSignalToBinder`1.SignalBindInfo*
        name: SignalBindInfo
        nameWithType: BindSignalToBinder(Of TSignal).SignalBindInfo
        qualifiedName: Zenject.BindSignalToBinder(Of TSignal).SignalBindInfo
    isDefinition: true
    commentId: Overload:Zenject.BindSignalToBinder`1.SignalBindInfo
  System.Action{{TSignal}}:
    name:
      CSharp:
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Action`1
    parent: System
    commentId: T:System.Action{`0}
  Zenject.BindSignalToBinder`1.ToMethod*:
    name:
      CSharp:
      - id: Zenject.BindSignalToBinder`1.ToMethod*
        name: ToMethod
        nameWithType: BindSignalToBinder<TSignal>.ToMethod
        qualifiedName: Zenject.BindSignalToBinder<TSignal>.ToMethod
      VB:
      - id: Zenject.BindSignalToBinder`1.ToMethod*
        name: ToMethod
        nameWithType: BindSignalToBinder(Of TSignal).ToMethod
        qualifiedName: Zenject.BindSignalToBinder(Of TSignal).ToMethod
    isDefinition: true
    commentId: Overload:Zenject.BindSignalToBinder`1.ToMethod
  System.Action:
    name:
      CSharp:
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      VB:
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Action
  Zenject.BindSignalFromBinder{{TObject},{TSignal}}:
    name:
      CSharp:
      - id: Zenject.BindSignalFromBinder`2
        name: BindSignalFromBinder
        nameWithType: BindSignalFromBinder
        qualifiedName: Zenject.BindSignalFromBinder
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.BindSignalFromBinder`2
        name: BindSignalFromBinder
        nameWithType: BindSignalFromBinder
        qualifiedName: Zenject.BindSignalFromBinder
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.BindSignalFromBinder`2
    parent: Zenject
    commentId: T:Zenject.BindSignalFromBinder{``0,`0}
  System.Action`2:
    name:
      CSharp:
      - id: System.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T1
        nameWithType: T1
        qualifiedName: T1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T2
        nameWithType: T2
        qualifiedName: T2
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T1
        nameWithType: T1
        qualifiedName: T1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T2
        nameWithType: T2
        qualifiedName: T2
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Action`2
  System.Action{{TObject},{TSignal}}:
    name:
      CSharp:
      - id: System.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Action`2
    parent: System
    commentId: T:System.Action{``0,`0}
  System.Func{{TObject},System.Action}:
    name:
      CSharp:
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TObject
        nameWithType: TObject
        qualifiedName: TObject
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Func`2
    parent: System
    commentId: T:System.Func{``0,System.Action}
  System.IDisposable:
    name:
      CSharp:
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      VB:
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.IDisposable
  Zenject.SignalCallbackWithLookupWrapper.ModestTree.LinqExtensions.Yield``1:
    name:
      CSharp:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield<SignalCallbackWithLookupWrapper>
        nameWithType: LinqExtensions.Yield<SignalCallbackWithLookupWrapper>
        qualifiedName: ModestTree.LinqExtensions.Yield<Zenject.SignalCallbackWithLookupWrapper>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield(Of SignalCallbackWithLookupWrapper)
        nameWithType: LinqExtensions.Yield(Of SignalCallbackWithLookupWrapper)
        qualifiedName: ModestTree.LinqExtensions.Yield(Of Zenject.SignalCallbackWithLookupWrapper)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: ModestTree.LinqExtensions.Yield``1(``0)
    parent: ModestTree.LinqExtensions
    commentId: M:ModestTree.LinqExtensions.Yield``1(``0)
  UniRx.DisposableExtensions.AddTo``1(``0,UnityEngine.GameObject):
    name:
      CSharp:
      - id: UniRx.DisposableExtensions.AddTo``1(``0,UnityEngine.GameObject)
        name: AddTo<T>
        nameWithType: DisposableExtensions.AddTo<T>
        qualifiedName: UniRx.DisposableExtensions.AddTo<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UnityEngine.GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: UnityEngine.GameObject
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.DisposableExtensions.AddTo``1(``0,UnityEngine.GameObject)
        name: AddTo(Of T)
        nameWithType: DisposableExtensions.AddTo(Of T)
        qualifiedName: UniRx.DisposableExtensions.AddTo(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UnityEngine.GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: UnityEngine.GameObject
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:UniRx.DisposableExtensions.AddTo``1(``0,UnityEngine.GameObject)
  UniRx.DisposableExtensions:
    name:
      CSharp:
      - id: UniRx.DisposableExtensions
        name: DisposableExtensions
        nameWithType: DisposableExtensions
        qualifiedName: UniRx.DisposableExtensions
      VB:
      - id: UniRx.DisposableExtensions
        name: DisposableExtensions
        nameWithType: DisposableExtensions
        qualifiedName: UniRx.DisposableExtensions
    isDefinition: true
    parent: UniRx
    commentId: T:UniRx.DisposableExtensions
  Zenject.SignalCallbackWithLookupWrapper.UniRx.DisposableExtensions.AddTo``1(UnityEngine.GameObject):
    name:
      CSharp:
      - id: UniRx.DisposableExtensions.AddTo``1(UnityEngine.GameObject)
        name: AddTo<SignalCallbackWithLookupWrapper>
        nameWithType: DisposableExtensions.AddTo<SignalCallbackWithLookupWrapper>
        qualifiedName: UniRx.DisposableExtensions.AddTo<Zenject.SignalCallbackWithLookupWrapper>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: UnityEngine.GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: UnityEngine.GameObject
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.DisposableExtensions.AddTo``1(UnityEngine.GameObject)
        name: AddTo(Of SignalCallbackWithLookupWrapper)
        nameWithType: DisposableExtensions.AddTo(Of SignalCallbackWithLookupWrapper)
        qualifiedName: UniRx.DisposableExtensions.AddTo(Of Zenject.SignalCallbackWithLookupWrapper)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: UnityEngine.GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: UnityEngine.GameObject
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.DisposableExtensions.AddTo``1(``0,UnityEngine.GameObject)
    parent: UniRx.DisposableExtensions
    commentId: M:UniRx.DisposableExtensions.AddTo``1(``0,UnityEngine.GameObject)
  UniRx.DisposableExtensions.AddTo``1(``0,UnityEngine.Component):
    name:
      CSharp:
      - id: UniRx.DisposableExtensions.AddTo``1(``0,UnityEngine.Component)
        name: AddTo<T>
        nameWithType: DisposableExtensions.AddTo<T>
        qualifiedName: UniRx.DisposableExtensions.AddTo<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UnityEngine.Component
        name: Component
        nameWithType: Component
        qualifiedName: UnityEngine.Component
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.DisposableExtensions.AddTo``1(``0,UnityEngine.Component)
        name: AddTo(Of T)
        nameWithType: DisposableExtensions.AddTo(Of T)
        qualifiedName: UniRx.DisposableExtensions.AddTo(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UnityEngine.Component
        name: Component
        nameWithType: Component
        qualifiedName: UnityEngine.Component
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:UniRx.DisposableExtensions.AddTo``1(``0,UnityEngine.Component)
  Zenject.SignalCallbackWithLookupWrapper.UniRx.DisposableExtensions.AddTo``1(UnityEngine.Component):
    name:
      CSharp:
      - id: UniRx.DisposableExtensions.AddTo``1(UnityEngine.Component)
        name: AddTo<SignalCallbackWithLookupWrapper>
        nameWithType: DisposableExtensions.AddTo<SignalCallbackWithLookupWrapper>
        qualifiedName: UniRx.DisposableExtensions.AddTo<Zenject.SignalCallbackWithLookupWrapper>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: UnityEngine.Component
        name: Component
        nameWithType: Component
        qualifiedName: UnityEngine.Component
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.DisposableExtensions.AddTo``1(UnityEngine.Component)
        name: AddTo(Of SignalCallbackWithLookupWrapper)
        nameWithType: DisposableExtensions.AddTo(Of SignalCallbackWithLookupWrapper)
        qualifiedName: UniRx.DisposableExtensions.AddTo(Of Zenject.SignalCallbackWithLookupWrapper)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: UnityEngine.Component
        name: Component
        nameWithType: Component
        qualifiedName: UnityEngine.Component
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.DisposableExtensions.AddTo``1(``0,UnityEngine.Component)
    parent: UniRx.DisposableExtensions
    commentId: M:UniRx.DisposableExtensions.AddTo``1(``0,UnityEngine.Component)
  UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.GameObject):
    name:
      CSharp:
      - id: UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.GameObject)
        name: AddTo<T>
        nameWithType: DisposableExtensions.AddTo<T>
        qualifiedName: UniRx.DisposableExtensions.AddTo<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UnityEngine.GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: UnityEngine.GameObject
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.GameObject)
        name: AddTo(Of T)
        nameWithType: DisposableExtensions.AddTo(Of T)
        qualifiedName: UniRx.DisposableExtensions.AddTo(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UnityEngine.GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: UnityEngine.GameObject
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.GameObject)
  ? Zenject.SignalCallbackWithLookupWrapper.UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.GameObject)
  : name:
      CSharp:
      - id: UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.GameObject)
        name: AddTo<SignalCallbackWithLookupWrapper>
        nameWithType: DisposableExtensions.AddTo<SignalCallbackWithLookupWrapper>
        qualifiedName: UniRx.DisposableExtensions.AddTo<Zenject.SignalCallbackWithLookupWrapper>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UnityEngine.GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: UnityEngine.GameObject
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.GameObject)
        name: AddTo(Of SignalCallbackWithLookupWrapper)
        nameWithType: DisposableExtensions.AddTo(Of SignalCallbackWithLookupWrapper)
        qualifiedName: UniRx.DisposableExtensions.AddTo(Of Zenject.SignalCallbackWithLookupWrapper)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UnityEngine.GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: UnityEngine.GameObject
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.GameObject)
    parent: UniRx.DisposableExtensions
    commentId: M:UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.GameObject)
  UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.Component):
    name:
      CSharp:
      - id: UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.Component)
        name: AddTo<T>
        nameWithType: DisposableExtensions.AddTo<T>
        qualifiedName: UniRx.DisposableExtensions.AddTo<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UnityEngine.Component
        name: Component
        nameWithType: Component
        qualifiedName: UnityEngine.Component
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.Component)
        name: AddTo(Of T)
        nameWithType: DisposableExtensions.AddTo(Of T)
        qualifiedName: UniRx.DisposableExtensions.AddTo(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UnityEngine.Component
        name: Component
        nameWithType: Component
        qualifiedName: UnityEngine.Component
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.Component)
  ? Zenject.SignalCallbackWithLookupWrapper.UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.Component)
  : name:
      CSharp:
      - id: UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.Component)
        name: AddTo<SignalCallbackWithLookupWrapper>
        nameWithType: DisposableExtensions.AddTo<SignalCallbackWithLookupWrapper>
        qualifiedName: UniRx.DisposableExtensions.AddTo<Zenject.SignalCallbackWithLookupWrapper>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UnityEngine.Component
        name: Component
        nameWithType: Component
        qualifiedName: UnityEngine.Component
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.Component)
        name: AddTo(Of SignalCallbackWithLookupWrapper)
        nameWithType: DisposableExtensions.AddTo(Of SignalCallbackWithLookupWrapper)
        qualifiedName: UniRx.DisposableExtensions.AddTo(Of Zenject.SignalCallbackWithLookupWrapper)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UnityEngine.Component
        name: Component
        nameWithType: Component
        qualifiedName: UnityEngine.Component
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.Component)
    parent: UniRx.DisposableExtensions
    commentId: M:UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.Component)
  UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable}):
    name:
      CSharp:
      - id: UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable})
        name: AddTo<T>
        nameWithType: DisposableExtensions.AddTo<T>
        qualifiedName: UniRx.DisposableExtensions.AddTo<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable})
        name: AddTo(Of T)
        nameWithType: DisposableExtensions.AddTo(Of T)
        qualifiedName: UniRx.DisposableExtensions.AddTo(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable})
  ? Zenject.SignalCallbackWithLookupWrapper.UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable})
  : name:
      CSharp:
      - id: UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable})
        name: AddTo<SignalCallbackWithLookupWrapper>
        nameWithType: DisposableExtensions.AddTo<SignalCallbackWithLookupWrapper>
        qualifiedName: UniRx.DisposableExtensions.AddTo<Zenject.SignalCallbackWithLookupWrapper>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable})
        name: AddTo(Of SignalCallbackWithLookupWrapper)
        nameWithType: DisposableExtensions.AddTo(Of SignalCallbackWithLookupWrapper)
        qualifiedName: UniRx.DisposableExtensions.AddTo(Of Zenject.SignalCallbackWithLookupWrapper)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable})
    parent: UniRx.DisposableExtensions
    commentId: M:UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable})
  ? Zenject.SignalCallbackWithLookupWrapper.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalCallbackWithLookupWrapper,{TProperty}},UniRx.FrameCountType,System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged<SignalCallbackWithLookupWrapper, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalCallbackWithLookupWrapper, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalCallbackWithLookupWrapper, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalCallbackWithLookupWrapper
        name: SignalCallbackWithLookupWrapper
        nameWithType: SignalCallbackWithLookupWrapper
        qualifiedName: Zenject.SignalCallbackWithLookupWrapper
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged(Of SignalCallbackWithLookupWrapper, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalCallbackWithLookupWrapper, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalCallbackWithLookupWrapper, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalCallbackWithLookupWrapper
        name: SignalCallbackWithLookupWrapper
        nameWithType: SignalCallbackWithLookupWrapper
        qualifiedName: Zenject.SignalCallbackWithLookupWrapper
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
  ? Zenject.SignalCallbackWithLookupWrapper.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalCallbackWithLookupWrapper,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged<SignalCallbackWithLookupWrapper, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalCallbackWithLookupWrapper, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalCallbackWithLookupWrapper, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalCallbackWithLookupWrapper
        name: SignalCallbackWithLookupWrapper
        nameWithType: SignalCallbackWithLookupWrapper
        qualifiedName: Zenject.SignalCallbackWithLookupWrapper
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged(Of SignalCallbackWithLookupWrapper, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalCallbackWithLookupWrapper, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalCallbackWithLookupWrapper, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalCallbackWithLookupWrapper
        name: SignalCallbackWithLookupWrapper
        nameWithType: SignalCallbackWithLookupWrapper
        qualifiedName: Zenject.SignalCallbackWithLookupWrapper
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
  ? Zenject.SignalCallbackWithLookupWrapper.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalCallbackWithLookupWrapper,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged<SignalCallbackWithLookupWrapper, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalCallbackWithLookupWrapper, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalCallbackWithLookupWrapper, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalCallbackWithLookupWrapper
        name: SignalCallbackWithLookupWrapper
        nameWithType: SignalCallbackWithLookupWrapper
        qualifiedName: Zenject.SignalCallbackWithLookupWrapper
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged(Of SignalCallbackWithLookupWrapper, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalCallbackWithLookupWrapper, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalCallbackWithLookupWrapper, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalCallbackWithLookupWrapper
        name: SignalCallbackWithLookupWrapper
        nameWithType: SignalCallbackWithLookupWrapper
        qualifiedName: Zenject.SignalCallbackWithLookupWrapper
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
  System.Type:
    name:
      CSharp:
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      VB:
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Type
  System.Guid:
    name:
      CSharp:
      - id: System.Guid
        name: Guid
        nameWithType: Guid
        qualifiedName: System.Guid
        isExternal: true
      VB:
      - id: System.Guid
        name: Guid
        nameWithType: Guid
        qualifiedName: System.Guid
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Guid
  System.Func{System.Object,System.Action{System.Object}}:
    name:
      CSharp:
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Func`2
    parent: System
    commentId: T:System.Func{System.Object,System.Action{System.Object}}
  Zenject.SignalBus:
    name:
      CSharp:
      - id: Zenject.SignalBus
        name: SignalBus
        nameWithType: SignalBus
        qualifiedName: Zenject.SignalBus
      VB:
      - id: Zenject.SignalBus
        name: SignalBus
        nameWithType: SignalBus
        qualifiedName: Zenject.SignalBus
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.SignalBus
  Zenject.SignalCallbackWithLookupWrapper.#ctor*:
    name:
      CSharp:
      - id: Zenject.SignalCallbackWithLookupWrapper.#ctor*
        name: SignalCallbackWithLookupWrapper
        nameWithType: SignalCallbackWithLookupWrapper.SignalCallbackWithLookupWrapper
        qualifiedName: Zenject.SignalCallbackWithLookupWrapper.SignalCallbackWithLookupWrapper
      VB:
      - id: Zenject.SignalCallbackWithLookupWrapper.#ctor*
        name: SignalCallbackWithLookupWrapper
        nameWithType: SignalCallbackWithLookupWrapper.SignalCallbackWithLookupWrapper
        qualifiedName: Zenject.SignalCallbackWithLookupWrapper.SignalCallbackWithLookupWrapper
    isDefinition: true
    commentId: Overload:Zenject.SignalCallbackWithLookupWrapper.#ctor
  Zenject.SignalCallbackWithLookupWrapper.Dispose*:
    name:
      CSharp:
      - id: Zenject.SignalCallbackWithLookupWrapper.Dispose*
        name: Dispose
        nameWithType: SignalCallbackWithLookupWrapper.Dispose
        qualifiedName: Zenject.SignalCallbackWithLookupWrapper.Dispose
      VB:
      - id: Zenject.SignalCallbackWithLookupWrapper.Dispose*
        name: Dispose
        nameWithType: SignalCallbackWithLookupWrapper.Dispose
        qualifiedName: Zenject.SignalCallbackWithLookupWrapper.Dispose
    isDefinition: true
    commentId: Overload:Zenject.SignalCallbackWithLookupWrapper.Dispose
  System.IDisposable.Dispose:
    name:
      CSharp:
      - id: System.IDisposable.Dispose
        name: Dispose
        nameWithType: IDisposable.Dispose
        qualifiedName: System.IDisposable.Dispose
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.IDisposable.Dispose
        name: Dispose
        nameWithType: IDisposable.Dispose
        qualifiedName: System.IDisposable.Dispose
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.IDisposable
    commentId: M:System.IDisposable.Dispose
  Zenject.SignalCallbackWithLookupWrapper:
    name:
      CSharp:
      - id: Zenject.SignalCallbackWithLookupWrapper
        name: SignalCallbackWithLookupWrapper
        nameWithType: SignalCallbackWithLookupWrapper
        qualifiedName: Zenject.SignalCallbackWithLookupWrapper
      VB:
      - id: Zenject.SignalCallbackWithLookupWrapper
        name: SignalCallbackWithLookupWrapper
        nameWithType: SignalCallbackWithLookupWrapper
        qualifiedName: Zenject.SignalCallbackWithLookupWrapper
    isDefinition: true
    commentId: T:Zenject.SignalCallbackWithLookupWrapper
  Zenject.SignalCallbackWrapper.ModestTree.LinqExtensions.Yield``1:
    name:
      CSharp:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield<SignalCallbackWrapper>
        nameWithType: LinqExtensions.Yield<SignalCallbackWrapper>
        qualifiedName: ModestTree.LinqExtensions.Yield<Zenject.SignalCallbackWrapper>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield(Of SignalCallbackWrapper)
        nameWithType: LinqExtensions.Yield(Of SignalCallbackWrapper)
        qualifiedName: ModestTree.LinqExtensions.Yield(Of Zenject.SignalCallbackWrapper)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: ModestTree.LinqExtensions.Yield``1(``0)
    parent: ModestTree.LinqExtensions
    commentId: M:ModestTree.LinqExtensions.Yield``1(``0)
  Zenject.SignalCallbackWrapper.UniRx.DisposableExtensions.AddTo``1(UnityEngine.GameObject):
    name:
      CSharp:
      - id: UniRx.DisposableExtensions.AddTo``1(UnityEngine.GameObject)
        name: AddTo<SignalCallbackWrapper>
        nameWithType: DisposableExtensions.AddTo<SignalCallbackWrapper>
        qualifiedName: UniRx.DisposableExtensions.AddTo<Zenject.SignalCallbackWrapper>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: UnityEngine.GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: UnityEngine.GameObject
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.DisposableExtensions.AddTo``1(UnityEngine.GameObject)
        name: AddTo(Of SignalCallbackWrapper)
        nameWithType: DisposableExtensions.AddTo(Of SignalCallbackWrapper)
        qualifiedName: UniRx.DisposableExtensions.AddTo(Of Zenject.SignalCallbackWrapper)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: UnityEngine.GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: UnityEngine.GameObject
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.DisposableExtensions.AddTo``1(``0,UnityEngine.GameObject)
    parent: UniRx.DisposableExtensions
    commentId: M:UniRx.DisposableExtensions.AddTo``1(``0,UnityEngine.GameObject)
  Zenject.SignalCallbackWrapper.UniRx.DisposableExtensions.AddTo``1(UnityEngine.Component):
    name:
      CSharp:
      - id: UniRx.DisposableExtensions.AddTo``1(UnityEngine.Component)
        name: AddTo<SignalCallbackWrapper>
        nameWithType: DisposableExtensions.AddTo<SignalCallbackWrapper>
        qualifiedName: UniRx.DisposableExtensions.AddTo<Zenject.SignalCallbackWrapper>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: UnityEngine.Component
        name: Component
        nameWithType: Component
        qualifiedName: UnityEngine.Component
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.DisposableExtensions.AddTo``1(UnityEngine.Component)
        name: AddTo(Of SignalCallbackWrapper)
        nameWithType: DisposableExtensions.AddTo(Of SignalCallbackWrapper)
        qualifiedName: UniRx.DisposableExtensions.AddTo(Of Zenject.SignalCallbackWrapper)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: UnityEngine.Component
        name: Component
        nameWithType: Component
        qualifiedName: UnityEngine.Component
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.DisposableExtensions.AddTo``1(``0,UnityEngine.Component)
    parent: UniRx.DisposableExtensions
    commentId: M:UniRx.DisposableExtensions.AddTo``1(``0,UnityEngine.Component)
  ? Zenject.SignalCallbackWrapper.UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.GameObject)
  : name:
      CSharp:
      - id: UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.GameObject)
        name: AddTo<SignalCallbackWrapper>
        nameWithType: DisposableExtensions.AddTo<SignalCallbackWrapper>
        qualifiedName: UniRx.DisposableExtensions.AddTo<Zenject.SignalCallbackWrapper>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UnityEngine.GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: UnityEngine.GameObject
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.GameObject)
        name: AddTo(Of SignalCallbackWrapper)
        nameWithType: DisposableExtensions.AddTo(Of SignalCallbackWrapper)
        qualifiedName: UniRx.DisposableExtensions.AddTo(Of Zenject.SignalCallbackWrapper)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UnityEngine.GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: UnityEngine.GameObject
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.GameObject)
    parent: UniRx.DisposableExtensions
    commentId: M:UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.GameObject)
  ? Zenject.SignalCallbackWrapper.UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.Component)
  : name:
      CSharp:
      - id: UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.Component)
        name: AddTo<SignalCallbackWrapper>
        nameWithType: DisposableExtensions.AddTo<SignalCallbackWrapper>
        qualifiedName: UniRx.DisposableExtensions.AddTo<Zenject.SignalCallbackWrapper>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UnityEngine.Component
        name: Component
        nameWithType: Component
        qualifiedName: UnityEngine.Component
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.Component)
        name: AddTo(Of SignalCallbackWrapper)
        nameWithType: DisposableExtensions.AddTo(Of SignalCallbackWrapper)
        qualifiedName: UniRx.DisposableExtensions.AddTo(Of Zenject.SignalCallbackWrapper)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UnityEngine.Component
        name: Component
        nameWithType: Component
        qualifiedName: UnityEngine.Component
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.Component)
    parent: UniRx.DisposableExtensions
    commentId: M:UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable},UnityEngine.Component)
  Zenject.SignalCallbackWrapper.UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable}):
    name:
      CSharp:
      - id: UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable})
        name: AddTo<SignalCallbackWrapper>
        nameWithType: DisposableExtensions.AddTo<SignalCallbackWrapper>
        qualifiedName: UniRx.DisposableExtensions.AddTo<Zenject.SignalCallbackWrapper>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.DisposableExtensions.AddTo``1(System.Collections.Generic.ICollection{System.IDisposable})
        name: AddTo(Of SignalCallbackWrapper)
        nameWithType: DisposableExtensions.AddTo(Of SignalCallbackWrapper)
        qualifiedName: UniRx.DisposableExtensions.AddTo(Of Zenject.SignalCallbackWrapper)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable})
    parent: UniRx.DisposableExtensions
    commentId: M:UniRx.DisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable})
  ? Zenject.SignalCallbackWrapper.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalCallbackWrapper,{TProperty}},UniRx.FrameCountType,System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged<SignalCallbackWrapper, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalCallbackWrapper, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalCallbackWrapper, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalCallbackWrapper
        name: SignalCallbackWrapper
        nameWithType: SignalCallbackWrapper
        qualifiedName: Zenject.SignalCallbackWrapper
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged(Of SignalCallbackWrapper, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalCallbackWrapper, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalCallbackWrapper, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalCallbackWrapper
        name: SignalCallbackWrapper
        nameWithType: SignalCallbackWrapper
        qualifiedName: Zenject.SignalCallbackWrapper
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
  ? Zenject.SignalCallbackWrapper.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalCallbackWrapper,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged<SignalCallbackWrapper, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalCallbackWrapper, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalCallbackWrapper, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalCallbackWrapper
        name: SignalCallbackWrapper
        nameWithType: SignalCallbackWrapper
        qualifiedName: Zenject.SignalCallbackWrapper
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged(Of SignalCallbackWrapper, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalCallbackWrapper, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalCallbackWrapper, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalCallbackWrapper
        name: SignalCallbackWrapper
        nameWithType: SignalCallbackWrapper
        qualifiedName: Zenject.SignalCallbackWrapper
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
  ? Zenject.SignalCallbackWrapper.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalCallbackWrapper,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged<SignalCallbackWrapper, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalCallbackWrapper, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalCallbackWrapper, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalCallbackWrapper
        name: SignalCallbackWrapper
        nameWithType: SignalCallbackWrapper
        qualifiedName: Zenject.SignalCallbackWrapper
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged(Of SignalCallbackWrapper, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalCallbackWrapper, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalCallbackWrapper, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalCallbackWrapper
        name: SignalCallbackWrapper
        nameWithType: SignalCallbackWrapper
        qualifiedName: Zenject.SignalCallbackWrapper
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
  System.Action{System.Object}:
    name:
      CSharp:
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Action`1
    parent: System
    commentId: T:System.Action{System.Object}
  Zenject.SignalCallbackWrapper.#ctor*:
    name:
      CSharp:
      - id: Zenject.SignalCallbackWrapper.#ctor*
        name: SignalCallbackWrapper
        nameWithType: SignalCallbackWrapper.SignalCallbackWrapper
        qualifiedName: Zenject.SignalCallbackWrapper.SignalCallbackWrapper
      VB:
      - id: Zenject.SignalCallbackWrapper.#ctor*
        name: SignalCallbackWrapper
        nameWithType: SignalCallbackWrapper.SignalCallbackWrapper
        qualifiedName: Zenject.SignalCallbackWrapper.SignalCallbackWrapper
    isDefinition: true
    commentId: Overload:Zenject.SignalCallbackWrapper.#ctor
  Zenject.SignalCallbackWrapper.Dispose*:
    name:
      CSharp:
      - id: Zenject.SignalCallbackWrapper.Dispose*
        name: Dispose
        nameWithType: SignalCallbackWrapper.Dispose
        qualifiedName: Zenject.SignalCallbackWrapper.Dispose
      VB:
      - id: Zenject.SignalCallbackWrapper.Dispose*
        name: Dispose
        nameWithType: SignalCallbackWrapper.Dispose
        qualifiedName: Zenject.SignalCallbackWrapper.Dispose
    isDefinition: true
    commentId: Overload:Zenject.SignalCallbackWrapper.Dispose
  Zenject.SignalCallbackWrapper:
    name:
      CSharp:
      - id: Zenject.SignalCallbackWrapper
        name: SignalCallbackWrapper
        nameWithType: SignalCallbackWrapper
        qualifiedName: Zenject.SignalCallbackWrapper
      VB:
      - id: Zenject.SignalCallbackWrapper
        name: SignalCallbackWrapper
        nameWithType: SignalCallbackWrapper
        qualifiedName: Zenject.SignalCallbackWrapper
    isDefinition: true
    commentId: T:Zenject.SignalCallbackWrapper
  Zenject.SignalTickPriorityCopyBinder:
    name:
      CSharp:
      - id: Zenject.SignalTickPriorityCopyBinder
        name: SignalTickPriorityCopyBinder
        nameWithType: SignalTickPriorityCopyBinder
        qualifiedName: Zenject.SignalTickPriorityCopyBinder
      VB:
      - id: Zenject.SignalTickPriorityCopyBinder
        name: SignalTickPriorityCopyBinder
        nameWithType: SignalTickPriorityCopyBinder
        qualifiedName: Zenject.SignalTickPriorityCopyBinder
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.SignalTickPriorityCopyBinder
  Zenject.SignalTickPriorityCopyBinder.SignalBindInfo:
    name:
      CSharp:
      - id: Zenject.SignalTickPriorityCopyBinder.SignalBindInfo
        name: SignalBindInfo
        nameWithType: SignalTickPriorityCopyBinder.SignalBindInfo
        qualifiedName: Zenject.SignalTickPriorityCopyBinder.SignalBindInfo
      VB:
      - id: Zenject.SignalTickPriorityCopyBinder.SignalBindInfo
        name: SignalBindInfo
        nameWithType: SignalTickPriorityCopyBinder.SignalBindInfo
        qualifiedName: Zenject.SignalTickPriorityCopyBinder.SignalBindInfo
    isDefinition: true
    parent: Zenject.SignalTickPriorityCopyBinder
    commentId: P:Zenject.SignalTickPriorityCopyBinder.SignalBindInfo
  Zenject.SignalTickPriorityCopyBinder.WithTickPriority(System.Int32):
    name:
      CSharp:
      - id: Zenject.SignalTickPriorityCopyBinder.WithTickPriority(System.Int32)
        name: WithTickPriority
        nameWithType: SignalTickPriorityCopyBinder.WithTickPriority
        qualifiedName: Zenject.SignalTickPriorityCopyBinder.WithTickPriority
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.SignalTickPriorityCopyBinder.WithTickPriority(System.Int32)
        name: WithTickPriority
        nameWithType: SignalTickPriorityCopyBinder.WithTickPriority
        qualifiedName: Zenject.SignalTickPriorityCopyBinder.WithTickPriority
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Zenject.SignalTickPriorityCopyBinder
    commentId: M:Zenject.SignalTickPriorityCopyBinder.WithTickPriority(System.Int32)
  Zenject.SignalCopyBinder.AddCopyBindInfo(Zenject.BindInfo):
    name:
      CSharp:
      - id: Zenject.SignalCopyBinder.AddCopyBindInfo(Zenject.BindInfo)
        name: AddCopyBindInfo
        nameWithType: SignalCopyBinder.AddCopyBindInfo
        qualifiedName: Zenject.SignalCopyBinder.AddCopyBindInfo
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Zenject.BindInfo
        name: BindInfo
        nameWithType: BindInfo
        qualifiedName: Zenject.BindInfo
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.SignalCopyBinder.AddCopyBindInfo(Zenject.BindInfo)
        name: AddCopyBindInfo
        nameWithType: SignalCopyBinder.AddCopyBindInfo
        qualifiedName: Zenject.SignalCopyBinder.AddCopyBindInfo
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Zenject.BindInfo
        name: BindInfo
        nameWithType: BindInfo
        qualifiedName: Zenject.BindInfo
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Zenject.SignalCopyBinder
    commentId: M:Zenject.SignalCopyBinder.AddCopyBindInfo(Zenject.BindInfo)
  Zenject.SignalCopyBinder.CopyIntoAllSubContainers:
    name:
      CSharp:
      - id: Zenject.SignalCopyBinder.CopyIntoAllSubContainers
        name: CopyIntoAllSubContainers
        nameWithType: SignalCopyBinder.CopyIntoAllSubContainers
        qualifiedName: Zenject.SignalCopyBinder.CopyIntoAllSubContainers
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.SignalCopyBinder.CopyIntoAllSubContainers
        name: CopyIntoAllSubContainers
        nameWithType: SignalCopyBinder.CopyIntoAllSubContainers
        qualifiedName: Zenject.SignalCopyBinder.CopyIntoAllSubContainers
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Zenject.SignalCopyBinder
    commentId: M:Zenject.SignalCopyBinder.CopyIntoAllSubContainers
  Zenject.SignalCopyBinder.CopyIntoDirectSubContainers:
    name:
      CSharp:
      - id: Zenject.SignalCopyBinder.CopyIntoDirectSubContainers
        name: CopyIntoDirectSubContainers
        nameWithType: SignalCopyBinder.CopyIntoDirectSubContainers
        qualifiedName: Zenject.SignalCopyBinder.CopyIntoDirectSubContainers
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.SignalCopyBinder.CopyIntoDirectSubContainers
        name: CopyIntoDirectSubContainers
        nameWithType: SignalCopyBinder.CopyIntoDirectSubContainers
        qualifiedName: Zenject.SignalCopyBinder.CopyIntoDirectSubContainers
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Zenject.SignalCopyBinder
    commentId: M:Zenject.SignalCopyBinder.CopyIntoDirectSubContainers
  Zenject.SignalCopyBinder.MoveIntoAllSubContainers:
    name:
      CSharp:
      - id: Zenject.SignalCopyBinder.MoveIntoAllSubContainers
        name: MoveIntoAllSubContainers
        nameWithType: SignalCopyBinder.MoveIntoAllSubContainers
        qualifiedName: Zenject.SignalCopyBinder.MoveIntoAllSubContainers
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.SignalCopyBinder.MoveIntoAllSubContainers
        name: MoveIntoAllSubContainers
        nameWithType: SignalCopyBinder.MoveIntoAllSubContainers
        qualifiedName: Zenject.SignalCopyBinder.MoveIntoAllSubContainers
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Zenject.SignalCopyBinder
    commentId: M:Zenject.SignalCopyBinder.MoveIntoAllSubContainers
  Zenject.SignalCopyBinder.MoveIntoDirectSubContainers:
    name:
      CSharp:
      - id: Zenject.SignalCopyBinder.MoveIntoDirectSubContainers
        name: MoveIntoDirectSubContainers
        nameWithType: SignalCopyBinder.MoveIntoDirectSubContainers
        qualifiedName: Zenject.SignalCopyBinder.MoveIntoDirectSubContainers
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.SignalCopyBinder.MoveIntoDirectSubContainers
        name: MoveIntoDirectSubContainers
        nameWithType: SignalCopyBinder.MoveIntoDirectSubContainers
        qualifiedName: Zenject.SignalCopyBinder.MoveIntoDirectSubContainers
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Zenject.SignalCopyBinder
    commentId: M:Zenject.SignalCopyBinder.MoveIntoDirectSubContainers
  Zenject.DeclareSignalAsyncTickPriorityCopyBinder.ModestTree.LinqExtensions.Yield``1:
    name:
      CSharp:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield<DeclareSignalAsyncTickPriorityCopyBinder>
        nameWithType: LinqExtensions.Yield<DeclareSignalAsyncTickPriorityCopyBinder>
        qualifiedName: ModestTree.LinqExtensions.Yield<Zenject.DeclareSignalAsyncTickPriorityCopyBinder>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield(Of DeclareSignalAsyncTickPriorityCopyBinder)
        nameWithType: LinqExtensions.Yield(Of DeclareSignalAsyncTickPriorityCopyBinder)
        qualifiedName: ModestTree.LinqExtensions.Yield(Of Zenject.DeclareSignalAsyncTickPriorityCopyBinder)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: ModestTree.LinqExtensions.Yield``1(``0)
    parent: ModestTree.LinqExtensions
    commentId: M:ModestTree.LinqExtensions.Yield``1(``0)
  ? Zenject.DeclareSignalAsyncTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.DeclareSignalAsyncTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged<DeclareSignalAsyncTickPriorityCopyBinder, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<DeclareSignalAsyncTickPriorityCopyBinder, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.DeclareSignalAsyncTickPriorityCopyBinder, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
        name: DeclareSignalAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged(Of DeclareSignalAsyncTickPriorityCopyBinder, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of DeclareSignalAsyncTickPriorityCopyBinder, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.DeclareSignalAsyncTickPriorityCopyBinder, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
        name: DeclareSignalAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
  ? Zenject.DeclareSignalAsyncTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.DeclareSignalAsyncTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged<DeclareSignalAsyncTickPriorityCopyBinder, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<DeclareSignalAsyncTickPriorityCopyBinder, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.DeclareSignalAsyncTickPriorityCopyBinder, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
        name: DeclareSignalAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged(Of DeclareSignalAsyncTickPriorityCopyBinder, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of DeclareSignalAsyncTickPriorityCopyBinder, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.DeclareSignalAsyncTickPriorityCopyBinder, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
        name: DeclareSignalAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
  ? Zenject.DeclareSignalAsyncTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.DeclareSignalAsyncTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged<DeclareSignalAsyncTickPriorityCopyBinder, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<DeclareSignalAsyncTickPriorityCopyBinder, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.DeclareSignalAsyncTickPriorityCopyBinder, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
        name: DeclareSignalAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged(Of DeclareSignalAsyncTickPriorityCopyBinder, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of DeclareSignalAsyncTickPriorityCopyBinder, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.DeclareSignalAsyncTickPriorityCopyBinder, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
        name: DeclareSignalAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
  Zenject.SignalDeclarationBindInfo:
    name:
      CSharp:
      - id: Zenject.SignalDeclarationBindInfo
        name: SignalDeclarationBindInfo
        nameWithType: SignalDeclarationBindInfo
        qualifiedName: Zenject.SignalDeclarationBindInfo
      VB:
      - id: Zenject.SignalDeclarationBindInfo
        name: SignalDeclarationBindInfo
        nameWithType: SignalDeclarationBindInfo
        qualifiedName: Zenject.SignalDeclarationBindInfo
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.SignalDeclarationBindInfo
  Zenject.DeclareSignalAsyncTickPriorityCopyBinder.#ctor*:
    name:
      CSharp:
      - id: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.#ctor*
        name: DeclareSignalAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalAsyncTickPriorityCopyBinder.DeclareSignalAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.DeclareSignalAsyncTickPriorityCopyBinder
      VB:
      - id: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.#ctor*
        name: DeclareSignalAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalAsyncTickPriorityCopyBinder.DeclareSignalAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.DeclareSignalAsyncTickPriorityCopyBinder
    isDefinition: true
    commentId: Overload:Zenject.DeclareSignalAsyncTickPriorityCopyBinder.#ctor
  Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunAsync*:
    name:
      CSharp:
      - id: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunAsync*
        name: RunAsync
        nameWithType: DeclareSignalAsyncTickPriorityCopyBinder.RunAsync
        qualifiedName: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunAsync
      VB:
      - id: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunAsync*
        name: RunAsync
        nameWithType: DeclareSignalAsyncTickPriorityCopyBinder.RunAsync
        qualifiedName: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunAsync
    isDefinition: true
    commentId: Overload:Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunAsync
  Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunSync*:
    name:
      CSharp:
      - id: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunSync*
        name: RunSync
        nameWithType: DeclareSignalAsyncTickPriorityCopyBinder.RunSync
        qualifiedName: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunSync
      VB:
      - id: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunSync*
        name: RunSync
        nameWithType: DeclareSignalAsyncTickPriorityCopyBinder.RunSync
        qualifiedName: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunSync
    isDefinition: true
    commentId: Overload:Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunSync
  Zenject.DeclareSignalAsyncTickPriorityCopyBinder:
    name:
      CSharp:
      - id: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
        name: DeclareSignalAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
      VB:
      - id: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
        name: DeclareSignalAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.DeclareSignalAsyncTickPriorityCopyBinder
  Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder:
    name:
      CSharp:
      - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        name: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
      VB:
      - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        name: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
  Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber:
    name:
      CSharp:
      - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber
        name: RequireSubscriber
        nameWithType: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber
        qualifiedName: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber
        name: RequireSubscriber
        nameWithType: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber
        qualifiedName: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
    commentId: M:Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber
  Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber:
    name:
      CSharp:
      - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber
        name: OptionalSubscriber
        nameWithType: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber
        qualifiedName: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber
        name: OptionalSubscriber
        nameWithType: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber
        qualifiedName: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
    commentId: M:Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber
  Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning:
    name:
      CSharp:
      - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning
        name: OptionalSubscriberWithWarning
        nameWithType: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning
        qualifiedName: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning
        name: OptionalSubscriberWithWarning
        nameWithType: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning
        qualifiedName: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
    commentId: M:Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning
  Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunAsync:
    name:
      CSharp:
      - id: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunAsync
        name: RunAsync
        nameWithType: DeclareSignalAsyncTickPriorityCopyBinder.RunAsync
        qualifiedName: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunAsync
        name: RunAsync
        nameWithType: DeclareSignalAsyncTickPriorityCopyBinder.RunAsync
        qualifiedName: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
    commentId: M:Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunAsync
  Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunSync:
    name:
      CSharp:
      - id: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunSync
        name: RunSync
        nameWithType: DeclareSignalAsyncTickPriorityCopyBinder.RunSync
        qualifiedName: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunSync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunSync
        name: RunSync
        nameWithType: DeclareSignalAsyncTickPriorityCopyBinder.RunSync
        qualifiedName: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunSync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
    commentId: M:Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunSync
  Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.ModestTree.LinqExtensions.Yield``1:
    name:
      CSharp:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield<DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder>
        nameWithType: LinqExtensions.Yield<DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder>
        qualifiedName: ModestTree.LinqExtensions.Yield<Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield(Of DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder)
        nameWithType: LinqExtensions.Yield(Of DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder)
        qualifiedName: ModestTree.LinqExtensions.Yield(Of Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: ModestTree.LinqExtensions.Yield``1(``0)
    parent: ModestTree.LinqExtensions
    commentId: M:ModestTree.LinqExtensions.Yield``1(``0)
  ? Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged<DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        name: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged(Of DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        name: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
  ? Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged<DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        name: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged(Of DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        name: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
  ? Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged<DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        name: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged(Of DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        name: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
  Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.#ctor*:
    name:
      CSharp:
      - id: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.#ctor*
        name: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
      VB:
      - id: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.#ctor*
        name: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
    isDefinition: true
    commentId: Overload:Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.#ctor
  Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.WithId*:
    name:
      CSharp:
      - id: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.WithId*
        name: WithId
        nameWithType: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.WithId
        qualifiedName: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.WithId
      VB:
      - id: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.WithId*
        name: WithId
        nameWithType: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.WithId
        qualifiedName: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.WithId
    isDefinition: true
    commentId: Overload:Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.WithId
  Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder:
    name:
      CSharp:
      - id: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        name: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
      VB:
      - id: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        name: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
  Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.ModestTree.LinqExtensions.Yield``1:
    name:
      CSharp:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield<DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder>
        nameWithType: LinqExtensions.Yield<DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder>
        qualifiedName: ModestTree.LinqExtensions.Yield<Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield(Of DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder)
        nameWithType: LinqExtensions.Yield(Of DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder)
        qualifiedName: ModestTree.LinqExtensions.Yield(Of Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: ModestTree.LinqExtensions.Yield``1(``0)
    parent: ModestTree.LinqExtensions
    commentId: M:ModestTree.LinqExtensions.Yield``1(``0)
  ? Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged<DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        name: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged(Of DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        name: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
  ? Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged<DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        name: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged(Of DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        name: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
  ? Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged<DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        name: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged(Of DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        name: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
  Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.#ctor*:
    name:
      CSharp:
      - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.#ctor*
        name: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
      VB:
      - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.#ctor*
        name: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        nameWithType: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
        qualifiedName: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
    isDefinition: true
    commentId: Overload:Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.#ctor
  Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber*:
    name:
      CSharp:
      - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber*
        name: RequireSubscriber
        nameWithType: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber
        qualifiedName: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber
      VB:
      - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber*
        name: RequireSubscriber
        nameWithType: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber
        qualifiedName: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber
    isDefinition: true
    commentId: Overload:Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber
  Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber*:
    name:
      CSharp:
      - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber*
        name: OptionalSubscriber
        nameWithType: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber
        qualifiedName: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber
      VB:
      - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber*
        name: OptionalSubscriber
        nameWithType: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber
        qualifiedName: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber
    isDefinition: true
    commentId: Overload:Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber
  Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning*:
    name:
      CSharp:
      - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning*
        name: OptionalSubscriberWithWarning
        nameWithType: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning
        qualifiedName: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning
      VB:
      - id: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning*
        name: OptionalSubscriberWithWarning
        nameWithType: DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning
        qualifiedName: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning
    isDefinition: true
    commentId: Overload:Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning
  Zenject.SignalBindingBindInfo.ModestTree.LinqExtensions.Yield``1:
    name:
      CSharp:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield<SignalBindingBindInfo>
        nameWithType: LinqExtensions.Yield<SignalBindingBindInfo>
        qualifiedName: ModestTree.LinqExtensions.Yield<Zenject.SignalBindingBindInfo>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield(Of SignalBindingBindInfo)
        nameWithType: LinqExtensions.Yield(Of SignalBindingBindInfo)
        qualifiedName: ModestTree.LinqExtensions.Yield(Of Zenject.SignalBindingBindInfo)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: ModestTree.LinqExtensions.Yield``1(``0)
    parent: ModestTree.LinqExtensions
    commentId: M:ModestTree.LinqExtensions.Yield``1(``0)
  ? Zenject.SignalBindingBindInfo.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalBindingBindInfo,{TProperty}},UniRx.FrameCountType,System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged<SignalBindingBindInfo, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalBindingBindInfo, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalBindingBindInfo, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalBindingBindInfo
        name: SignalBindingBindInfo
        nameWithType: SignalBindingBindInfo
        qualifiedName: Zenject.SignalBindingBindInfo
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged(Of SignalBindingBindInfo, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalBindingBindInfo, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalBindingBindInfo, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalBindingBindInfo
        name: SignalBindingBindInfo
        nameWithType: SignalBindingBindInfo
        qualifiedName: Zenject.SignalBindingBindInfo
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
  ? Zenject.SignalBindingBindInfo.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalBindingBindInfo,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged<SignalBindingBindInfo, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalBindingBindInfo, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalBindingBindInfo, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalBindingBindInfo
        name: SignalBindingBindInfo
        nameWithType: SignalBindingBindInfo
        qualifiedName: Zenject.SignalBindingBindInfo
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged(Of SignalBindingBindInfo, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalBindingBindInfo, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalBindingBindInfo, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalBindingBindInfo
        name: SignalBindingBindInfo
        nameWithType: SignalBindingBindInfo
        qualifiedName: Zenject.SignalBindingBindInfo
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
  ? Zenject.SignalBindingBindInfo.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalBindingBindInfo,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged<SignalBindingBindInfo, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalBindingBindInfo, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalBindingBindInfo, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalBindingBindInfo
        name: SignalBindingBindInfo
        nameWithType: SignalBindingBindInfo
        qualifiedName: Zenject.SignalBindingBindInfo
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged(Of SignalBindingBindInfo, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalBindingBindInfo, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalBindingBindInfo, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalBindingBindInfo
        name: SignalBindingBindInfo
        nameWithType: SignalBindingBindInfo
        qualifiedName: Zenject.SignalBindingBindInfo
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
  Zenject.SignalBindingBindInfo.#ctor*:
    name:
      CSharp:
      - id: Zenject.SignalBindingBindInfo.#ctor*
        name: SignalBindingBindInfo
        nameWithType: SignalBindingBindInfo.SignalBindingBindInfo
        qualifiedName: Zenject.SignalBindingBindInfo.SignalBindingBindInfo
      VB:
      - id: Zenject.SignalBindingBindInfo.#ctor*
        name: SignalBindingBindInfo
        nameWithType: SignalBindingBindInfo.SignalBindingBindInfo
        qualifiedName: Zenject.SignalBindingBindInfo.SignalBindingBindInfo
    isDefinition: true
    commentId: Overload:Zenject.SignalBindingBindInfo.#ctor
  Zenject.SignalBindingBindInfo.Identifier*:
    name:
      CSharp:
      - id: Zenject.SignalBindingBindInfo.Identifier*
        name: Identifier
        nameWithType: SignalBindingBindInfo.Identifier
        qualifiedName: Zenject.SignalBindingBindInfo.Identifier
      VB:
      - id: Zenject.SignalBindingBindInfo.Identifier*
        name: Identifier
        nameWithType: SignalBindingBindInfo.Identifier
        qualifiedName: Zenject.SignalBindingBindInfo.Identifier
    isDefinition: true
    commentId: Overload:Zenject.SignalBindingBindInfo.Identifier
  Zenject.SignalBindingBindInfo.SignalType*:
    name:
      CSharp:
      - id: Zenject.SignalBindingBindInfo.SignalType*
        name: SignalType
        nameWithType: SignalBindingBindInfo.SignalType
        qualifiedName: Zenject.SignalBindingBindInfo.SignalType
      VB:
      - id: Zenject.SignalBindingBindInfo.SignalType*
        name: SignalType
        nameWithType: SignalBindingBindInfo.SignalType
        qualifiedName: Zenject.SignalBindingBindInfo.SignalType
    isDefinition: true
    commentId: Overload:Zenject.SignalBindingBindInfo.SignalType
  Zenject.SignalDeclarationBindInfo.ModestTree.LinqExtensions.Yield``1:
    name:
      CSharp:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield<SignalDeclarationBindInfo>
        nameWithType: LinqExtensions.Yield<SignalDeclarationBindInfo>
        qualifiedName: ModestTree.LinqExtensions.Yield<Zenject.SignalDeclarationBindInfo>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield(Of SignalDeclarationBindInfo)
        nameWithType: LinqExtensions.Yield(Of SignalDeclarationBindInfo)
        qualifiedName: ModestTree.LinqExtensions.Yield(Of Zenject.SignalDeclarationBindInfo)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: ModestTree.LinqExtensions.Yield``1(``0)
    parent: ModestTree.LinqExtensions
    commentId: M:ModestTree.LinqExtensions.Yield``1(``0)
  ? Zenject.SignalDeclarationBindInfo.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclarationBindInfo,{TProperty}},UniRx.FrameCountType,System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged<SignalDeclarationBindInfo, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalDeclarationBindInfo, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalDeclarationBindInfo, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalDeclarationBindInfo
        name: SignalDeclarationBindInfo
        nameWithType: SignalDeclarationBindInfo
        qualifiedName: Zenject.SignalDeclarationBindInfo
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged(Of SignalDeclarationBindInfo, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalDeclarationBindInfo, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalDeclarationBindInfo, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalDeclarationBindInfo
        name: SignalDeclarationBindInfo
        nameWithType: SignalDeclarationBindInfo
        qualifiedName: Zenject.SignalDeclarationBindInfo
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
  ? Zenject.SignalDeclarationBindInfo.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclarationBindInfo,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged<SignalDeclarationBindInfo, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalDeclarationBindInfo, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalDeclarationBindInfo, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalDeclarationBindInfo
        name: SignalDeclarationBindInfo
        nameWithType: SignalDeclarationBindInfo
        qualifiedName: Zenject.SignalDeclarationBindInfo
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged(Of SignalDeclarationBindInfo, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalDeclarationBindInfo, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalDeclarationBindInfo, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalDeclarationBindInfo
        name: SignalDeclarationBindInfo
        nameWithType: SignalDeclarationBindInfo
        qualifiedName: Zenject.SignalDeclarationBindInfo
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
  ? Zenject.SignalDeclarationBindInfo.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclarationBindInfo,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged<SignalDeclarationBindInfo, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalDeclarationBindInfo, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalDeclarationBindInfo, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalDeclarationBindInfo
        name: SignalDeclarationBindInfo
        nameWithType: SignalDeclarationBindInfo
        qualifiedName: Zenject.SignalDeclarationBindInfo
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged(Of SignalDeclarationBindInfo, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalDeclarationBindInfo, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalDeclarationBindInfo, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalDeclarationBindInfo
        name: SignalDeclarationBindInfo
        nameWithType: SignalDeclarationBindInfo
        qualifiedName: Zenject.SignalDeclarationBindInfo
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
  Zenject.SignalDeclarationBindInfo.#ctor*:
    name:
      CSharp:
      - id: Zenject.SignalDeclarationBindInfo.#ctor*
        name: SignalDeclarationBindInfo
        nameWithType: SignalDeclarationBindInfo.SignalDeclarationBindInfo
        qualifiedName: Zenject.SignalDeclarationBindInfo.SignalDeclarationBindInfo
      VB:
      - id: Zenject.SignalDeclarationBindInfo.#ctor*
        name: SignalDeclarationBindInfo
        nameWithType: SignalDeclarationBindInfo.SignalDeclarationBindInfo
        qualifiedName: Zenject.SignalDeclarationBindInfo.SignalDeclarationBindInfo
    isDefinition: true
    commentId: Overload:Zenject.SignalDeclarationBindInfo.#ctor
  Zenject.SignalDeclarationBindInfo.Identifier*:
    name:
      CSharp:
      - id: Zenject.SignalDeclarationBindInfo.Identifier*
        name: Identifier
        nameWithType: SignalDeclarationBindInfo.Identifier
        qualifiedName: Zenject.SignalDeclarationBindInfo.Identifier
      VB:
      - id: Zenject.SignalDeclarationBindInfo.Identifier*
        name: Identifier
        nameWithType: SignalDeclarationBindInfo.Identifier
        qualifiedName: Zenject.SignalDeclarationBindInfo.Identifier
    isDefinition: true
    commentId: Overload:Zenject.SignalDeclarationBindInfo.Identifier
  Zenject.SignalDeclarationBindInfo.SignalType*:
    name:
      CSharp:
      - id: Zenject.SignalDeclarationBindInfo.SignalType*
        name: SignalType
        nameWithType: SignalDeclarationBindInfo.SignalType
        qualifiedName: Zenject.SignalDeclarationBindInfo.SignalType
      VB:
      - id: Zenject.SignalDeclarationBindInfo.SignalType*
        name: SignalType
        nameWithType: SignalDeclarationBindInfo.SignalType
        qualifiedName: Zenject.SignalDeclarationBindInfo.SignalType
    isDefinition: true
    commentId: Overload:Zenject.SignalDeclarationBindInfo.SignalType
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  Zenject.SignalDeclarationBindInfo.RunAsync*:
    name:
      CSharp:
      - id: Zenject.SignalDeclarationBindInfo.RunAsync*
        name: RunAsync
        nameWithType: SignalDeclarationBindInfo.RunAsync
        qualifiedName: Zenject.SignalDeclarationBindInfo.RunAsync
      VB:
      - id: Zenject.SignalDeclarationBindInfo.RunAsync*
        name: RunAsync
        nameWithType: SignalDeclarationBindInfo.RunAsync
        qualifiedName: Zenject.SignalDeclarationBindInfo.RunAsync
    isDefinition: true
    commentId: Overload:Zenject.SignalDeclarationBindInfo.RunAsync
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  Zenject.SignalDeclarationBindInfo.TickPriority*:
    name:
      CSharp:
      - id: Zenject.SignalDeclarationBindInfo.TickPriority*
        name: TickPriority
        nameWithType: SignalDeclarationBindInfo.TickPriority
        qualifiedName: Zenject.SignalDeclarationBindInfo.TickPriority
      VB:
      - id: Zenject.SignalDeclarationBindInfo.TickPriority*
        name: TickPriority
        nameWithType: SignalDeclarationBindInfo.TickPriority
        qualifiedName: Zenject.SignalDeclarationBindInfo.TickPriority
    isDefinition: true
    commentId: Overload:Zenject.SignalDeclarationBindInfo.TickPriority
  Zenject.SignalMissingHandlerResponses:
    name:
      CSharp:
      - id: Zenject.SignalMissingHandlerResponses
        name: SignalMissingHandlerResponses
        nameWithType: SignalMissingHandlerResponses
        qualifiedName: Zenject.SignalMissingHandlerResponses
      VB:
      - id: Zenject.SignalMissingHandlerResponses
        name: SignalMissingHandlerResponses
        nameWithType: SignalMissingHandlerResponses
        qualifiedName: Zenject.SignalMissingHandlerResponses
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.SignalMissingHandlerResponses
  Zenject.SignalDeclarationBindInfo.MissingHandlerResponse*:
    name:
      CSharp:
      - id: Zenject.SignalDeclarationBindInfo.MissingHandlerResponse*
        name: MissingHandlerResponse
        nameWithType: SignalDeclarationBindInfo.MissingHandlerResponse
        qualifiedName: Zenject.SignalDeclarationBindInfo.MissingHandlerResponse
      VB:
      - id: Zenject.SignalDeclarationBindInfo.MissingHandlerResponse*
        name: MissingHandlerResponse
        nameWithType: SignalDeclarationBindInfo.MissingHandlerResponse
        qualifiedName: Zenject.SignalDeclarationBindInfo.MissingHandlerResponse
    isDefinition: true
    commentId: Overload:Zenject.SignalDeclarationBindInfo.MissingHandlerResponse
  Zenject.SignalCopyBinder.ModestTree.LinqExtensions.Yield``1:
    name:
      CSharp:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield<SignalCopyBinder>
        nameWithType: LinqExtensions.Yield<SignalCopyBinder>
        qualifiedName: ModestTree.LinqExtensions.Yield<Zenject.SignalCopyBinder>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield(Of SignalCopyBinder)
        nameWithType: LinqExtensions.Yield(Of SignalCopyBinder)
        qualifiedName: ModestTree.LinqExtensions.Yield(Of Zenject.SignalCopyBinder)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: ModestTree.LinqExtensions.Yield``1(``0)
    parent: ModestTree.LinqExtensions
    commentId: M:ModestTree.LinqExtensions.Yield``1(``0)
  ? Zenject.SignalCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalCopyBinder,{TProperty}},UniRx.FrameCountType,System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged<SignalCopyBinder, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalCopyBinder, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalCopyBinder, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalCopyBinder
        name: SignalCopyBinder
        nameWithType: SignalCopyBinder
        qualifiedName: Zenject.SignalCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged(Of SignalCopyBinder, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalCopyBinder, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalCopyBinder, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalCopyBinder
        name: SignalCopyBinder
        nameWithType: SignalCopyBinder
        qualifiedName: Zenject.SignalCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
  ? Zenject.SignalCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalCopyBinder,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged<SignalCopyBinder, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalCopyBinder, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalCopyBinder, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalCopyBinder
        name: SignalCopyBinder
        nameWithType: SignalCopyBinder
        qualifiedName: Zenject.SignalCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged(Of SignalCopyBinder, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalCopyBinder, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalCopyBinder, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalCopyBinder
        name: SignalCopyBinder
        nameWithType: SignalCopyBinder
        qualifiedName: Zenject.SignalCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
  ? Zenject.SignalCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalCopyBinder,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged<SignalCopyBinder, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalCopyBinder, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalCopyBinder, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalCopyBinder
        name: SignalCopyBinder
        nameWithType: SignalCopyBinder
        qualifiedName: Zenject.SignalCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged(Of SignalCopyBinder, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalCopyBinder, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalCopyBinder, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalCopyBinder
        name: SignalCopyBinder
        nameWithType: SignalCopyBinder
        qualifiedName: Zenject.SignalCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
  Zenject.SignalCopyBinder.#ctor*:
    name:
      CSharp:
      - id: Zenject.SignalCopyBinder.#ctor*
        name: SignalCopyBinder
        nameWithType: SignalCopyBinder.SignalCopyBinder
        qualifiedName: Zenject.SignalCopyBinder.SignalCopyBinder
      VB:
      - id: Zenject.SignalCopyBinder.#ctor*
        name: SignalCopyBinder
        nameWithType: SignalCopyBinder.SignalCopyBinder
        qualifiedName: Zenject.SignalCopyBinder.SignalCopyBinder
    isDefinition: true
    commentId: Overload:Zenject.SignalCopyBinder.#ctor
  Zenject.BindInfo:
    name:
      CSharp:
      - id: Zenject.BindInfo
        name: BindInfo
        nameWithType: BindInfo
        qualifiedName: Zenject.BindInfo
      VB:
      - id: Zenject.BindInfo
        name: BindInfo
        nameWithType: BindInfo
        qualifiedName: Zenject.BindInfo
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.BindInfo
  Zenject.SignalCopyBinder.AddCopyBindInfo*:
    name:
      CSharp:
      - id: Zenject.SignalCopyBinder.AddCopyBindInfo*
        name: AddCopyBindInfo
        nameWithType: SignalCopyBinder.AddCopyBindInfo
        qualifiedName: Zenject.SignalCopyBinder.AddCopyBindInfo
      VB:
      - id: Zenject.SignalCopyBinder.AddCopyBindInfo*
        name: AddCopyBindInfo
        nameWithType: SignalCopyBinder.AddCopyBindInfo
        qualifiedName: Zenject.SignalCopyBinder.AddCopyBindInfo
    isDefinition: true
    commentId: Overload:Zenject.SignalCopyBinder.AddCopyBindInfo
  Zenject.SignalCopyBinder.CopyIntoAllSubContainers*:
    name:
      CSharp:
      - id: Zenject.SignalCopyBinder.CopyIntoAllSubContainers*
        name: CopyIntoAllSubContainers
        nameWithType: SignalCopyBinder.CopyIntoAllSubContainers
        qualifiedName: Zenject.SignalCopyBinder.CopyIntoAllSubContainers
      VB:
      - id: Zenject.SignalCopyBinder.CopyIntoAllSubContainers*
        name: CopyIntoAllSubContainers
        nameWithType: SignalCopyBinder.CopyIntoAllSubContainers
        qualifiedName: Zenject.SignalCopyBinder.CopyIntoAllSubContainers
    isDefinition: true
    commentId: Overload:Zenject.SignalCopyBinder.CopyIntoAllSubContainers
  Zenject.SignalCopyBinder.CopyIntoDirectSubContainers*:
    name:
      CSharp:
      - id: Zenject.SignalCopyBinder.CopyIntoDirectSubContainers*
        name: CopyIntoDirectSubContainers
        nameWithType: SignalCopyBinder.CopyIntoDirectSubContainers
        qualifiedName: Zenject.SignalCopyBinder.CopyIntoDirectSubContainers
      VB:
      - id: Zenject.SignalCopyBinder.CopyIntoDirectSubContainers*
        name: CopyIntoDirectSubContainers
        nameWithType: SignalCopyBinder.CopyIntoDirectSubContainers
        qualifiedName: Zenject.SignalCopyBinder.CopyIntoDirectSubContainers
    isDefinition: true
    commentId: Overload:Zenject.SignalCopyBinder.CopyIntoDirectSubContainers
  Zenject.SignalCopyBinder.MoveIntoAllSubContainers*:
    name:
      CSharp:
      - id: Zenject.SignalCopyBinder.MoveIntoAllSubContainers*
        name: MoveIntoAllSubContainers
        nameWithType: SignalCopyBinder.MoveIntoAllSubContainers
        qualifiedName: Zenject.SignalCopyBinder.MoveIntoAllSubContainers
      VB:
      - id: Zenject.SignalCopyBinder.MoveIntoAllSubContainers*
        name: MoveIntoAllSubContainers
        nameWithType: SignalCopyBinder.MoveIntoAllSubContainers
        qualifiedName: Zenject.SignalCopyBinder.MoveIntoAllSubContainers
    isDefinition: true
    commentId: Overload:Zenject.SignalCopyBinder.MoveIntoAllSubContainers
  Zenject.SignalCopyBinder.MoveIntoDirectSubContainers*:
    name:
      CSharp:
      - id: Zenject.SignalCopyBinder.MoveIntoDirectSubContainers*
        name: MoveIntoDirectSubContainers
        nameWithType: SignalCopyBinder.MoveIntoDirectSubContainers
        qualifiedName: Zenject.SignalCopyBinder.MoveIntoDirectSubContainers
      VB:
      - id: Zenject.SignalCopyBinder.MoveIntoDirectSubContainers*
        name: MoveIntoDirectSubContainers
        nameWithType: SignalCopyBinder.MoveIntoDirectSubContainers
        qualifiedName: Zenject.SignalCopyBinder.MoveIntoDirectSubContainers
    isDefinition: true
    commentId: Overload:Zenject.SignalCopyBinder.MoveIntoDirectSubContainers
  Zenject.SignalExtensions.CreateDefaultSignalDeclarationBindInfo*:
    name:
      CSharp:
      - id: Zenject.SignalExtensions.CreateDefaultSignalDeclarationBindInfo*
        name: CreateDefaultSignalDeclarationBindInfo
        nameWithType: SignalExtensions.CreateDefaultSignalDeclarationBindInfo
        qualifiedName: Zenject.SignalExtensions.CreateDefaultSignalDeclarationBindInfo
      VB:
      - id: Zenject.SignalExtensions.CreateDefaultSignalDeclarationBindInfo*
        name: CreateDefaultSignalDeclarationBindInfo
        nameWithType: SignalExtensions.CreateDefaultSignalDeclarationBindInfo
        qualifiedName: Zenject.SignalExtensions.CreateDefaultSignalDeclarationBindInfo
    isDefinition: true
    commentId: Overload:Zenject.SignalExtensions.CreateDefaultSignalDeclarationBindInfo
  Zenject.SignalExtensions.DeclareSignal*:
    name:
      CSharp:
      - id: Zenject.SignalExtensions.DeclareSignal*
        name: DeclareSignal
        nameWithType: SignalExtensions.DeclareSignal
        qualifiedName: Zenject.SignalExtensions.DeclareSignal
      VB:
      - id: Zenject.SignalExtensions.DeclareSignal*
        name: DeclareSignal
        nameWithType: SignalExtensions.DeclareSignal
        qualifiedName: Zenject.SignalExtensions.DeclareSignal
    isDefinition: true
    commentId: Overload:Zenject.SignalExtensions.DeclareSignal
  Zenject.SignalExtensions.DeclareSignalWithInterfaces*:
    name:
      CSharp:
      - id: Zenject.SignalExtensions.DeclareSignalWithInterfaces*
        name: DeclareSignalWithInterfaces
        nameWithType: SignalExtensions.DeclareSignalWithInterfaces
        qualifiedName: Zenject.SignalExtensions.DeclareSignalWithInterfaces
      VB:
      - id: Zenject.SignalExtensions.DeclareSignalWithInterfaces*
        name: DeclareSignalWithInterfaces
        nameWithType: SignalExtensions.DeclareSignalWithInterfaces
        qualifiedName: Zenject.SignalExtensions.DeclareSignalWithInterfaces
    isDefinition: true
    commentId: Overload:Zenject.SignalExtensions.DeclareSignalWithInterfaces
  Zenject.BindSignalIdToBinder{{TSignal}}:
    name:
      CSharp:
      - id: Zenject.BindSignalIdToBinder`1
        name: BindSignalIdToBinder
        nameWithType: BindSignalIdToBinder
        qualifiedName: Zenject.BindSignalIdToBinder
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.BindSignalIdToBinder`1
        name: BindSignalIdToBinder
        nameWithType: BindSignalIdToBinder
        qualifiedName: Zenject.BindSignalIdToBinder
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.BindSignalIdToBinder`1
    parent: Zenject
    commentId: T:Zenject.BindSignalIdToBinder{``0}
  Zenject.SignalExtensions.BindSignal*:
    name:
      CSharp:
      - id: Zenject.SignalExtensions.BindSignal*
        name: BindSignal
        nameWithType: SignalExtensions.BindSignal
        qualifiedName: Zenject.SignalExtensions.BindSignal
      VB:
      - id: Zenject.SignalExtensions.BindSignal*
        name: BindSignal
        nameWithType: SignalExtensions.BindSignal
        qualifiedName: Zenject.SignalExtensions.BindSignal
    isDefinition: true
    commentId: Overload:Zenject.SignalExtensions.BindSignal
  Zenject.SignalExtensions:
    name:
      CSharp:
      - id: Zenject.SignalExtensions
        name: SignalExtensions
        nameWithType: SignalExtensions
        qualifiedName: Zenject.SignalExtensions
      VB:
      - id: Zenject.SignalExtensions
        name: SignalExtensions
        nameWithType: SignalExtensions
        qualifiedName: Zenject.SignalExtensions
    isDefinition: true
    commentId: T:Zenject.SignalExtensions
  Zenject.SignalTickPriorityCopyBinder.ModestTree.LinqExtensions.Yield``1:
    name:
      CSharp:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield<SignalTickPriorityCopyBinder>
        nameWithType: LinqExtensions.Yield<SignalTickPriorityCopyBinder>
        qualifiedName: ModestTree.LinqExtensions.Yield<Zenject.SignalTickPriorityCopyBinder>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield(Of SignalTickPriorityCopyBinder)
        nameWithType: LinqExtensions.Yield(Of SignalTickPriorityCopyBinder)
        qualifiedName: ModestTree.LinqExtensions.Yield(Of Zenject.SignalTickPriorityCopyBinder)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: ModestTree.LinqExtensions.Yield``1(``0)
    parent: ModestTree.LinqExtensions
    commentId: M:ModestTree.LinqExtensions.Yield``1(``0)
  ? Zenject.SignalTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged<SignalTickPriorityCopyBinder, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalTickPriorityCopyBinder, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalTickPriorityCopyBinder, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalTickPriorityCopyBinder
        name: SignalTickPriorityCopyBinder
        nameWithType: SignalTickPriorityCopyBinder
        qualifiedName: Zenject.SignalTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged(Of SignalTickPriorityCopyBinder, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalTickPriorityCopyBinder, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalTickPriorityCopyBinder, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalTickPriorityCopyBinder
        name: SignalTickPriorityCopyBinder
        nameWithType: SignalTickPriorityCopyBinder
        qualifiedName: Zenject.SignalTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
  ? Zenject.SignalTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged<SignalTickPriorityCopyBinder, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalTickPriorityCopyBinder, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalTickPriorityCopyBinder, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalTickPriorityCopyBinder
        name: SignalTickPriorityCopyBinder
        nameWithType: SignalTickPriorityCopyBinder
        qualifiedName: Zenject.SignalTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged(Of SignalTickPriorityCopyBinder, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalTickPriorityCopyBinder, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalTickPriorityCopyBinder, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalTickPriorityCopyBinder
        name: SignalTickPriorityCopyBinder
        nameWithType: SignalTickPriorityCopyBinder
        qualifiedName: Zenject.SignalTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
  ? Zenject.SignalTickPriorityCopyBinder.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalTickPriorityCopyBinder,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged<SignalTickPriorityCopyBinder, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalTickPriorityCopyBinder, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalTickPriorityCopyBinder, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalTickPriorityCopyBinder
        name: SignalTickPriorityCopyBinder
        nameWithType: SignalTickPriorityCopyBinder
        qualifiedName: Zenject.SignalTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged(Of SignalTickPriorityCopyBinder, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalTickPriorityCopyBinder, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalTickPriorityCopyBinder, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalTickPriorityCopyBinder
        name: SignalTickPriorityCopyBinder
        nameWithType: SignalTickPriorityCopyBinder
        qualifiedName: Zenject.SignalTickPriorityCopyBinder
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
  Zenject.SignalTickPriorityCopyBinder.#ctor*:
    name:
      CSharp:
      - id: Zenject.SignalTickPriorityCopyBinder.#ctor*
        name: SignalTickPriorityCopyBinder
        nameWithType: SignalTickPriorityCopyBinder.SignalTickPriorityCopyBinder
        qualifiedName: Zenject.SignalTickPriorityCopyBinder.SignalTickPriorityCopyBinder
      VB:
      - id: Zenject.SignalTickPriorityCopyBinder.#ctor*
        name: SignalTickPriorityCopyBinder
        nameWithType: SignalTickPriorityCopyBinder.SignalTickPriorityCopyBinder
        qualifiedName: Zenject.SignalTickPriorityCopyBinder.SignalTickPriorityCopyBinder
    isDefinition: true
    commentId: Overload:Zenject.SignalTickPriorityCopyBinder.#ctor
  Zenject.SignalTickPriorityCopyBinder.SignalBindInfo*:
    name:
      CSharp:
      - id: Zenject.SignalTickPriorityCopyBinder.SignalBindInfo*
        name: SignalBindInfo
        nameWithType: SignalTickPriorityCopyBinder.SignalBindInfo
        qualifiedName: Zenject.SignalTickPriorityCopyBinder.SignalBindInfo
      VB:
      - id: Zenject.SignalTickPriorityCopyBinder.SignalBindInfo*
        name: SignalBindInfo
        nameWithType: SignalTickPriorityCopyBinder.SignalBindInfo
        qualifiedName: Zenject.SignalTickPriorityCopyBinder.SignalBindInfo
    isDefinition: true
    commentId: Overload:Zenject.SignalTickPriorityCopyBinder.SignalBindInfo
  Zenject.SignalTickPriorityCopyBinder.WithTickPriority*:
    name:
      CSharp:
      - id: Zenject.SignalTickPriorityCopyBinder.WithTickPriority*
        name: WithTickPriority
        nameWithType: SignalTickPriorityCopyBinder.WithTickPriority
        qualifiedName: Zenject.SignalTickPriorityCopyBinder.WithTickPriority
      VB:
      - id: Zenject.SignalTickPriorityCopyBinder.WithTickPriority*
        name: WithTickPriority
        nameWithType: SignalTickPriorityCopyBinder.WithTickPriority
        qualifiedName: Zenject.SignalTickPriorityCopyBinder.WithTickPriority
    isDefinition: true
    commentId: Overload:Zenject.SignalTickPriorityCopyBinder.WithTickPriority
  Zenject.SignalDeclaration.ModestTree.LinqExtensions.Yield``1:
    name:
      CSharp:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield<SignalDeclaration>
        nameWithType: LinqExtensions.Yield<SignalDeclaration>
        qualifiedName: ModestTree.LinqExtensions.Yield<Zenject.SignalDeclaration>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield(Of SignalDeclaration)
        nameWithType: LinqExtensions.Yield(Of SignalDeclaration)
        qualifiedName: ModestTree.LinqExtensions.Yield(Of Zenject.SignalDeclaration)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: ModestTree.LinqExtensions.Yield``1(``0)
    parent: ModestTree.LinqExtensions
    commentId: M:ModestTree.LinqExtensions.Yield``1(``0)
  ? Zenject.SignalDeclaration.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclaration,{TProperty}},UniRx.FrameCountType,System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged<SignalDeclaration, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalDeclaration, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalDeclaration, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged(Of SignalDeclaration, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalDeclaration, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalDeclaration, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
  ? Zenject.SignalDeclaration.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclaration,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged<SignalDeclaration, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalDeclaration, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalDeclaration, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged(Of SignalDeclaration, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalDeclaration, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalDeclaration, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
  ? Zenject.SignalDeclaration.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclaration,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged<SignalDeclaration, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalDeclaration, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalDeclaration, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged(Of SignalDeclaration, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalDeclaration, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalDeclaration, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
  Zenject.ZenjectSettings:
    name:
      CSharp:
      - id: Zenject.ZenjectSettings
        name: ZenjectSettings
        nameWithType: ZenjectSettings
        qualifiedName: Zenject.ZenjectSettings
      VB:
      - id: Zenject.ZenjectSettings
        name: ZenjectSettings
        nameWithType: ZenjectSettings
        qualifiedName: Zenject.ZenjectSettings
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.ZenjectSettings
  Zenject.SignalDeclaration.#ctor*:
    name:
      CSharp:
      - id: Zenject.SignalDeclaration.#ctor*
        name: SignalDeclaration
        nameWithType: SignalDeclaration.SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration.SignalDeclaration
      VB:
      - id: Zenject.SignalDeclaration.#ctor*
        name: SignalDeclaration
        nameWithType: SignalDeclaration.SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration.SignalDeclaration
    isDefinition: true
    commentId: Overload:Zenject.SignalDeclaration.#ctor
  System.Collections.Generic.List`1:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.List`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.List{Zenject.SignalSubscription}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Zenject.SignalSubscription}
  Zenject.SignalDeclaration.Subscriptions*:
    name:
      CSharp:
      - id: Zenject.SignalDeclaration.Subscriptions*
        name: Subscriptions
        nameWithType: SignalDeclaration.Subscriptions
        qualifiedName: Zenject.SignalDeclaration.Subscriptions
      VB:
      - id: Zenject.SignalDeclaration.Subscriptions*
        name: Subscriptions
        nameWithType: SignalDeclaration.Subscriptions
        qualifiedName: Zenject.SignalDeclaration.Subscriptions
    isDefinition: true
    commentId: Overload:Zenject.SignalDeclaration.Subscriptions
  Zenject.SignalDeclaration.TickPriority*:
    name:
      CSharp:
      - id: Zenject.SignalDeclaration.TickPriority*
        name: TickPriority
        nameWithType: SignalDeclaration.TickPriority
        qualifiedName: Zenject.SignalDeclaration.TickPriority
      VB:
      - id: Zenject.SignalDeclaration.TickPriority*
        name: TickPriority
        nameWithType: SignalDeclaration.TickPriority
        qualifiedName: Zenject.SignalDeclaration.TickPriority
    isDefinition: true
    commentId: Overload:Zenject.SignalDeclaration.TickPriority
  Zenject.SignalDeclaration.IsAsync*:
    name:
      CSharp:
      - id: Zenject.SignalDeclaration.IsAsync*
        name: IsAsync
        nameWithType: SignalDeclaration.IsAsync
        qualifiedName: Zenject.SignalDeclaration.IsAsync
      VB:
      - id: Zenject.SignalDeclaration.IsAsync*
        name: IsAsync
        nameWithType: SignalDeclaration.IsAsync
        qualifiedName: Zenject.SignalDeclaration.IsAsync
    isDefinition: true
    commentId: Overload:Zenject.SignalDeclaration.IsAsync
  Zenject.BindingId:
    name:
      CSharp:
      - id: Zenject.BindingId
        name: BindingId
        nameWithType: BindingId
        qualifiedName: Zenject.BindingId
      VB:
      - id: Zenject.BindingId
        name: BindingId
        nameWithType: BindingId
        qualifiedName: Zenject.BindingId
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.BindingId
  Zenject.SignalDeclaration.BindingId*:
    name:
      CSharp:
      - id: Zenject.SignalDeclaration.BindingId*
        name: BindingId
        nameWithType: SignalDeclaration.BindingId
        qualifiedName: Zenject.SignalDeclaration.BindingId
      VB:
      - id: Zenject.SignalDeclaration.BindingId*
        name: BindingId
        nameWithType: SignalDeclaration.BindingId
        qualifiedName: Zenject.SignalDeclaration.BindingId
    isDefinition: true
    commentId: Overload:Zenject.SignalDeclaration.BindingId
  Zenject.SignalDeclaration.Dispose*:
    name:
      CSharp:
      - id: Zenject.SignalDeclaration.Dispose*
        name: Dispose
        nameWithType: SignalDeclaration.Dispose
        qualifiedName: Zenject.SignalDeclaration.Dispose
      VB:
      - id: Zenject.SignalDeclaration.Dispose*
        name: Dispose
        nameWithType: SignalDeclaration.Dispose
        qualifiedName: Zenject.SignalDeclaration.Dispose
    isDefinition: true
    commentId: Overload:Zenject.SignalDeclaration.Dispose
  Zenject.SignalDeclaration.Fire*:
    name:
      CSharp:
      - id: Zenject.SignalDeclaration.Fire*
        name: Fire
        nameWithType: SignalDeclaration.Fire
        qualifiedName: Zenject.SignalDeclaration.Fire
      VB:
      - id: Zenject.SignalDeclaration.Fire*
        name: Fire
        nameWithType: SignalDeclaration.Fire
        qualifiedName: Zenject.SignalDeclaration.Fire
    isDefinition: true
    commentId: Overload:Zenject.SignalDeclaration.Fire
  Zenject.SignalDeclaration.Tick*:
    name:
      CSharp:
      - id: Zenject.SignalDeclaration.Tick*
        name: Tick
        nameWithType: SignalDeclaration.Tick
        qualifiedName: Zenject.SignalDeclaration.Tick
      VB:
      - id: Zenject.SignalDeclaration.Tick*
        name: Tick
        nameWithType: SignalDeclaration.Tick
        qualifiedName: Zenject.SignalDeclaration.Tick
    isDefinition: true
    commentId: Overload:Zenject.SignalDeclaration.Tick
  Zenject.SignalSubscription:
    name:
      CSharp:
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      VB:
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.SignalSubscription
  Zenject.SignalDeclaration.Add*:
    name:
      CSharp:
      - id: Zenject.SignalDeclaration.Add*
        name: Add
        nameWithType: SignalDeclaration.Add
        qualifiedName: Zenject.SignalDeclaration.Add
      VB:
      - id: Zenject.SignalDeclaration.Add*
        name: Add
        nameWithType: SignalDeclaration.Add
        qualifiedName: Zenject.SignalDeclaration.Add
    isDefinition: true
    commentId: Overload:Zenject.SignalDeclaration.Add
  Zenject.SignalDeclaration.Remove*:
    name:
      CSharp:
      - id: Zenject.SignalDeclaration.Remove*
        name: Remove
        nameWithType: SignalDeclaration.Remove
        qualifiedName: Zenject.SignalDeclaration.Remove
      VB:
      - id: Zenject.SignalDeclaration.Remove*
        name: Remove
        nameWithType: SignalDeclaration.Remove
        qualifiedName: Zenject.SignalDeclaration.Remove
    isDefinition: true
    commentId: Overload:Zenject.SignalDeclaration.Remove
  Zenject.SignalDeclaration:
    name:
      CSharp:
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      VB:
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.SignalDeclaration
  Zenject.PlaceholderFactory`2:
    name:
      CSharp:
      - id: Zenject.PlaceholderFactory`2
        name: PlaceholderFactory
        nameWithType: PlaceholderFactory
        qualifiedName: Zenject.PlaceholderFactory
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TParam1
        nameWithType: TParam1
        qualifiedName: TParam1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.PlaceholderFactory`2
        name: PlaceholderFactory
        nameWithType: PlaceholderFactory
        qualifiedName: Zenject.PlaceholderFactory
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TParam1
        nameWithType: TParam1
        qualifiedName: TParam1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Zenject.PlaceholderFactory`2
  Zenject.PlaceholderFactory{Zenject.SignalDeclarationBindInfo,Zenject.SignalDeclaration}:
    name:
      CSharp:
      - id: Zenject.PlaceholderFactory`2
        name: PlaceholderFactory
        nameWithType: PlaceholderFactory
        qualifiedName: Zenject.PlaceholderFactory
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalDeclarationBindInfo
        name: SignalDeclarationBindInfo
        nameWithType: SignalDeclarationBindInfo
        qualifiedName: Zenject.SignalDeclarationBindInfo
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.PlaceholderFactory`2
        name: PlaceholderFactory
        nameWithType: PlaceholderFactory
        qualifiedName: Zenject.PlaceholderFactory
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalDeclarationBindInfo
        name: SignalDeclarationBindInfo
        nameWithType: SignalDeclarationBindInfo
        qualifiedName: Zenject.SignalDeclarationBindInfo
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.PlaceholderFactory`2
    parent: Zenject
    commentId: T:Zenject.PlaceholderFactory{Zenject.SignalDeclarationBindInfo,Zenject.SignalDeclaration}
  Zenject.PlaceholderFactory`2.Create(`0):
    name:
      CSharp:
      - id: Zenject.PlaceholderFactory`2.Create(`0)
        name: Create
        nameWithType: PlaceholderFactory<TParam1, TValue>.Create
        qualifiedName: Zenject.PlaceholderFactory<TParam1, TValue>.Create
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TParam1
        nameWithType: TParam1
        qualifiedName: TParam1
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.PlaceholderFactory`2.Create(`0)
        name: Create
        nameWithType: PlaceholderFactory(Of TParam1, TValue).Create
        qualifiedName: Zenject.PlaceholderFactory(Of TParam1, TValue).Create
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TParam1
        nameWithType: TParam1
        qualifiedName: TParam1
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.PlaceholderFactory`2.Create(`0)
  ? Zenject.PlaceholderFactory{Zenject.SignalDeclarationBindInfo,Zenject.SignalDeclaration}.Create(Zenject.SignalDeclarationBindInfo)
  : name:
      CSharp:
      - id: Zenject.PlaceholderFactory`2.Create(`0)
        name: Create
        nameWithType: PlaceholderFactory<SignalDeclarationBindInfo, SignalDeclaration>.Create
        qualifiedName: Zenject.PlaceholderFactory<Zenject.SignalDeclarationBindInfo, Zenject.SignalDeclaration>.Create
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Zenject.SignalDeclarationBindInfo
        name: SignalDeclarationBindInfo
        nameWithType: SignalDeclarationBindInfo
        qualifiedName: Zenject.SignalDeclarationBindInfo
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.PlaceholderFactory`2.Create(`0)
        name: Create
        nameWithType: PlaceholderFactory(Of SignalDeclarationBindInfo, SignalDeclaration).Create
        qualifiedName: Zenject.PlaceholderFactory(Of Zenject.SignalDeclarationBindInfo, Zenject.SignalDeclaration).Create
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Zenject.SignalDeclarationBindInfo
        name: SignalDeclarationBindInfo
        nameWithType: SignalDeclarationBindInfo
        qualifiedName: Zenject.SignalDeclarationBindInfo
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.PlaceholderFactory`2.Create(`0)
    parent: Zenject.PlaceholderFactory{Zenject.SignalDeclarationBindInfo,Zenject.SignalDeclaration}
    commentId: M:Zenject.PlaceholderFactory{Zenject.SignalDeclarationBindInfo,Zenject.SignalDeclaration}.Create(Zenject.SignalDeclarationBindInfo)
  Zenject.PlaceholderFactory`2.ParamTypes:
    name:
      CSharp:
      - id: Zenject.PlaceholderFactory`2.ParamTypes
        name: ParamTypes
        nameWithType: PlaceholderFactory<TParam1, TValue>.ParamTypes
        qualifiedName: Zenject.PlaceholderFactory<TParam1, TValue>.ParamTypes
      VB:
      - id: Zenject.PlaceholderFactory`2.ParamTypes
        name: ParamTypes
        nameWithType: PlaceholderFactory(Of TParam1, TValue).ParamTypes
        qualifiedName: Zenject.PlaceholderFactory(Of TParam1, TValue).ParamTypes
    isDefinition: true
    commentId: P:Zenject.PlaceholderFactory`2.ParamTypes
  Zenject.PlaceholderFactory{Zenject.SignalDeclarationBindInfo,Zenject.SignalDeclaration}.ParamTypes:
    name:
      CSharp:
      - id: Zenject.PlaceholderFactory`2.ParamTypes
        name: ParamTypes
        nameWithType: PlaceholderFactory<SignalDeclarationBindInfo, SignalDeclaration>.ParamTypes
        qualifiedName: Zenject.PlaceholderFactory<Zenject.SignalDeclarationBindInfo, Zenject.SignalDeclaration>.ParamTypes
      VB:
      - id: Zenject.PlaceholderFactory`2.ParamTypes
        name: ParamTypes
        nameWithType: PlaceholderFactory(Of SignalDeclarationBindInfo, SignalDeclaration).ParamTypes
        qualifiedName: Zenject.PlaceholderFactory(Of Zenject.SignalDeclarationBindInfo, Zenject.SignalDeclaration).ParamTypes
    isDefinition: false
    definition: Zenject.PlaceholderFactory`2.ParamTypes
    parent: Zenject.PlaceholderFactory{Zenject.SignalDeclarationBindInfo,Zenject.SignalDeclaration}
    commentId: P:Zenject.PlaceholderFactory{Zenject.SignalDeclarationBindInfo,Zenject.SignalDeclaration}.ParamTypes
  Zenject.PlaceholderFactoryBase`1:
    name:
      CSharp:
      - id: Zenject.PlaceholderFactoryBase`1
        name: PlaceholderFactoryBase
        nameWithType: PlaceholderFactoryBase
        qualifiedName: Zenject.PlaceholderFactoryBase
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.PlaceholderFactoryBase`1
        name: PlaceholderFactoryBase
        nameWithType: PlaceholderFactoryBase
        qualifiedName: Zenject.PlaceholderFactoryBase
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Zenject.PlaceholderFactoryBase`1
  Zenject.PlaceholderFactoryBase{Zenject.SignalDeclaration}:
    name:
      CSharp:
      - id: Zenject.PlaceholderFactoryBase`1
        name: PlaceholderFactoryBase
        nameWithType: PlaceholderFactoryBase
        qualifiedName: Zenject.PlaceholderFactoryBase
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.PlaceholderFactoryBase`1
        name: PlaceholderFactoryBase
        nameWithType: PlaceholderFactoryBase
        qualifiedName: Zenject.PlaceholderFactoryBase
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.PlaceholderFactoryBase`1
    parent: Zenject
    commentId: T:Zenject.PlaceholderFactoryBase{Zenject.SignalDeclaration}
  Zenject.PlaceholderFactoryBase`1.CreateInternal(System.Collections.Generic.List{Zenject.TypeValuePair}):
    name:
      CSharp:
      - id: Zenject.PlaceholderFactoryBase`1.CreateInternal(System.Collections.Generic.List{Zenject.TypeValuePair})
        name: CreateInternal
        nameWithType: PlaceholderFactoryBase<TValue>.CreateInternal
        qualifiedName: Zenject.PlaceholderFactoryBase<TValue>.CreateInternal
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.TypeValuePair
        name: TypeValuePair
        nameWithType: TypeValuePair
        qualifiedName: Zenject.TypeValuePair
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.PlaceholderFactoryBase`1.CreateInternal(System.Collections.Generic.List{Zenject.TypeValuePair})
        name: CreateInternal
        nameWithType: PlaceholderFactoryBase(Of TValue).CreateInternal
        qualifiedName: Zenject.PlaceholderFactoryBase(Of TValue).CreateInternal
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.TypeValuePair
        name: TypeValuePair
        nameWithType: TypeValuePair
        qualifiedName: Zenject.TypeValuePair
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.PlaceholderFactoryBase`1.CreateInternal(System.Collections.Generic.List{Zenject.TypeValuePair})
  Zenject.PlaceholderFactoryBase{Zenject.SignalDeclaration}.CreateInternal(System.Collections.Generic.List{Zenject.TypeValuePair}):
    name:
      CSharp:
      - id: Zenject.PlaceholderFactoryBase`1.CreateInternal(System.Collections.Generic.List{Zenject.TypeValuePair})
        name: CreateInternal
        nameWithType: PlaceholderFactoryBase<SignalDeclaration>.CreateInternal
        qualifiedName: Zenject.PlaceholderFactoryBase<Zenject.SignalDeclaration>.CreateInternal
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.TypeValuePair
        name: TypeValuePair
        nameWithType: TypeValuePair
        qualifiedName: Zenject.TypeValuePair
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.PlaceholderFactoryBase`1.CreateInternal(System.Collections.Generic.List{Zenject.TypeValuePair})
        name: CreateInternal
        nameWithType: PlaceholderFactoryBase(Of SignalDeclaration).CreateInternal
        qualifiedName: Zenject.PlaceholderFactoryBase(Of Zenject.SignalDeclaration).CreateInternal
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.TypeValuePair
        name: TypeValuePair
        nameWithType: TypeValuePair
        qualifiedName: Zenject.TypeValuePair
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.PlaceholderFactoryBase`1.CreateInternal(System.Collections.Generic.List{Zenject.TypeValuePair})
    parent: Zenject.PlaceholderFactoryBase{Zenject.SignalDeclaration}
    commentId: M:Zenject.PlaceholderFactoryBase{Zenject.SignalDeclaration}.CreateInternal(System.Collections.Generic.List{Zenject.TypeValuePair})
  Zenject.PlaceholderFactoryBase`1.Validate:
    name:
      CSharp:
      - id: Zenject.PlaceholderFactoryBase`1.Validate
        name: Validate
        nameWithType: PlaceholderFactoryBase<TValue>.Validate
        qualifiedName: Zenject.PlaceholderFactoryBase<TValue>.Validate
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.PlaceholderFactoryBase`1.Validate
        name: Validate
        nameWithType: PlaceholderFactoryBase(Of TValue).Validate
        qualifiedName: Zenject.PlaceholderFactoryBase(Of TValue).Validate
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.PlaceholderFactoryBase`1.Validate
  Zenject.PlaceholderFactoryBase{Zenject.SignalDeclaration}.Validate:
    name:
      CSharp:
      - id: Zenject.PlaceholderFactoryBase`1.Validate
        name: Validate
        nameWithType: PlaceholderFactoryBase<SignalDeclaration>.Validate
        qualifiedName: Zenject.PlaceholderFactoryBase<Zenject.SignalDeclaration>.Validate
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.PlaceholderFactoryBase`1.Validate
        name: Validate
        nameWithType: PlaceholderFactoryBase(Of SignalDeclaration).Validate
        qualifiedName: Zenject.PlaceholderFactoryBase(Of Zenject.SignalDeclaration).Validate
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.PlaceholderFactoryBase`1.Validate
    parent: Zenject.PlaceholderFactoryBase{Zenject.SignalDeclaration}
    commentId: M:Zenject.PlaceholderFactoryBase{Zenject.SignalDeclaration}.Validate
  Zenject.PlaceholderFactoryBase`1.ParamTypes:
    name:
      CSharp:
      - id: Zenject.PlaceholderFactoryBase`1.ParamTypes
        name: ParamTypes
        nameWithType: PlaceholderFactoryBase<TValue>.ParamTypes
        qualifiedName: Zenject.PlaceholderFactoryBase<TValue>.ParamTypes
      VB:
      - id: Zenject.PlaceholderFactoryBase`1.ParamTypes
        name: ParamTypes
        nameWithType: PlaceholderFactoryBase(Of TValue).ParamTypes
        qualifiedName: Zenject.PlaceholderFactoryBase(Of TValue).ParamTypes
    isDefinition: true
    commentId: P:Zenject.PlaceholderFactoryBase`1.ParamTypes
  Zenject.PlaceholderFactoryBase{Zenject.SignalDeclaration}.ParamTypes:
    name:
      CSharp:
      - id: Zenject.PlaceholderFactoryBase`1.ParamTypes
        name: ParamTypes
        nameWithType: PlaceholderFactoryBase<SignalDeclaration>.ParamTypes
        qualifiedName: Zenject.PlaceholderFactoryBase<Zenject.SignalDeclaration>.ParamTypes
      VB:
      - id: Zenject.PlaceholderFactoryBase`1.ParamTypes
        name: ParamTypes
        nameWithType: PlaceholderFactoryBase(Of SignalDeclaration).ParamTypes
        qualifiedName: Zenject.PlaceholderFactoryBase(Of Zenject.SignalDeclaration).ParamTypes
    isDefinition: false
    definition: Zenject.PlaceholderFactoryBase`1.ParamTypes
    parent: Zenject.PlaceholderFactoryBase{Zenject.SignalDeclaration}
    commentId: P:Zenject.PlaceholderFactoryBase{Zenject.SignalDeclaration}.ParamTypes
  Zenject.IPlaceholderFactory:
    name:
      CSharp:
      - id: Zenject.IPlaceholderFactory
        name: IPlaceholderFactory
        nameWithType: IPlaceholderFactory
        qualifiedName: Zenject.IPlaceholderFactory
      VB:
      - id: Zenject.IPlaceholderFactory
        name: IPlaceholderFactory
        nameWithType: IPlaceholderFactory
        qualifiedName: Zenject.IPlaceholderFactory
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.IPlaceholderFactory
  Zenject.IValidatable:
    name:
      CSharp:
      - id: Zenject.IValidatable
        name: IValidatable
        nameWithType: IValidatable
        qualifiedName: Zenject.IValidatable
      VB:
      - id: Zenject.IValidatable
        name: IValidatable
        nameWithType: IValidatable
        qualifiedName: Zenject.IValidatable
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.IValidatable
  Zenject.IFactory`2:
    name:
      CSharp:
      - id: Zenject.IFactory`2
        name: IFactory
        nameWithType: IFactory
        qualifiedName: Zenject.IFactory
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TParam1
        nameWithType: TParam1
        qualifiedName: TParam1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.IFactory`2
        name: IFactory
        nameWithType: IFactory
        qualifiedName: Zenject.IFactory
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TParam1
        nameWithType: TParam1
        qualifiedName: TParam1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Zenject.IFactory`2
  Zenject.IFactory{Zenject.SignalDeclarationBindInfo,Zenject.SignalDeclaration}:
    name:
      CSharp:
      - id: Zenject.IFactory`2
        name: IFactory
        nameWithType: IFactory
        qualifiedName: Zenject.IFactory
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalDeclarationBindInfo
        name: SignalDeclarationBindInfo
        nameWithType: SignalDeclarationBindInfo
        qualifiedName: Zenject.SignalDeclarationBindInfo
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.IFactory`2
        name: IFactory
        nameWithType: IFactory
        qualifiedName: Zenject.IFactory
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalDeclarationBindInfo
        name: SignalDeclarationBindInfo
        nameWithType: SignalDeclarationBindInfo
        qualifiedName: Zenject.SignalDeclarationBindInfo
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.IFactory`2
    parent: Zenject
    commentId: T:Zenject.IFactory{Zenject.SignalDeclarationBindInfo,Zenject.SignalDeclaration}
  Zenject.IFactory:
    name:
      CSharp:
      - id: Zenject.IFactory
        name: IFactory
        nameWithType: IFactory
        qualifiedName: Zenject.IFactory
      VB:
      - id: Zenject.IFactory
        name: IFactory
        nameWithType: IFactory
        qualifiedName: Zenject.IFactory
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.IFactory
  Zenject.SignalDeclaration.Factory.ModestTree.LinqExtensions.Yield``1:
    name:
      CSharp:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield<SignalDeclaration.Factory>
        nameWithType: LinqExtensions.Yield<SignalDeclaration.Factory>
        qualifiedName: ModestTree.LinqExtensions.Yield<Zenject.SignalDeclaration.Factory>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield(Of SignalDeclaration.Factory)
        nameWithType: LinqExtensions.Yield(Of SignalDeclaration.Factory)
        qualifiedName: ModestTree.LinqExtensions.Yield(Of Zenject.SignalDeclaration.Factory)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: ModestTree.LinqExtensions.Yield``1(``0)
    parent: ModestTree.LinqExtensions
    commentId: M:ModestTree.LinqExtensions.Yield``1(``0)
  ? Zenject.SignalDeclaration.Factory.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclaration.Factory,{TProperty}},UniRx.FrameCountType,System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged<SignalDeclaration.Factory, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalDeclaration.Factory, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalDeclaration.Factory, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalDeclaration.Factory
        name: SignalDeclaration.Factory
        nameWithType: SignalDeclaration.Factory
        qualifiedName: Zenject.SignalDeclaration.Factory
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged(Of SignalDeclaration.Factory, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalDeclaration.Factory, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalDeclaration.Factory, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalDeclaration.Factory
        name: SignalDeclaration.Factory
        nameWithType: SignalDeclaration.Factory
        qualifiedName: Zenject.SignalDeclaration.Factory
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
  ? Zenject.SignalDeclaration.Factory.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclaration.Factory,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged<SignalDeclaration.Factory, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalDeclaration.Factory, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalDeclaration.Factory, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalDeclaration.Factory
        name: SignalDeclaration.Factory
        nameWithType: SignalDeclaration.Factory
        qualifiedName: Zenject.SignalDeclaration.Factory
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged(Of SignalDeclaration.Factory, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalDeclaration.Factory, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalDeclaration.Factory, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalDeclaration.Factory
        name: SignalDeclaration.Factory
        nameWithType: SignalDeclaration.Factory
        qualifiedName: Zenject.SignalDeclaration.Factory
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
  ? Zenject.SignalDeclaration.Factory.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclaration.Factory,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged<SignalDeclaration.Factory, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalDeclaration.Factory, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalDeclaration.Factory, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalDeclaration.Factory
        name: SignalDeclaration.Factory
        nameWithType: SignalDeclaration.Factory
        qualifiedName: Zenject.SignalDeclaration.Factory
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged(Of SignalDeclaration.Factory, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalDeclaration.Factory, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalDeclaration.Factory, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalDeclaration.Factory
        name: SignalDeclaration.Factory
        nameWithType: SignalDeclaration.Factory
        qualifiedName: Zenject.SignalDeclaration.Factory
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
  Zenject.SignalDeclaration.Factory:
    name:
      CSharp:
      - id: Zenject.SignalDeclaration.Factory
        name: SignalDeclaration.Factory
        nameWithType: SignalDeclaration.Factory
        qualifiedName: Zenject.SignalDeclaration.Factory
      VB:
      - id: Zenject.SignalDeclaration.Factory
        name: SignalDeclaration.Factory
        nameWithType: SignalDeclaration.Factory
        qualifiedName: Zenject.SignalDeclaration.Factory
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.SignalDeclaration.Factory
  IPoolable`2:
    name:
      CSharp:
      - id: IPoolable`2
        name: IPoolable
        nameWithType: IPoolable
        qualifiedName: IPoolable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IPoolable`2
        name: IPoolable
        nameWithType: IPoolable
        qualifiedName: IPoolable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:IPoolable`2'
  IPoolable{System.Action{System.Object},Zenject.SignalDeclaration}:
    name:
      CSharp:
      - id: IPoolable`2
        name: IPoolable
        nameWithType: IPoolable
        qualifiedName: IPoolable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IPoolable`2
        name: IPoolable
        nameWithType: IPoolable
        qualifiedName: IPoolable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IPoolable`2
    commentId: '!:IPoolable{System.Action{System.Object},Zenject.SignalDeclaration}'
  Zenject.SignalSubscription.ModestTree.LinqExtensions.Yield``1:
    name:
      CSharp:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield<SignalSubscription>
        nameWithType: LinqExtensions.Yield<SignalSubscription>
        qualifiedName: ModestTree.LinqExtensions.Yield<Zenject.SignalSubscription>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield(Of SignalSubscription)
        nameWithType: LinqExtensions.Yield(Of SignalSubscription)
        qualifiedName: ModestTree.LinqExtensions.Yield(Of Zenject.SignalSubscription)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: ModestTree.LinqExtensions.Yield``1(``0)
    parent: ModestTree.LinqExtensions
    commentId: M:ModestTree.LinqExtensions.Yield``1(``0)
  ? Zenject.SignalSubscription.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalSubscription,{TProperty}},UniRx.FrameCountType,System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged<SignalSubscription, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalSubscription, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalSubscription, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged(Of SignalSubscription, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalSubscription, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalSubscription, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
  ? Zenject.SignalSubscription.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalSubscription,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged<SignalSubscription, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalSubscription, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalSubscription, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged(Of SignalSubscription, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalSubscription, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalSubscription, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
  ? Zenject.SignalSubscription.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalSubscription,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged<SignalSubscription, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalSubscription, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalSubscription, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged(Of SignalSubscription, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalSubscription, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalSubscription, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
  Zenject.SignalSubscription.Pool:
    name:
      CSharp:
      - id: Zenject.SignalSubscription.Pool
        name: SignalSubscription.Pool
        nameWithType: SignalSubscription.Pool
        qualifiedName: Zenject.SignalSubscription.Pool
      VB:
      - id: Zenject.SignalSubscription.Pool
        name: SignalSubscription.Pool
        nameWithType: SignalSubscription.Pool
        qualifiedName: Zenject.SignalSubscription.Pool
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.SignalSubscription.Pool
  Zenject.SignalSubscription.#ctor*:
    name:
      CSharp:
      - id: Zenject.SignalSubscription.#ctor*
        name: SignalSubscription
        nameWithType: SignalSubscription.SignalSubscription
        qualifiedName: Zenject.SignalSubscription.SignalSubscription
      VB:
      - id: Zenject.SignalSubscription.#ctor*
        name: SignalSubscription
        nameWithType: SignalSubscription.SignalSubscription
        qualifiedName: Zenject.SignalSubscription.SignalSubscription
    isDefinition: true
    commentId: Overload:Zenject.SignalSubscription.#ctor
  Zenject.SignalSubscription.SignalId*:
    name:
      CSharp:
      - id: Zenject.SignalSubscription.SignalId*
        name: SignalId
        nameWithType: SignalSubscription.SignalId
        qualifiedName: Zenject.SignalSubscription.SignalId
      VB:
      - id: Zenject.SignalSubscription.SignalId*
        name: SignalId
        nameWithType: SignalSubscription.SignalId
        qualifiedName: Zenject.SignalSubscription.SignalId
    isDefinition: true
    commentId: Overload:Zenject.SignalSubscription.SignalId
  Zenject.SignalSubscription.OnSpawned*:
    name:
      CSharp:
      - id: Zenject.SignalSubscription.OnSpawned*
        name: OnSpawned
        nameWithType: SignalSubscription.OnSpawned
        qualifiedName: Zenject.SignalSubscription.OnSpawned
      VB:
      - id: Zenject.SignalSubscription.OnSpawned*
        name: OnSpawned
        nameWithType: SignalSubscription.OnSpawned
        qualifiedName: Zenject.SignalSubscription.OnSpawned
    isDefinition: true
    commentId: Overload:Zenject.SignalSubscription.OnSpawned
  Zenject.SignalSubscription.OnDespawned*:
    name:
      CSharp:
      - id: Zenject.SignalSubscription.OnDespawned*
        name: OnDespawned
        nameWithType: SignalSubscription.OnDespawned
        qualifiedName: Zenject.SignalSubscription.OnDespawned
      VB:
      - id: Zenject.SignalSubscription.OnDespawned*
        name: OnDespawned
        nameWithType: SignalSubscription.OnDespawned
        qualifiedName: Zenject.SignalSubscription.OnDespawned
    isDefinition: true
    commentId: Overload:Zenject.SignalSubscription.OnDespawned
  Zenject.SignalSubscription.Dispose*:
    name:
      CSharp:
      - id: Zenject.SignalSubscription.Dispose*
        name: Dispose
        nameWithType: SignalSubscription.Dispose
        qualifiedName: Zenject.SignalSubscription.Dispose
      VB:
      - id: Zenject.SignalSubscription.Dispose*
        name: Dispose
        nameWithType: SignalSubscription.Dispose
        qualifiedName: Zenject.SignalSubscription.Dispose
    isDefinition: true
    commentId: Overload:Zenject.SignalSubscription.Dispose
  Zenject.SignalSubscription.OnDeclarationDespawned*:
    name:
      CSharp:
      - id: Zenject.SignalSubscription.OnDeclarationDespawned*
        name: OnDeclarationDespawned
        nameWithType: SignalSubscription.OnDeclarationDespawned
        qualifiedName: Zenject.SignalSubscription.OnDeclarationDespawned
      VB:
      - id: Zenject.SignalSubscription.OnDeclarationDespawned*
        name: OnDeclarationDespawned
        nameWithType: SignalSubscription.OnDeclarationDespawned
        qualifiedName: Zenject.SignalSubscription.OnDeclarationDespawned
    isDefinition: true
    commentId: Overload:Zenject.SignalSubscription.OnDeclarationDespawned
  Zenject.SignalSubscription.Invoke*:
    name:
      CSharp:
      - id: Zenject.SignalSubscription.Invoke*
        name: Invoke
        nameWithType: SignalSubscription.Invoke
        qualifiedName: Zenject.SignalSubscription.Invoke
      VB:
      - id: Zenject.SignalSubscription.Invoke*
        name: Invoke
        nameWithType: SignalSubscription.Invoke
        qualifiedName: Zenject.SignalSubscription.Invoke
    isDefinition: true
    commentId: Overload:Zenject.SignalSubscription.Invoke
  Zenject.PoolableMemoryPool`3:
    name:
      CSharp:
      - id: Zenject.PoolableMemoryPool`3
        name: PoolableMemoryPool
        nameWithType: PoolableMemoryPool
        qualifiedName: Zenject.PoolableMemoryPool
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TParam1
        nameWithType: TParam1
        qualifiedName: TParam1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TParam2
        nameWithType: TParam2
        qualifiedName: TParam2
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.PoolableMemoryPool`3
        name: PoolableMemoryPool
        nameWithType: PoolableMemoryPool
        qualifiedName: Zenject.PoolableMemoryPool
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TParam1
        nameWithType: TParam1
        qualifiedName: TParam1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TParam2
        nameWithType: TParam2
        qualifiedName: TParam2
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Zenject.PoolableMemoryPool`3
  Zenject.PoolableMemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}:
    name:
      CSharp:
      - id: Zenject.PoolableMemoryPool`3
        name: PoolableMemoryPool
        nameWithType: PoolableMemoryPool
        qualifiedName: Zenject.PoolableMemoryPool
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.PoolableMemoryPool`3
        name: PoolableMemoryPool
        nameWithType: PoolableMemoryPool
        qualifiedName: Zenject.PoolableMemoryPool
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.PoolableMemoryPool`3
    parent: Zenject
    commentId: T:Zenject.PoolableMemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}
  Zenject.PoolableMemoryPool`3.OnDespawned(`2):
    name:
      CSharp:
      - id: Zenject.PoolableMemoryPool`3.OnDespawned(`2)
        name: OnDespawned
        nameWithType: PoolableMemoryPool<TParam1, TParam2, TValue>.OnDespawned
        qualifiedName: Zenject.PoolableMemoryPool<TParam1, TParam2, TValue>.OnDespawned
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.PoolableMemoryPool`3.OnDespawned(`2)
        name: OnDespawned
        nameWithType: PoolableMemoryPool(Of TParam1, TParam2, TValue).OnDespawned
        qualifiedName: Zenject.PoolableMemoryPool(Of TParam1, TParam2, TValue).OnDespawned
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.PoolableMemoryPool`3.OnDespawned(`2)
  ? Zenject.PoolableMemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}.OnDespawned(Zenject.SignalSubscription)
  : name:
      CSharp:
      - id: Zenject.PoolableMemoryPool`3.OnDespawned(`2)
        name: OnDespawned
        nameWithType: PoolableMemoryPool<Action<Object>, SignalDeclaration, SignalSubscription>.OnDespawned
        qualifiedName: Zenject.PoolableMemoryPool<System.Action<System.Object>, Zenject.SignalDeclaration, Zenject.SignalSubscription>.OnDespawned
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.PoolableMemoryPool`3.OnDespawned(`2)
        name: OnDespawned
        nameWithType: PoolableMemoryPool(Of Action(Of Object), SignalDeclaration, SignalSubscription).OnDespawned
        qualifiedName: Zenject.PoolableMemoryPool(Of System.Action(Of System.Object), Zenject.SignalDeclaration, Zenject.SignalSubscription).OnDespawned
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.PoolableMemoryPool`3.OnDespawned(`2)
    parent: Zenject.PoolableMemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}
    commentId: M:Zenject.PoolableMemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}.OnDespawned(Zenject.SignalSubscription)
  Zenject.PoolableMemoryPool`3.Reinitialize(`0,`1,`2):
    name:
      CSharp:
      - id: Zenject.PoolableMemoryPool`3.Reinitialize(`0,`1,`2)
        name: Reinitialize
        nameWithType: PoolableMemoryPool<TParam1, TParam2, TValue>.Reinitialize
        qualifiedName: Zenject.PoolableMemoryPool<TParam1, TParam2, TValue>.Reinitialize
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TParam1
        nameWithType: TParam1
        qualifiedName: TParam1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TParam2
        nameWithType: TParam2
        qualifiedName: TParam2
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.PoolableMemoryPool`3.Reinitialize(`0,`1,`2)
        name: Reinitialize
        nameWithType: PoolableMemoryPool(Of TParam1, TParam2, TValue).Reinitialize
        qualifiedName: Zenject.PoolableMemoryPool(Of TParam1, TParam2, TValue).Reinitialize
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TParam1
        nameWithType: TParam1
        qualifiedName: TParam1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TParam2
        nameWithType: TParam2
        qualifiedName: TParam2
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.PoolableMemoryPool`3.Reinitialize(`0,`1,`2)
  ? Zenject.PoolableMemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}.Reinitialize(System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription)
  : name:
      CSharp:
      - id: Zenject.PoolableMemoryPool`3.Reinitialize(`0,`1,`2)
        name: Reinitialize
        nameWithType: PoolableMemoryPool<Action<Object>, SignalDeclaration, SignalSubscription>.Reinitialize
        qualifiedName: Zenject.PoolableMemoryPool<System.Action<System.Object>, Zenject.SignalDeclaration, Zenject.SignalSubscription>.Reinitialize
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.PoolableMemoryPool`3.Reinitialize(`0,`1,`2)
        name: Reinitialize
        nameWithType: PoolableMemoryPool(Of Action(Of Object), SignalDeclaration, SignalSubscription).Reinitialize
        qualifiedName: Zenject.PoolableMemoryPool(Of System.Action(Of System.Object), Zenject.SignalDeclaration, Zenject.SignalSubscription).Reinitialize
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.PoolableMemoryPool`3.Reinitialize(`0,`1,`2)
    parent: Zenject.PoolableMemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}
    commentId: M:Zenject.PoolableMemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}.Reinitialize(System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription)
  Zenject.MemoryPool`3:
    name:
      CSharp:
      - id: Zenject.MemoryPool`3
        name: MemoryPool
        nameWithType: MemoryPool
        qualifiedName: Zenject.MemoryPool
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TParam1
        nameWithType: TParam1
        qualifiedName: TParam1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TParam2
        nameWithType: TParam2
        qualifiedName: TParam2
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.MemoryPool`3
        name: MemoryPool
        nameWithType: MemoryPool
        qualifiedName: Zenject.MemoryPool
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TParam1
        nameWithType: TParam1
        qualifiedName: TParam1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TParam2
        nameWithType: TParam2
        qualifiedName: TParam2
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Zenject.MemoryPool`3
  Zenject.MemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}:
    name:
      CSharp:
      - id: Zenject.MemoryPool`3
        name: MemoryPool
        nameWithType: MemoryPool
        qualifiedName: Zenject.MemoryPool
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.MemoryPool`3
        name: MemoryPool
        nameWithType: MemoryPool
        qualifiedName: Zenject.MemoryPool
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.MemoryPool`3
    parent: Zenject
    commentId: T:Zenject.MemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}
  Zenject.MemoryPool`3.Spawn(`0,`1):
    name:
      CSharp:
      - id: Zenject.MemoryPool`3.Spawn(`0,`1)
        name: Spawn
        nameWithType: MemoryPool<TParam1, TParam2, TValue>.Spawn
        qualifiedName: Zenject.MemoryPool<TParam1, TParam2, TValue>.Spawn
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TParam1
        nameWithType: TParam1
        qualifiedName: TParam1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TParam2
        nameWithType: TParam2
        qualifiedName: TParam2
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPool`3.Spawn(`0,`1)
        name: Spawn
        nameWithType: MemoryPool(Of TParam1, TParam2, TValue).Spawn
        qualifiedName: Zenject.MemoryPool(Of TParam1, TParam2, TValue).Spawn
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TParam1
        nameWithType: TParam1
        qualifiedName: TParam1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TParam2
        nameWithType: TParam2
        qualifiedName: TParam2
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.MemoryPool`3.Spawn(`0,`1)
  ? Zenject.MemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}.Spawn(System.Action{System.Object},Zenject.SignalDeclaration)
  : name:
      CSharp:
      - id: Zenject.MemoryPool`3.Spawn(`0,`1)
        name: Spawn
        nameWithType: MemoryPool<Action<Object>, SignalDeclaration, SignalSubscription>.Spawn
        qualifiedName: Zenject.MemoryPool<System.Action<System.Object>, Zenject.SignalDeclaration, Zenject.SignalSubscription>.Spawn
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPool`3.Spawn(`0,`1)
        name: Spawn
        nameWithType: MemoryPool(Of Action(Of Object), SignalDeclaration, SignalSubscription).Spawn
        qualifiedName: Zenject.MemoryPool(Of System.Action(Of System.Object), Zenject.SignalDeclaration, Zenject.SignalSubscription).Spawn
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.MemoryPool`3.Spawn(`0,`1)
    parent: Zenject.MemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}
    commentId: M:Zenject.MemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}.Spawn(System.Action{System.Object},Zenject.SignalDeclaration)
  Zenject.MemoryPool`3.Zenject#IFactory{TParam1,TParam2,TValue}#Create(`0,`1):
    name:
      CSharp:
      - id: Zenject.MemoryPool`3.Zenject#IFactory{TParam1,TParam2,TValue}#Create(`0,`1)
        name: IFactory<TParam1, TParam2, TValue>.Create
        nameWithType: MemoryPool<TParam1, TParam2, TValue>.IFactory<TParam1, TParam2, TValue>.Create
        qualifiedName: Zenject.MemoryPool<TParam1, TParam2, TValue>.Zenject.IFactory<TParam1, TParam2, TValue>.Create
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TParam1
        nameWithType: TParam1
        qualifiedName: TParam1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TParam2
        nameWithType: TParam2
        qualifiedName: TParam2
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPool`3.Zenject#IFactory{TParam1,TParam2,TValue}#Create(`0,`1)
        name: Zenject.IFactory<TParam1,TParam2,TValue>.Create
        nameWithType: MemoryPool(Of TParam1, TParam2, TValue).Zenject.IFactory<TParam1,TParam2,TValue>.Create
        qualifiedName: Zenject.MemoryPool(Of TParam1, TParam2, TValue).Zenject.IFactory<TParam1,TParam2,TValue>.Create
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TParam1
        nameWithType: TParam1
        qualifiedName: TParam1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TParam2
        nameWithType: TParam2
        qualifiedName: TParam2
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.MemoryPool`3.Zenject#IFactory{TParam1,TParam2,TValue}#Create(`0,`1)
  ? Zenject.MemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}.Zenject#IFactory{TParam1,TParam2,TValue}#Create(System.Action{System.Object},Zenject.SignalDeclaration)
  : name:
      CSharp:
      - id: Zenject.MemoryPool`3.Zenject#IFactory{TParam1,TParam2,TValue}#Create(`0,`1)
        name: IFactory<Action<Object>, SignalDeclaration, SignalSubscription>.Create
        nameWithType: MemoryPool<Action<Object>, SignalDeclaration, SignalSubscription>.IFactory<Action<Object>, SignalDeclaration, SignalSubscription>.Create
        qualifiedName: Zenject.MemoryPool<System.Action<System.Object>, Zenject.SignalDeclaration, Zenject.SignalSubscription>.Zenject.IFactory<System.Action<System.Object>, Zenject.SignalDeclaration, Zenject.SignalSubscription>.Create
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPool`3.Zenject#IFactory{TParam1,TParam2,TValue}#Create(`0,`1)
        name: Zenject.IFactory<TParam1,TParam2,TValue>.Create
        nameWithType: MemoryPool(Of Action(Of Object), SignalDeclaration, SignalSubscription).Zenject.IFactory<TParam1,TParam2,TValue>.Create
        qualifiedName: Zenject.MemoryPool(Of System.Action(Of System.Object), Zenject.SignalDeclaration, Zenject.SignalSubscription).Zenject.IFactory<TParam1,TParam2,TValue>.Create
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.MemoryPool`3.Zenject#IFactory{TParam1,TParam2,TValue}#Create(`0,`1)
    parent: Zenject.MemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}
    commentId: M:Zenject.MemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}.Zenject#IFactory{TParam1,TParam2,TValue}#Create(System.Action{System.Object},Zenject.SignalDeclaration)
  Zenject.MemoryPoolBase`1:
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1
        name: MemoryPoolBase
        nameWithType: MemoryPoolBase
        qualifiedName: Zenject.MemoryPoolBase
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TContract
        nameWithType: TContract
        qualifiedName: TContract
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.MemoryPoolBase`1
        name: MemoryPoolBase
        nameWithType: MemoryPoolBase
        qualifiedName: Zenject.MemoryPoolBase
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TContract
        nameWithType: TContract
        qualifiedName: TContract
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Zenject.MemoryPoolBase`1
  Zenject.MemoryPoolBase{Zenject.SignalSubscription}:
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1
        name: MemoryPoolBase
        nameWithType: MemoryPoolBase
        qualifiedName: Zenject.MemoryPoolBase
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.MemoryPoolBase`1
        name: MemoryPoolBase
        nameWithType: MemoryPoolBase
        qualifiedName: Zenject.MemoryPoolBase
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.MemoryPoolBase`1
    parent: Zenject
    commentId: T:Zenject.MemoryPoolBase{Zenject.SignalSubscription}
  Zenject.MemoryPoolBase`1.Container:
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.Container
        name: Container
        nameWithType: MemoryPoolBase<TContract>.Container
        qualifiedName: Zenject.MemoryPoolBase<TContract>.Container
      VB:
      - id: Zenject.MemoryPoolBase`1.Container
        name: Container
        nameWithType: MemoryPoolBase(Of TContract).Container
        qualifiedName: Zenject.MemoryPoolBase(Of TContract).Container
    isDefinition: true
    commentId: P:Zenject.MemoryPoolBase`1.Container
  Zenject.MemoryPoolBase{Zenject.SignalSubscription}.Container:
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.Container
        name: Container
        nameWithType: MemoryPoolBase<SignalSubscription>.Container
        qualifiedName: Zenject.MemoryPoolBase<Zenject.SignalSubscription>.Container
      VB:
      - id: Zenject.MemoryPoolBase`1.Container
        name: Container
        nameWithType: MemoryPoolBase(Of SignalSubscription).Container
        qualifiedName: Zenject.MemoryPoolBase(Of Zenject.SignalSubscription).Container
    isDefinition: false
    definition: Zenject.MemoryPoolBase`1.Container
    parent: Zenject.MemoryPoolBase{Zenject.SignalSubscription}
    commentId: P:Zenject.MemoryPoolBase{Zenject.SignalSubscription}.Container
  Zenject.MemoryPoolBase`1.InactiveItems:
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.InactiveItems
        name: InactiveItems
        nameWithType: MemoryPoolBase<TContract>.InactiveItems
        qualifiedName: Zenject.MemoryPoolBase<TContract>.InactiveItems
      VB:
      - id: Zenject.MemoryPoolBase`1.InactiveItems
        name: InactiveItems
        nameWithType: MemoryPoolBase(Of TContract).InactiveItems
        qualifiedName: Zenject.MemoryPoolBase(Of TContract).InactiveItems
    isDefinition: true
    commentId: P:Zenject.MemoryPoolBase`1.InactiveItems
  Zenject.MemoryPoolBase{Zenject.SignalSubscription}.InactiveItems:
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.InactiveItems
        name: InactiveItems
        nameWithType: MemoryPoolBase<SignalSubscription>.InactiveItems
        qualifiedName: Zenject.MemoryPoolBase<Zenject.SignalSubscription>.InactiveItems
      VB:
      - id: Zenject.MemoryPoolBase`1.InactiveItems
        name: InactiveItems
        nameWithType: MemoryPoolBase(Of SignalSubscription).InactiveItems
        qualifiedName: Zenject.MemoryPoolBase(Of Zenject.SignalSubscription).InactiveItems
    isDefinition: false
    definition: Zenject.MemoryPoolBase`1.InactiveItems
    parent: Zenject.MemoryPoolBase{Zenject.SignalSubscription}
    commentId: P:Zenject.MemoryPoolBase{Zenject.SignalSubscription}.InactiveItems
  Zenject.MemoryPoolBase`1.NumTotal:
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.NumTotal
        name: NumTotal
        nameWithType: MemoryPoolBase<TContract>.NumTotal
        qualifiedName: Zenject.MemoryPoolBase<TContract>.NumTotal
      VB:
      - id: Zenject.MemoryPoolBase`1.NumTotal
        name: NumTotal
        nameWithType: MemoryPoolBase(Of TContract).NumTotal
        qualifiedName: Zenject.MemoryPoolBase(Of TContract).NumTotal
    isDefinition: true
    commentId: P:Zenject.MemoryPoolBase`1.NumTotal
  Zenject.MemoryPoolBase{Zenject.SignalSubscription}.NumTotal:
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.NumTotal
        name: NumTotal
        nameWithType: MemoryPoolBase<SignalSubscription>.NumTotal
        qualifiedName: Zenject.MemoryPoolBase<Zenject.SignalSubscription>.NumTotal
      VB:
      - id: Zenject.MemoryPoolBase`1.NumTotal
        name: NumTotal
        nameWithType: MemoryPoolBase(Of SignalSubscription).NumTotal
        qualifiedName: Zenject.MemoryPoolBase(Of Zenject.SignalSubscription).NumTotal
    isDefinition: false
    definition: Zenject.MemoryPoolBase`1.NumTotal
    parent: Zenject.MemoryPoolBase{Zenject.SignalSubscription}
    commentId: P:Zenject.MemoryPoolBase{Zenject.SignalSubscription}.NumTotal
  Zenject.MemoryPoolBase`1.NumInactive:
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.NumInactive
        name: NumInactive
        nameWithType: MemoryPoolBase<TContract>.NumInactive
        qualifiedName: Zenject.MemoryPoolBase<TContract>.NumInactive
      VB:
      - id: Zenject.MemoryPoolBase`1.NumInactive
        name: NumInactive
        nameWithType: MemoryPoolBase(Of TContract).NumInactive
        qualifiedName: Zenject.MemoryPoolBase(Of TContract).NumInactive
    isDefinition: true
    commentId: P:Zenject.MemoryPoolBase`1.NumInactive
  Zenject.MemoryPoolBase{Zenject.SignalSubscription}.NumInactive:
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.NumInactive
        name: NumInactive
        nameWithType: MemoryPoolBase<SignalSubscription>.NumInactive
        qualifiedName: Zenject.MemoryPoolBase<Zenject.SignalSubscription>.NumInactive
      VB:
      - id: Zenject.MemoryPoolBase`1.NumInactive
        name: NumInactive
        nameWithType: MemoryPoolBase(Of SignalSubscription).NumInactive
        qualifiedName: Zenject.MemoryPoolBase(Of Zenject.SignalSubscription).NumInactive
    isDefinition: false
    definition: Zenject.MemoryPoolBase`1.NumInactive
    parent: Zenject.MemoryPoolBase{Zenject.SignalSubscription}
    commentId: P:Zenject.MemoryPoolBase{Zenject.SignalSubscription}.NumInactive
  Zenject.MemoryPoolBase`1.NumActive:
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.NumActive
        name: NumActive
        nameWithType: MemoryPoolBase<TContract>.NumActive
        qualifiedName: Zenject.MemoryPoolBase<TContract>.NumActive
      VB:
      - id: Zenject.MemoryPoolBase`1.NumActive
        name: NumActive
        nameWithType: MemoryPoolBase(Of TContract).NumActive
        qualifiedName: Zenject.MemoryPoolBase(Of TContract).NumActive
    isDefinition: true
    commentId: P:Zenject.MemoryPoolBase`1.NumActive
  Zenject.MemoryPoolBase{Zenject.SignalSubscription}.NumActive:
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.NumActive
        name: NumActive
        nameWithType: MemoryPoolBase<SignalSubscription>.NumActive
        qualifiedName: Zenject.MemoryPoolBase<Zenject.SignalSubscription>.NumActive
      VB:
      - id: Zenject.MemoryPoolBase`1.NumActive
        name: NumActive
        nameWithType: MemoryPoolBase(Of SignalSubscription).NumActive
        qualifiedName: Zenject.MemoryPoolBase(Of Zenject.SignalSubscription).NumActive
    isDefinition: false
    definition: Zenject.MemoryPoolBase`1.NumActive
    parent: Zenject.MemoryPoolBase{Zenject.SignalSubscription}
    commentId: P:Zenject.MemoryPoolBase{Zenject.SignalSubscription}.NumActive
  Zenject.MemoryPoolBase`1.ItemType:
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.ItemType
        name: ItemType
        nameWithType: MemoryPoolBase<TContract>.ItemType
        qualifiedName: Zenject.MemoryPoolBase<TContract>.ItemType
      VB:
      - id: Zenject.MemoryPoolBase`1.ItemType
        name: ItemType
        nameWithType: MemoryPoolBase(Of TContract).ItemType
        qualifiedName: Zenject.MemoryPoolBase(Of TContract).ItemType
    isDefinition: true
    commentId: P:Zenject.MemoryPoolBase`1.ItemType
  Zenject.MemoryPoolBase{Zenject.SignalSubscription}.ItemType:
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.ItemType
        name: ItemType
        nameWithType: MemoryPoolBase<SignalSubscription>.ItemType
        qualifiedName: Zenject.MemoryPoolBase<Zenject.SignalSubscription>.ItemType
      VB:
      - id: Zenject.MemoryPoolBase`1.ItemType
        name: ItemType
        nameWithType: MemoryPoolBase(Of SignalSubscription).ItemType
        qualifiedName: Zenject.MemoryPoolBase(Of Zenject.SignalSubscription).ItemType
    isDefinition: false
    definition: Zenject.MemoryPoolBase`1.ItemType
    parent: Zenject.MemoryPoolBase{Zenject.SignalSubscription}
    commentId: P:Zenject.MemoryPoolBase{Zenject.SignalSubscription}.ItemType
  Zenject.MemoryPoolBase`1.Dispose:
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.Dispose
        name: Dispose
        nameWithType: MemoryPoolBase<TContract>.Dispose
        qualifiedName: Zenject.MemoryPoolBase<TContract>.Dispose
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.Dispose
        name: Dispose
        nameWithType: MemoryPoolBase(Of TContract).Dispose
        qualifiedName: Zenject.MemoryPoolBase(Of TContract).Dispose
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.MemoryPoolBase`1.Dispose
  Zenject.MemoryPoolBase{Zenject.SignalSubscription}.Dispose:
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.Dispose
        name: Dispose
        nameWithType: MemoryPoolBase<SignalSubscription>.Dispose
        qualifiedName: Zenject.MemoryPoolBase<Zenject.SignalSubscription>.Dispose
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.Dispose
        name: Dispose
        nameWithType: MemoryPoolBase(Of SignalSubscription).Dispose
        qualifiedName: Zenject.MemoryPoolBase(Of Zenject.SignalSubscription).Dispose
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.MemoryPoolBase`1.Dispose
    parent: Zenject.MemoryPoolBase{Zenject.SignalSubscription}
    commentId: M:Zenject.MemoryPoolBase{Zenject.SignalSubscription}.Dispose
  Zenject.MemoryPoolBase`1.Zenject#IMemoryPool#Despawn(System.Object):
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.Zenject#IMemoryPool#Despawn(System.Object)
        name: IMemoryPool.Despawn
        nameWithType: MemoryPoolBase<TContract>.IMemoryPool.Despawn
        qualifiedName: Zenject.MemoryPoolBase<TContract>.Zenject.IMemoryPool.Despawn
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.Zenject#IMemoryPool#Despawn(System.Object)
        name: Zenject.IMemoryPool.Despawn
        nameWithType: MemoryPoolBase(Of TContract).Zenject.IMemoryPool.Despawn
        qualifiedName: Zenject.MemoryPoolBase(Of TContract).Zenject.IMemoryPool.Despawn
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.MemoryPoolBase`1.Zenject#IMemoryPool#Despawn(System.Object)
  Zenject.MemoryPoolBase{Zenject.SignalSubscription}.Zenject#IMemoryPool#Despawn(System.Object):
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.Zenject#IMemoryPool#Despawn(System.Object)
        name: IMemoryPool.Despawn
        nameWithType: MemoryPoolBase<SignalSubscription>.IMemoryPool.Despawn
        qualifiedName: Zenject.MemoryPoolBase<Zenject.SignalSubscription>.Zenject.IMemoryPool.Despawn
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.Zenject#IMemoryPool#Despawn(System.Object)
        name: Zenject.IMemoryPool.Despawn
        nameWithType: MemoryPoolBase(Of SignalSubscription).Zenject.IMemoryPool.Despawn
        qualifiedName: Zenject.MemoryPoolBase(Of Zenject.SignalSubscription).Zenject.IMemoryPool.Despawn
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.MemoryPoolBase`1.Zenject#IMemoryPool#Despawn(System.Object)
    parent: Zenject.MemoryPoolBase{Zenject.SignalSubscription}
    commentId: M:Zenject.MemoryPoolBase{Zenject.SignalSubscription}.Zenject#IMemoryPool#Despawn(System.Object)
  Zenject.MemoryPoolBase`1.Despawn(`0):
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.Despawn(`0)
        name: Despawn
        nameWithType: MemoryPoolBase<TContract>.Despawn
        qualifiedName: Zenject.MemoryPoolBase<TContract>.Despawn
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TContract
        nameWithType: TContract
        qualifiedName: TContract
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.Despawn(`0)
        name: Despawn
        nameWithType: MemoryPoolBase(Of TContract).Despawn
        qualifiedName: Zenject.MemoryPoolBase(Of TContract).Despawn
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TContract
        nameWithType: TContract
        qualifiedName: TContract
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.MemoryPoolBase`1.Despawn(`0)
  Zenject.MemoryPoolBase{Zenject.SignalSubscription}.Despawn(Zenject.SignalSubscription):
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.Despawn(`0)
        name: Despawn
        nameWithType: MemoryPoolBase<SignalSubscription>.Despawn
        qualifiedName: Zenject.MemoryPoolBase<Zenject.SignalSubscription>.Despawn
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.Despawn(`0)
        name: Despawn
        nameWithType: MemoryPoolBase(Of SignalSubscription).Despawn
        qualifiedName: Zenject.MemoryPoolBase(Of Zenject.SignalSubscription).Despawn
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.MemoryPoolBase`1.Despawn(`0)
    parent: Zenject.MemoryPoolBase{Zenject.SignalSubscription}
    commentId: M:Zenject.MemoryPoolBase{Zenject.SignalSubscription}.Despawn(Zenject.SignalSubscription)
  Zenject.MemoryPoolBase`1.Zenject#IValidatable#Validate:
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.Zenject#IValidatable#Validate
        name: IValidatable.Validate
        nameWithType: MemoryPoolBase<TContract>.IValidatable.Validate
        qualifiedName: Zenject.MemoryPoolBase<TContract>.Zenject.IValidatable.Validate
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.Zenject#IValidatable#Validate
        name: Zenject.IValidatable.Validate
        nameWithType: MemoryPoolBase(Of TContract).Zenject.IValidatable.Validate
        qualifiedName: Zenject.MemoryPoolBase(Of TContract).Zenject.IValidatable.Validate
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.MemoryPoolBase`1.Zenject#IValidatable#Validate
  Zenject.MemoryPoolBase{Zenject.SignalSubscription}.Zenject#IValidatable#Validate:
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.Zenject#IValidatable#Validate
        name: IValidatable.Validate
        nameWithType: MemoryPoolBase<SignalSubscription>.IValidatable.Validate
        qualifiedName: Zenject.MemoryPoolBase<Zenject.SignalSubscription>.Zenject.IValidatable.Validate
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.Zenject#IValidatable#Validate
        name: Zenject.IValidatable.Validate
        nameWithType: MemoryPoolBase(Of SignalSubscription).Zenject.IValidatable.Validate
        qualifiedName: Zenject.MemoryPoolBase(Of Zenject.SignalSubscription).Zenject.IValidatable.Validate
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.MemoryPoolBase`1.Zenject#IValidatable#Validate
    parent: Zenject.MemoryPoolBase{Zenject.SignalSubscription}
    commentId: M:Zenject.MemoryPoolBase{Zenject.SignalSubscription}.Zenject#IValidatable#Validate
  Zenject.MemoryPoolBase`1.Clear:
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.Clear
        name: Clear
        nameWithType: MemoryPoolBase<TContract>.Clear
        qualifiedName: Zenject.MemoryPoolBase<TContract>.Clear
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.Clear
        name: Clear
        nameWithType: MemoryPoolBase(Of TContract).Clear
        qualifiedName: Zenject.MemoryPoolBase(Of TContract).Clear
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.MemoryPoolBase`1.Clear
  Zenject.MemoryPoolBase{Zenject.SignalSubscription}.Clear:
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.Clear
        name: Clear
        nameWithType: MemoryPoolBase<SignalSubscription>.Clear
        qualifiedName: Zenject.MemoryPoolBase<Zenject.SignalSubscription>.Clear
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.Clear
        name: Clear
        nameWithType: MemoryPoolBase(Of SignalSubscription).Clear
        qualifiedName: Zenject.MemoryPoolBase(Of Zenject.SignalSubscription).Clear
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.MemoryPoolBase`1.Clear
    parent: Zenject.MemoryPoolBase{Zenject.SignalSubscription}
    commentId: M:Zenject.MemoryPoolBase{Zenject.SignalSubscription}.Clear
  Zenject.MemoryPoolBase`1.ShrinkBy(System.Int32):
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.ShrinkBy(System.Int32)
        name: ShrinkBy
        nameWithType: MemoryPoolBase<TContract>.ShrinkBy
        qualifiedName: Zenject.MemoryPoolBase<TContract>.ShrinkBy
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.ShrinkBy(System.Int32)
        name: ShrinkBy
        nameWithType: MemoryPoolBase(Of TContract).ShrinkBy
        qualifiedName: Zenject.MemoryPoolBase(Of TContract).ShrinkBy
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.MemoryPoolBase`1.ShrinkBy(System.Int32)
  Zenject.MemoryPoolBase{Zenject.SignalSubscription}.ShrinkBy(System.Int32):
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.ShrinkBy(System.Int32)
        name: ShrinkBy
        nameWithType: MemoryPoolBase<SignalSubscription>.ShrinkBy
        qualifiedName: Zenject.MemoryPoolBase<Zenject.SignalSubscription>.ShrinkBy
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.ShrinkBy(System.Int32)
        name: ShrinkBy
        nameWithType: MemoryPoolBase(Of SignalSubscription).ShrinkBy
        qualifiedName: Zenject.MemoryPoolBase(Of Zenject.SignalSubscription).ShrinkBy
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.MemoryPoolBase`1.ShrinkBy(System.Int32)
    parent: Zenject.MemoryPoolBase{Zenject.SignalSubscription}
    commentId: M:Zenject.MemoryPoolBase{Zenject.SignalSubscription}.ShrinkBy(System.Int32)
  Zenject.MemoryPoolBase`1.ExpandBy(System.Int32):
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.ExpandBy(System.Int32)
        name: ExpandBy
        nameWithType: MemoryPoolBase<TContract>.ExpandBy
        qualifiedName: Zenject.MemoryPoolBase<TContract>.ExpandBy
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.ExpandBy(System.Int32)
        name: ExpandBy
        nameWithType: MemoryPoolBase(Of TContract).ExpandBy
        qualifiedName: Zenject.MemoryPoolBase(Of TContract).ExpandBy
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.MemoryPoolBase`1.ExpandBy(System.Int32)
  Zenject.MemoryPoolBase{Zenject.SignalSubscription}.ExpandBy(System.Int32):
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.ExpandBy(System.Int32)
        name: ExpandBy
        nameWithType: MemoryPoolBase<SignalSubscription>.ExpandBy
        qualifiedName: Zenject.MemoryPoolBase<Zenject.SignalSubscription>.ExpandBy
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.ExpandBy(System.Int32)
        name: ExpandBy
        nameWithType: MemoryPoolBase(Of SignalSubscription).ExpandBy
        qualifiedName: Zenject.MemoryPoolBase(Of Zenject.SignalSubscription).ExpandBy
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.MemoryPoolBase`1.ExpandBy(System.Int32)
    parent: Zenject.MemoryPoolBase{Zenject.SignalSubscription}
    commentId: M:Zenject.MemoryPoolBase{Zenject.SignalSubscription}.ExpandBy(System.Int32)
  Zenject.MemoryPoolBase`1.GetInternal:
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.GetInternal
        name: GetInternal
        nameWithType: MemoryPoolBase<TContract>.GetInternal
        qualifiedName: Zenject.MemoryPoolBase<TContract>.GetInternal
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.GetInternal
        name: GetInternal
        nameWithType: MemoryPoolBase(Of TContract).GetInternal
        qualifiedName: Zenject.MemoryPoolBase(Of TContract).GetInternal
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.MemoryPoolBase`1.GetInternal
  Zenject.MemoryPoolBase{Zenject.SignalSubscription}.GetInternal:
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.GetInternal
        name: GetInternal
        nameWithType: MemoryPoolBase<SignalSubscription>.GetInternal
        qualifiedName: Zenject.MemoryPoolBase<Zenject.SignalSubscription>.GetInternal
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.GetInternal
        name: GetInternal
        nameWithType: MemoryPoolBase(Of SignalSubscription).GetInternal
        qualifiedName: Zenject.MemoryPoolBase(Of Zenject.SignalSubscription).GetInternal
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.MemoryPoolBase`1.GetInternal
    parent: Zenject.MemoryPoolBase{Zenject.SignalSubscription}
    commentId: M:Zenject.MemoryPoolBase{Zenject.SignalSubscription}.GetInternal
  Zenject.MemoryPoolBase`1.Resize(System.Int32):
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.Resize(System.Int32)
        name: Resize
        nameWithType: MemoryPoolBase<TContract>.Resize
        qualifiedName: Zenject.MemoryPoolBase<TContract>.Resize
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.Resize(System.Int32)
        name: Resize
        nameWithType: MemoryPoolBase(Of TContract).Resize
        qualifiedName: Zenject.MemoryPoolBase(Of TContract).Resize
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.MemoryPoolBase`1.Resize(System.Int32)
  Zenject.MemoryPoolBase{Zenject.SignalSubscription}.Resize(System.Int32):
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.Resize(System.Int32)
        name: Resize
        nameWithType: MemoryPoolBase<SignalSubscription>.Resize
        qualifiedName: Zenject.MemoryPoolBase<Zenject.SignalSubscription>.Resize
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.Resize(System.Int32)
        name: Resize
        nameWithType: MemoryPoolBase(Of SignalSubscription).Resize
        qualifiedName: Zenject.MemoryPoolBase(Of Zenject.SignalSubscription).Resize
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.MemoryPoolBase`1.Resize(System.Int32)
    parent: Zenject.MemoryPoolBase{Zenject.SignalSubscription}
    commentId: M:Zenject.MemoryPoolBase{Zenject.SignalSubscription}.Resize(System.Int32)
  Zenject.MemoryPoolBase`1.OnDespawned(`0):
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.OnDespawned(`0)
        name: OnDespawned
        nameWithType: MemoryPoolBase<TContract>.OnDespawned
        qualifiedName: Zenject.MemoryPoolBase<TContract>.OnDespawned
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TContract
        nameWithType: TContract
        qualifiedName: TContract
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.OnDespawned(`0)
        name: OnDespawned
        nameWithType: MemoryPoolBase(Of TContract).OnDespawned
        qualifiedName: Zenject.MemoryPoolBase(Of TContract).OnDespawned
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TContract
        nameWithType: TContract
        qualifiedName: TContract
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.MemoryPoolBase`1.OnDespawned(`0)
  Zenject.MemoryPoolBase{Zenject.SignalSubscription}.OnDespawned(Zenject.SignalSubscription):
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.OnDespawned(`0)
        name: OnDespawned
        nameWithType: MemoryPoolBase<SignalSubscription>.OnDespawned
        qualifiedName: Zenject.MemoryPoolBase<Zenject.SignalSubscription>.OnDespawned
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.OnDespawned(`0)
        name: OnDespawned
        nameWithType: MemoryPoolBase(Of SignalSubscription).OnDespawned
        qualifiedName: Zenject.MemoryPoolBase(Of Zenject.SignalSubscription).OnDespawned
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.MemoryPoolBase`1.OnDespawned(`0)
    parent: Zenject.MemoryPoolBase{Zenject.SignalSubscription}
    commentId: M:Zenject.MemoryPoolBase{Zenject.SignalSubscription}.OnDespawned(Zenject.SignalSubscription)
  Zenject.MemoryPoolBase`1.OnSpawned(`0):
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.OnSpawned(`0)
        name: OnSpawned
        nameWithType: MemoryPoolBase<TContract>.OnSpawned
        qualifiedName: Zenject.MemoryPoolBase<TContract>.OnSpawned
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TContract
        nameWithType: TContract
        qualifiedName: TContract
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.OnSpawned(`0)
        name: OnSpawned
        nameWithType: MemoryPoolBase(Of TContract).OnSpawned
        qualifiedName: Zenject.MemoryPoolBase(Of TContract).OnSpawned
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TContract
        nameWithType: TContract
        qualifiedName: TContract
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.MemoryPoolBase`1.OnSpawned(`0)
  Zenject.MemoryPoolBase{Zenject.SignalSubscription}.OnSpawned(Zenject.SignalSubscription):
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.OnSpawned(`0)
        name: OnSpawned
        nameWithType: MemoryPoolBase<SignalSubscription>.OnSpawned
        qualifiedName: Zenject.MemoryPoolBase<Zenject.SignalSubscription>.OnSpawned
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.OnSpawned(`0)
        name: OnSpawned
        nameWithType: MemoryPoolBase(Of SignalSubscription).OnSpawned
        qualifiedName: Zenject.MemoryPoolBase(Of Zenject.SignalSubscription).OnSpawned
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.MemoryPoolBase`1.OnSpawned(`0)
    parent: Zenject.MemoryPoolBase{Zenject.SignalSubscription}
    commentId: M:Zenject.MemoryPoolBase{Zenject.SignalSubscription}.OnSpawned(Zenject.SignalSubscription)
  Zenject.MemoryPoolBase`1.OnCreated(`0):
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.OnCreated(`0)
        name: OnCreated
        nameWithType: MemoryPoolBase<TContract>.OnCreated
        qualifiedName: Zenject.MemoryPoolBase<TContract>.OnCreated
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TContract
        nameWithType: TContract
        qualifiedName: TContract
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.OnCreated(`0)
        name: OnCreated
        nameWithType: MemoryPoolBase(Of TContract).OnCreated
        qualifiedName: Zenject.MemoryPoolBase(Of TContract).OnCreated
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TContract
        nameWithType: TContract
        qualifiedName: TContract
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.MemoryPoolBase`1.OnCreated(`0)
  Zenject.MemoryPoolBase{Zenject.SignalSubscription}.OnCreated(Zenject.SignalSubscription):
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.OnCreated(`0)
        name: OnCreated
        nameWithType: MemoryPoolBase<SignalSubscription>.OnCreated
        qualifiedName: Zenject.MemoryPoolBase<Zenject.SignalSubscription>.OnCreated
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.OnCreated(`0)
        name: OnCreated
        nameWithType: MemoryPoolBase(Of SignalSubscription).OnCreated
        qualifiedName: Zenject.MemoryPoolBase(Of Zenject.SignalSubscription).OnCreated
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.MemoryPoolBase`1.OnCreated(`0)
    parent: Zenject.MemoryPoolBase{Zenject.SignalSubscription}
    commentId: M:Zenject.MemoryPoolBase{Zenject.SignalSubscription}.OnCreated(Zenject.SignalSubscription)
  Zenject.MemoryPoolBase`1.OnDestroyed(`0):
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.OnDestroyed(`0)
        name: OnDestroyed
        nameWithType: MemoryPoolBase<TContract>.OnDestroyed
        qualifiedName: Zenject.MemoryPoolBase<TContract>.OnDestroyed
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TContract
        nameWithType: TContract
        qualifiedName: TContract
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.OnDestroyed(`0)
        name: OnDestroyed
        nameWithType: MemoryPoolBase(Of TContract).OnDestroyed
        qualifiedName: Zenject.MemoryPoolBase(Of TContract).OnDestroyed
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TContract
        nameWithType: TContract
        qualifiedName: TContract
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.MemoryPoolBase`1.OnDestroyed(`0)
  Zenject.MemoryPoolBase{Zenject.SignalSubscription}.OnDestroyed(Zenject.SignalSubscription):
    name:
      CSharp:
      - id: Zenject.MemoryPoolBase`1.OnDestroyed(`0)
        name: OnDestroyed
        nameWithType: MemoryPoolBase<SignalSubscription>.OnDestroyed
        qualifiedName: Zenject.MemoryPoolBase<Zenject.SignalSubscription>.OnDestroyed
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.MemoryPoolBase`1.OnDestroyed(`0)
        name: OnDestroyed
        nameWithType: MemoryPoolBase(Of SignalSubscription).OnDestroyed
        qualifiedName: Zenject.MemoryPoolBase(Of Zenject.SignalSubscription).OnDestroyed
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.MemoryPoolBase`1.OnDestroyed(`0)
    parent: Zenject.MemoryPoolBase{Zenject.SignalSubscription}
    commentId: M:Zenject.MemoryPoolBase{Zenject.SignalSubscription}.OnDestroyed(Zenject.SignalSubscription)
  Zenject.IMemoryPool`3:
    name:
      CSharp:
      - id: Zenject.IMemoryPool`3
        name: IMemoryPool
        nameWithType: IMemoryPool
        qualifiedName: Zenject.IMemoryPool
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TParam1
        nameWithType: TParam1
        qualifiedName: TParam1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TParam2
        nameWithType: TParam2
        qualifiedName: TParam2
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.IMemoryPool`3
        name: IMemoryPool
        nameWithType: IMemoryPool
        qualifiedName: Zenject.IMemoryPool
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TParam1
        nameWithType: TParam1
        qualifiedName: TParam1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TParam2
        nameWithType: TParam2
        qualifiedName: TParam2
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Zenject.IMemoryPool`3
  Zenject.IMemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}:
    name:
      CSharp:
      - id: Zenject.IMemoryPool`3
        name: IMemoryPool
        nameWithType: IMemoryPool
        qualifiedName: Zenject.IMemoryPool
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.IMemoryPool`3
        name: IMemoryPool
        nameWithType: IMemoryPool
        qualifiedName: Zenject.IMemoryPool
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.IMemoryPool`3
    parent: Zenject
    commentId: T:Zenject.IMemoryPool{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}
  Zenject.IDespawnableMemoryPool`1:
    name:
      CSharp:
      - id: Zenject.IDespawnableMemoryPool`1
        name: IDespawnableMemoryPool
        nameWithType: IDespawnableMemoryPool
        qualifiedName: Zenject.IDespawnableMemoryPool
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.IDespawnableMemoryPool`1
        name: IDespawnableMemoryPool
        nameWithType: IDespawnableMemoryPool
        qualifiedName: Zenject.IDespawnableMemoryPool
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Zenject.IDespawnableMemoryPool`1
  Zenject.IDespawnableMemoryPool{Zenject.SignalSubscription}:
    name:
      CSharp:
      - id: Zenject.IDespawnableMemoryPool`1
        name: IDespawnableMemoryPool
        nameWithType: IDespawnableMemoryPool
        qualifiedName: Zenject.IDespawnableMemoryPool
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.IDespawnableMemoryPool`1
        name: IDespawnableMemoryPool
        nameWithType: IDespawnableMemoryPool
        qualifiedName: Zenject.IDespawnableMemoryPool
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.IDespawnableMemoryPool`1
    parent: Zenject
    commentId: T:Zenject.IDespawnableMemoryPool{Zenject.SignalSubscription}
  Zenject.IMemoryPool:
    name:
      CSharp:
      - id: Zenject.IMemoryPool
        name: IMemoryPool
        nameWithType: IMemoryPool
        qualifiedName: Zenject.IMemoryPool
      VB:
      - id: Zenject.IMemoryPool
        name: IMemoryPool
        nameWithType: IMemoryPool
        qualifiedName: Zenject.IMemoryPool
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.IMemoryPool
  Zenject.IFactory`3:
    name:
      CSharp:
      - id: Zenject.IFactory`3
        name: IFactory
        nameWithType: IFactory
        qualifiedName: Zenject.IFactory
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TParam1
        nameWithType: TParam1
        qualifiedName: TParam1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TParam2
        nameWithType: TParam2
        qualifiedName: TParam2
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.IFactory`3
        name: IFactory
        nameWithType: IFactory
        qualifiedName: Zenject.IFactory
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TParam1
        nameWithType: TParam1
        qualifiedName: TParam1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TParam2
        nameWithType: TParam2
        qualifiedName: TParam2
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Zenject.IFactory`3
  Zenject.IFactory{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}:
    name:
      CSharp:
      - id: Zenject.IFactory`3
        name: IFactory
        nameWithType: IFactory
        qualifiedName: Zenject.IFactory
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.IFactory`3
        name: IFactory
        nameWithType: IFactory
        qualifiedName: Zenject.IFactory
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Zenject.SignalSubscription
        name: SignalSubscription
        nameWithType: SignalSubscription
        qualifiedName: Zenject.SignalSubscription
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.IFactory`3
    parent: Zenject
    commentId: T:Zenject.IFactory{System.Action{System.Object},Zenject.SignalDeclaration,Zenject.SignalSubscription}
  Zenject.SignalSubscription.Pool.ModestTree.LinqExtensions.Yield``1:
    name:
      CSharp:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield<SignalSubscription.Pool>
        nameWithType: LinqExtensions.Yield<SignalSubscription.Pool>
        qualifiedName: ModestTree.LinqExtensions.Yield<Zenject.SignalSubscription.Pool>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield(Of SignalSubscription.Pool)
        nameWithType: LinqExtensions.Yield(Of SignalSubscription.Pool)
        qualifiedName: ModestTree.LinqExtensions.Yield(Of Zenject.SignalSubscription.Pool)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: ModestTree.LinqExtensions.Yield``1(``0)
    parent: ModestTree.LinqExtensions
    commentId: M:ModestTree.LinqExtensions.Yield``1(``0)
  ? Zenject.SignalSubscription.Pool.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalSubscription.Pool,{TProperty}},UniRx.FrameCountType,System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged<SignalSubscription.Pool, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalSubscription.Pool, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalSubscription.Pool, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalSubscription.Pool
        name: SignalSubscription.Pool
        nameWithType: SignalSubscription.Pool
        qualifiedName: Zenject.SignalSubscription.Pool
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged(Of SignalSubscription.Pool, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalSubscription.Pool, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalSubscription.Pool, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalSubscription.Pool
        name: SignalSubscription.Pool
        nameWithType: SignalSubscription.Pool
        qualifiedName: Zenject.SignalSubscription.Pool
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
  ? Zenject.SignalSubscription.Pool.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalSubscription.Pool,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged<SignalSubscription.Pool, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalSubscription.Pool, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalSubscription.Pool, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalSubscription.Pool
        name: SignalSubscription.Pool
        nameWithType: SignalSubscription.Pool
        qualifiedName: Zenject.SignalSubscription.Pool
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged(Of SignalSubscription.Pool, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalSubscription.Pool, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalSubscription.Pool, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalSubscription.Pool
        name: SignalSubscription.Pool
        nameWithType: SignalSubscription.Pool
        qualifiedName: Zenject.SignalSubscription.Pool
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
  ? Zenject.SignalSubscription.Pool.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalSubscription.Pool,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged<SignalSubscription.Pool, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalSubscription.Pool, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalSubscription.Pool, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalSubscription.Pool
        name: SignalSubscription.Pool
        nameWithType: SignalSubscription.Pool
        qualifiedName: Zenject.SignalSubscription.Pool
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged(Of SignalSubscription.Pool, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalSubscription.Pool, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalSubscription.Pool, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalSubscription.Pool
        name: SignalSubscription.Pool
        nameWithType: SignalSubscription.Pool
        qualifiedName: Zenject.SignalSubscription.Pool
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
  System.ValueType:
    name:
      CSharp:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
      VB:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ValueType
  System.ValueType.ToString:
    name:
      CSharp:
      - id: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        qualifiedName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        qualifiedName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.ToString
  System.IEquatable`1:
    name:
      CSharp:
      - id: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: System.IEquatable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: System.IEquatable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.IEquatable`1
  System.IEquatable{Zenject.SignalSubscriptionId}:
    name:
      CSharp:
      - id: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: System.IEquatable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalSubscriptionId
        name: SignalSubscriptionId
        nameWithType: SignalSubscriptionId
        qualifiedName: Zenject.SignalSubscriptionId
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: System.IEquatable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalSubscriptionId
        name: SignalSubscriptionId
        nameWithType: SignalSubscriptionId
        qualifiedName: Zenject.SignalSubscriptionId
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.IEquatable`1
    parent: System
    commentId: T:System.IEquatable{Zenject.SignalSubscriptionId}
  Zenject.SignalSubscriptionId.ModestTree.LinqExtensions.Yield``1:
    name:
      CSharp:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield<SignalSubscriptionId>
        nameWithType: LinqExtensions.Yield<SignalSubscriptionId>
        qualifiedName: ModestTree.LinqExtensions.Yield<Zenject.SignalSubscriptionId>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield(Of SignalSubscriptionId)
        nameWithType: LinqExtensions.Yield(Of SignalSubscriptionId)
        qualifiedName: ModestTree.LinqExtensions.Yield(Of Zenject.SignalSubscriptionId)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: ModestTree.LinqExtensions.Yield``1(``0)
    parent: ModestTree.LinqExtensions
    commentId: M:ModestTree.LinqExtensions.Yield``1(``0)
  Zenject.SignalSubscriptionId.#ctor*:
    name:
      CSharp:
      - id: Zenject.SignalSubscriptionId.#ctor*
        name: SignalSubscriptionId
        nameWithType: SignalSubscriptionId.SignalSubscriptionId
        qualifiedName: Zenject.SignalSubscriptionId.SignalSubscriptionId
      VB:
      - id: Zenject.SignalSubscriptionId.#ctor*
        name: SignalSubscriptionId
        nameWithType: SignalSubscriptionId.SignalSubscriptionId
        qualifiedName: Zenject.SignalSubscriptionId.SignalSubscriptionId
    isDefinition: true
    commentId: Overload:Zenject.SignalSubscriptionId.#ctor
  Zenject.SignalSubscriptionId.SignalId*:
    name:
      CSharp:
      - id: Zenject.SignalSubscriptionId.SignalId*
        name: SignalId
        nameWithType: SignalSubscriptionId.SignalId
        qualifiedName: Zenject.SignalSubscriptionId.SignalId
      VB:
      - id: Zenject.SignalSubscriptionId.SignalId*
        name: SignalId
        nameWithType: SignalSubscriptionId.SignalId
        qualifiedName: Zenject.SignalSubscriptionId.SignalId
    isDefinition: true
    commentId: Overload:Zenject.SignalSubscriptionId.SignalId
  Zenject.SignalSubscriptionId.Callback*:
    name:
      CSharp:
      - id: Zenject.SignalSubscriptionId.Callback*
        name: Callback
        nameWithType: SignalSubscriptionId.Callback
        qualifiedName: Zenject.SignalSubscriptionId.Callback
      VB:
      - id: Zenject.SignalSubscriptionId.Callback*
        name: Callback
        nameWithType: SignalSubscriptionId.Callback
        qualifiedName: Zenject.SignalSubscriptionId.Callback
    isDefinition: true
    commentId: Overload:Zenject.SignalSubscriptionId.Callback
  System.ValueType.GetHashCode:
    name:
      CSharp:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        qualifiedName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        qualifiedName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.GetHashCode
  Zenject.SignalSubscriptionId.GetHashCode*:
    name:
      CSharp:
      - id: Zenject.SignalSubscriptionId.GetHashCode*
        name: GetHashCode
        nameWithType: SignalSubscriptionId.GetHashCode
        qualifiedName: Zenject.SignalSubscriptionId.GetHashCode
      VB:
      - id: Zenject.SignalSubscriptionId.GetHashCode*
        name: GetHashCode
        nameWithType: SignalSubscriptionId.GetHashCode
        qualifiedName: Zenject.SignalSubscriptionId.GetHashCode
    isDefinition: true
    commentId: Overload:Zenject.SignalSubscriptionId.GetHashCode
  System.ValueType.Equals(System.Object):
    name:
      CSharp:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        qualifiedName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        qualifiedName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.Equals(System.Object)
  Zenject.SignalSubscriptionId.Equals*:
    name:
      CSharp:
      - id: Zenject.SignalSubscriptionId.Equals*
        name: Equals
        nameWithType: SignalSubscriptionId.Equals
        qualifiedName: Zenject.SignalSubscriptionId.Equals
      VB:
      - id: Zenject.SignalSubscriptionId.Equals*
        name: Equals
        nameWithType: SignalSubscriptionId.Equals
        qualifiedName: Zenject.SignalSubscriptionId.Equals
    isDefinition: true
    commentId: Overload:Zenject.SignalSubscriptionId.Equals
  Zenject.SignalSubscriptionId:
    name:
      CSharp:
      - id: Zenject.SignalSubscriptionId
        name: SignalSubscriptionId
        nameWithType: SignalSubscriptionId
        qualifiedName: Zenject.SignalSubscriptionId
      VB:
      - id: Zenject.SignalSubscriptionId
        name: SignalSubscriptionId
        nameWithType: SignalSubscriptionId
        qualifiedName: Zenject.SignalSubscriptionId
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.SignalSubscriptionId
  System.IEquatable`1.Equals(`0):
    name:
      CSharp:
      - id: System.IEquatable`1.Equals(`0)
        name: Equals
        nameWithType: IEquatable<T>.Equals
        qualifiedName: System.IEquatable<T>.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.IEquatable`1.Equals(`0)
        name: Equals
        nameWithType: IEquatable(Of T).Equals
        qualifiedName: System.IEquatable(Of T).Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.IEquatable`1.Equals(`0)
  System.IEquatable{Zenject.SignalSubscriptionId}.Equals(Zenject.SignalSubscriptionId):
    name:
      CSharp:
      - id: System.IEquatable`1.Equals(`0)
        name: Equals
        nameWithType: IEquatable<SignalSubscriptionId>.Equals
        qualifiedName: System.IEquatable<Zenject.SignalSubscriptionId>.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Zenject.SignalSubscriptionId
        name: SignalSubscriptionId
        nameWithType: SignalSubscriptionId
        qualifiedName: Zenject.SignalSubscriptionId
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.IEquatable`1.Equals(`0)
        name: Equals
        nameWithType: IEquatable(Of SignalSubscriptionId).Equals
        qualifiedName: System.IEquatable(Of Zenject.SignalSubscriptionId).Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Zenject.SignalSubscriptionId
        name: SignalSubscriptionId
        nameWithType: SignalSubscriptionId
        qualifiedName: Zenject.SignalSubscriptionId
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.IEquatable`1.Equals(`0)
    parent: System.IEquatable{Zenject.SignalSubscriptionId}
    commentId: M:System.IEquatable{Zenject.SignalSubscriptionId}.Equals(Zenject.SignalSubscriptionId)
  Zenject.SignalSubscriptionId.op_Equality*:
    name:
      CSharp:
      - id: Zenject.SignalSubscriptionId.op_Equality*
        name: Equality
        nameWithType: SignalSubscriptionId.Equality
        qualifiedName: Zenject.SignalSubscriptionId.Equality
      VB:
      - id: Zenject.SignalSubscriptionId.op_Equality*
        name: Equality
        nameWithType: SignalSubscriptionId.Equality
        qualifiedName: Zenject.SignalSubscriptionId.Equality
    isDefinition: true
    commentId: Overload:Zenject.SignalSubscriptionId.op_Equality
  Zenject.SignalSubscriptionId.op_Inequality*:
    name:
      CSharp:
      - id: Zenject.SignalSubscriptionId.op_Inequality*
        name: Inequality
        nameWithType: SignalSubscriptionId.Inequality
        qualifiedName: Zenject.SignalSubscriptionId.Inequality
      VB:
      - id: Zenject.SignalSubscriptionId.op_Inequality*
        name: Inequality
        nameWithType: SignalSubscriptionId.Inequality
        qualifiedName: Zenject.SignalSubscriptionId.Inequality
    isDefinition: true
    commentId: Overload:Zenject.SignalSubscriptionId.op_Inequality
  Zenject.SignalBus.ModestTree.LinqExtensions.Yield``1:
    name:
      CSharp:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield<SignalBus>
        nameWithType: LinqExtensions.Yield<SignalBus>
        qualifiedName: ModestTree.LinqExtensions.Yield<Zenject.SignalBus>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield(Of SignalBus)
        nameWithType: LinqExtensions.Yield(Of SignalBus)
        qualifiedName: ModestTree.LinqExtensions.Yield(Of Zenject.SignalBus)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: ModestTree.LinqExtensions.Yield``1(``0)
    parent: ModestTree.LinqExtensions
    commentId: M:ModestTree.LinqExtensions.Yield``1(``0)
  ? Zenject.SignalBus.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalBus,{TProperty}},UniRx.FrameCountType,System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged<SignalBus, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalBus, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalBus, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalBus
        name: SignalBus
        nameWithType: SignalBus
        qualifiedName: Zenject.SignalBus
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged(Of SignalBus, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalBus, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalBus, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalBus
        name: SignalBus
        nameWithType: SignalBus
        qualifiedName: Zenject.SignalBus
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
  ? Zenject.SignalBus.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalBus,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged<SignalBus, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalBus, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalBus, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalBus
        name: SignalBus
        nameWithType: SignalBus
        qualifiedName: Zenject.SignalBus
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged(Of SignalBus, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalBus, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalBus, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalBus
        name: SignalBus
        nameWithType: SignalBus
        qualifiedName: Zenject.SignalBus
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
  ? Zenject.SignalBus.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalBus,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged<SignalBus, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalBus, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalBus, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalBus
        name: SignalBus
        nameWithType: SignalBus
        qualifiedName: Zenject.SignalBus
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged(Of SignalBus, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalBus, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalBus, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalBus
        name: SignalBus
        nameWithType: SignalBus
        qualifiedName: Zenject.SignalBus
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
  System.Collections.Generic.List{Zenject.SignalDeclaration}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalDeclaration
        name: SignalDeclaration
        nameWithType: SignalDeclaration
        qualifiedName: Zenject.SignalDeclaration
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Zenject.SignalDeclaration}
  Zenject.SignalBus.#ctor*:
    name:
      CSharp:
      - id: Zenject.SignalBus.#ctor*
        name: SignalBus
        nameWithType: SignalBus.SignalBus
        qualifiedName: Zenject.SignalBus.SignalBus
      VB:
      - id: Zenject.SignalBus.#ctor*
        name: SignalBus
        nameWithType: SignalBus.SignalBus
        qualifiedName: Zenject.SignalBus.SignalBus
    isDefinition: true
    commentId: Overload:Zenject.SignalBus.#ctor
  Zenject.SignalBus.ParentBus*:
    name:
      CSharp:
      - id: Zenject.SignalBus.ParentBus*
        name: ParentBus
        nameWithType: SignalBus.ParentBus
        qualifiedName: Zenject.SignalBus.ParentBus
      VB:
      - id: Zenject.SignalBus.ParentBus*
        name: ParentBus
        nameWithType: SignalBus.ParentBus
        qualifiedName: Zenject.SignalBus.ParentBus
    isDefinition: true
    commentId: Overload:Zenject.SignalBus.ParentBus
  Zenject.SignalBus.NumSubscribers*:
    name:
      CSharp:
      - id: Zenject.SignalBus.NumSubscribers*
        name: NumSubscribers
        nameWithType: SignalBus.NumSubscribers
        qualifiedName: Zenject.SignalBus.NumSubscribers
      VB:
      - id: Zenject.SignalBus.NumSubscribers*
        name: NumSubscribers
        nameWithType: SignalBus.NumSubscribers
        qualifiedName: Zenject.SignalBus.NumSubscribers
    isDefinition: true
    commentId: Overload:Zenject.SignalBus.NumSubscribers
  Zenject.SignalBus.AbstractFire*:
    name:
      CSharp:
      - id: Zenject.SignalBus.AbstractFire*
        name: AbstractFire
        nameWithType: SignalBus.AbstractFire
        qualifiedName: Zenject.SignalBus.AbstractFire
      VB:
      - id: Zenject.SignalBus.AbstractFire*
        name: AbstractFire
        nameWithType: SignalBus.AbstractFire
        qualifiedName: Zenject.SignalBus.AbstractFire
    isDefinition: true
    commentId: Overload:Zenject.SignalBus.AbstractFire
  TSignal:
    name:
      CSharp:
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      VB:
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
    isDefinition: true
  '{TSignal}':
    name:
      CSharp:
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
      VB:
      - name: TSignal
        nameWithType: TSignal
        qualifiedName: TSignal
    isDefinition: false
    definition: TSignal
    commentId: '!:TSignal'
  Zenject.SignalBus.AbstractFireId*:
    name:
      CSharp:
      - id: Zenject.SignalBus.AbstractFireId*
        name: AbstractFireId
        nameWithType: SignalBus.AbstractFireId
        qualifiedName: Zenject.SignalBus.AbstractFireId
      VB:
      - id: Zenject.SignalBus.AbstractFireId*
        name: AbstractFireId
        nameWithType: SignalBus.AbstractFireId
        qualifiedName: Zenject.SignalBus.AbstractFireId
    isDefinition: true
    commentId: Overload:Zenject.SignalBus.AbstractFireId
  Zenject.SignalBus.LateDispose*:
    name:
      CSharp:
      - id: Zenject.SignalBus.LateDispose*
        name: LateDispose
        nameWithType: SignalBus.LateDispose
        qualifiedName: Zenject.SignalBus.LateDispose
      VB:
      - id: Zenject.SignalBus.LateDispose*
        name: LateDispose
        nameWithType: SignalBus.LateDispose
        qualifiedName: Zenject.SignalBus.LateDispose
    isDefinition: true
    commentId: Overload:Zenject.SignalBus.LateDispose
  Zenject.SignalBus.FireId*:
    name:
      CSharp:
      - id: Zenject.SignalBus.FireId*
        name: FireId
        nameWithType: SignalBus.FireId
        qualifiedName: Zenject.SignalBus.FireId
      VB:
      - id: Zenject.SignalBus.FireId*
        name: FireId
        nameWithType: SignalBus.FireId
        qualifiedName: Zenject.SignalBus.FireId
    isDefinition: true
    commentId: Overload:Zenject.SignalBus.FireId
  Zenject.SignalBus.Fire*:
    name:
      CSharp:
      - id: Zenject.SignalBus.Fire*
        name: Fire
        nameWithType: SignalBus.Fire
        qualifiedName: Zenject.SignalBus.Fire
      VB:
      - id: Zenject.SignalBus.Fire*
        name: Fire
        nameWithType: SignalBus.Fire
        qualifiedName: Zenject.SignalBus.Fire
    isDefinition: true
    commentId: Overload:Zenject.SignalBus.Fire
  Zenject.SignalBus.IsSignalDeclared*:
    name:
      CSharp:
      - id: Zenject.SignalBus.IsSignalDeclared*
        name: IsSignalDeclared
        nameWithType: SignalBus.IsSignalDeclared
        qualifiedName: Zenject.SignalBus.IsSignalDeclared
      VB:
      - id: Zenject.SignalBus.IsSignalDeclared*
        name: IsSignalDeclared
        nameWithType: SignalBus.IsSignalDeclared
        qualifiedName: Zenject.SignalBus.IsSignalDeclared
    isDefinition: true
    commentId: Overload:Zenject.SignalBus.IsSignalDeclared
  Zenject.SignalBus.TryFireId*:
    name:
      CSharp:
      - id: Zenject.SignalBus.TryFireId*
        name: TryFireId
        nameWithType: SignalBus.TryFireId
        qualifiedName: Zenject.SignalBus.TryFireId
      VB:
      - id: Zenject.SignalBus.TryFireId*
        name: TryFireId
        nameWithType: SignalBus.TryFireId
        qualifiedName: Zenject.SignalBus.TryFireId
    isDefinition: true
    commentId: Overload:Zenject.SignalBus.TryFireId
  Zenject.SignalBus.TryFire*:
    name:
      CSharp:
      - id: Zenject.SignalBus.TryFire*
        name: TryFire
        nameWithType: SignalBus.TryFire
        qualifiedName: Zenject.SignalBus.TryFire
      VB:
      - id: Zenject.SignalBus.TryFire*
        name: TryFire
        nameWithType: SignalBus.TryFire
        qualifiedName: Zenject.SignalBus.TryFire
    isDefinition: true
    commentId: Overload:Zenject.SignalBus.TryFire
  Zenject.SignalBus.SubscribeId*:
    name:
      CSharp:
      - id: Zenject.SignalBus.SubscribeId*
        name: SubscribeId
        nameWithType: SignalBus.SubscribeId
        qualifiedName: Zenject.SignalBus.SubscribeId
      VB:
      - id: Zenject.SignalBus.SubscribeId*
        name: SubscribeId
        nameWithType: SignalBus.SubscribeId
        qualifiedName: Zenject.SignalBus.SubscribeId
    isDefinition: true
    commentId: Overload:Zenject.SignalBus.SubscribeId
  Zenject.SignalBus.Subscribe*:
    name:
      CSharp:
      - id: Zenject.SignalBus.Subscribe*
        name: Subscribe
        nameWithType: SignalBus.Subscribe
        qualifiedName: Zenject.SignalBus.Subscribe
      VB:
      - id: Zenject.SignalBus.Subscribe*
        name: Subscribe
        nameWithType: SignalBus.Subscribe
        qualifiedName: Zenject.SignalBus.Subscribe
    isDefinition: true
    commentId: Overload:Zenject.SignalBus.Subscribe
  Zenject.SignalBus.UnsubscribeId*:
    name:
      CSharp:
      - id: Zenject.SignalBus.UnsubscribeId*
        name: UnsubscribeId
        nameWithType: SignalBus.UnsubscribeId
        qualifiedName: Zenject.SignalBus.UnsubscribeId
      VB:
      - id: Zenject.SignalBus.UnsubscribeId*
        name: UnsubscribeId
        nameWithType: SignalBus.UnsubscribeId
        qualifiedName: Zenject.SignalBus.UnsubscribeId
    isDefinition: true
    commentId: Overload:Zenject.SignalBus.UnsubscribeId
  Zenject.SignalBus.Unsubscribe*:
    name:
      CSharp:
      - id: Zenject.SignalBus.Unsubscribe*
        name: Unsubscribe
        nameWithType: SignalBus.Unsubscribe
        qualifiedName: Zenject.SignalBus.Unsubscribe
      VB:
      - id: Zenject.SignalBus.Unsubscribe*
        name: Unsubscribe
        nameWithType: SignalBus.Unsubscribe
        qualifiedName: Zenject.SignalBus.Unsubscribe
    isDefinition: true
    commentId: Overload:Zenject.SignalBus.Unsubscribe
  Zenject.SignalBus.TryUnsubscribeId*:
    name:
      CSharp:
      - id: Zenject.SignalBus.TryUnsubscribeId*
        name: TryUnsubscribeId
        nameWithType: SignalBus.TryUnsubscribeId
        qualifiedName: Zenject.SignalBus.TryUnsubscribeId
      VB:
      - id: Zenject.SignalBus.TryUnsubscribeId*
        name: TryUnsubscribeId
        nameWithType: SignalBus.TryUnsubscribeId
        qualifiedName: Zenject.SignalBus.TryUnsubscribeId
    isDefinition: true
    commentId: Overload:Zenject.SignalBus.TryUnsubscribeId
  Zenject.SignalBus.TryUnsubscribe*:
    name:
      CSharp:
      - id: Zenject.SignalBus.TryUnsubscribe*
        name: TryUnsubscribe
        nameWithType: SignalBus.TryUnsubscribe
        qualifiedName: Zenject.SignalBus.TryUnsubscribe
      VB:
      - id: Zenject.SignalBus.TryUnsubscribe*
        name: TryUnsubscribe
        nameWithType: SignalBus.TryUnsubscribe
        qualifiedName: Zenject.SignalBus.TryUnsubscribe
    isDefinition: true
    commentId: Overload:Zenject.SignalBus.TryUnsubscribe
  System.Nullable`1:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Nullable`1
  System.Nullable{Zenject.SignalMissingHandlerResponses}:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalMissingHandlerResponses
        name: SignalMissingHandlerResponses
        nameWithType: SignalMissingHandlerResponses
        qualifiedName: Zenject.SignalMissingHandlerResponses
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalMissingHandlerResponses
        name: SignalMissingHandlerResponses
        nameWithType: SignalMissingHandlerResponses
        qualifiedName: Zenject.SignalMissingHandlerResponses
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Nullable`1
    parent: System
    commentId: T:System.Nullable{Zenject.SignalMissingHandlerResponses}
  System.Nullable{System.Boolean}:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Nullable`1
    parent: System
    commentId: T:System.Nullable{System.Boolean}
  System.Nullable{System.Int32}:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Nullable`1
    parent: System
    commentId: T:System.Nullable{System.Int32}
  Zenject.SignalBus.DeclareSignal*:
    name:
      CSharp:
      - id: Zenject.SignalBus.DeclareSignal*
        name: DeclareSignal
        nameWithType: SignalBus.DeclareSignal
        qualifiedName: Zenject.SignalBus.DeclareSignal
      VB:
      - id: Zenject.SignalBus.DeclareSignal*
        name: DeclareSignal
        nameWithType: SignalBus.DeclareSignal
        qualifiedName: Zenject.SignalBus.DeclareSignal
    isDefinition: true
    commentId: Overload:Zenject.SignalBus.DeclareSignal
  Zenject.Installer`1:
    name:
      CSharp:
      - id: Zenject.Installer`1
        name: Installer
        nameWithType: Installer
        qualifiedName: Zenject.Installer
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TDerived
        nameWithType: TDerived
        qualifiedName: TDerived
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.Installer`1
        name: Installer
        nameWithType: Installer
        qualifiedName: Zenject.Installer
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TDerived
        nameWithType: TDerived
        qualifiedName: TDerived
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Zenject.Installer`1
  Zenject.Installer{Zenject.SignalBusInstaller}:
    name:
      CSharp:
      - id: Zenject.Installer`1
        name: Installer
        nameWithType: Installer
        qualifiedName: Zenject.Installer
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalBusInstaller
        name: SignalBusInstaller
        nameWithType: SignalBusInstaller
        qualifiedName: Zenject.SignalBusInstaller
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.Installer`1
        name: Installer
        nameWithType: Installer
        qualifiedName: Zenject.Installer
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalBusInstaller
        name: SignalBusInstaller
        nameWithType: SignalBusInstaller
        qualifiedName: Zenject.SignalBusInstaller
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.Installer`1
    parent: Zenject
    commentId: T:Zenject.Installer{Zenject.SignalBusInstaller}
  Zenject.Installer`1.Install(Zenject.DiContainer):
    name:
      CSharp:
      - id: Zenject.Installer`1.Install(Zenject.DiContainer)
        name: Install
        nameWithType: Installer<TDerived>.Install
        qualifiedName: Zenject.Installer<TDerived>.Install
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Zenject.DiContainer
        name: DiContainer
        nameWithType: DiContainer
        qualifiedName: Zenject.DiContainer
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.Installer`1.Install(Zenject.DiContainer)
        name: Install
        nameWithType: Installer(Of TDerived).Install
        qualifiedName: Zenject.Installer(Of TDerived).Install
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Zenject.DiContainer
        name: DiContainer
        nameWithType: DiContainer
        qualifiedName: Zenject.DiContainer
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Zenject.Installer`1.Install(Zenject.DiContainer)
  Zenject.Installer{Zenject.SignalBusInstaller}.Install(Zenject.DiContainer):
    name:
      CSharp:
      - id: Zenject.Installer`1.Install(Zenject.DiContainer)
        name: Install
        nameWithType: Installer<SignalBusInstaller>.Install
        qualifiedName: Zenject.Installer<Zenject.SignalBusInstaller>.Install
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Zenject.DiContainer
        name: DiContainer
        nameWithType: DiContainer
        qualifiedName: Zenject.DiContainer
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.Installer`1.Install(Zenject.DiContainer)
        name: Install
        nameWithType: Installer(Of SignalBusInstaller).Install
        qualifiedName: Zenject.Installer(Of Zenject.SignalBusInstaller).Install
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Zenject.DiContainer
        name: DiContainer
        nameWithType: DiContainer
        qualifiedName: Zenject.DiContainer
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.Installer`1.Install(Zenject.DiContainer)
    parent: Zenject.Installer{Zenject.SignalBusInstaller}
    commentId: M:Zenject.Installer{Zenject.SignalBusInstaller}.Install(Zenject.DiContainer)
  Zenject.InstallerBase:
    name:
      CSharp:
      - id: Zenject.InstallerBase
        name: InstallerBase
        nameWithType: InstallerBase
        qualifiedName: Zenject.InstallerBase
      VB:
      - id: Zenject.InstallerBase
        name: InstallerBase
        nameWithType: InstallerBase
        qualifiedName: Zenject.InstallerBase
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.InstallerBase
  Zenject.InstallerBase.Container:
    name:
      CSharp:
      - id: Zenject.InstallerBase.Container
        name: Container
        nameWithType: InstallerBase.Container
        qualifiedName: Zenject.InstallerBase.Container
      VB:
      - id: Zenject.InstallerBase.Container
        name: Container
        nameWithType: InstallerBase.Container
        qualifiedName: Zenject.InstallerBase.Container
    isDefinition: true
    parent: Zenject.InstallerBase
    commentId: P:Zenject.InstallerBase.Container
  Zenject.InstallerBase.IsEnabled:
    name:
      CSharp:
      - id: Zenject.InstallerBase.IsEnabled
        name: IsEnabled
        nameWithType: InstallerBase.IsEnabled
        qualifiedName: Zenject.InstallerBase.IsEnabled
      VB:
      - id: Zenject.InstallerBase.IsEnabled
        name: IsEnabled
        nameWithType: InstallerBase.IsEnabled
        qualifiedName: Zenject.InstallerBase.IsEnabled
    isDefinition: true
    parent: Zenject.InstallerBase
    commentId: P:Zenject.InstallerBase.IsEnabled
  Zenject.IInstaller:
    name:
      CSharp:
      - id: Zenject.IInstaller
        name: IInstaller
        nameWithType: IInstaller
        qualifiedName: Zenject.IInstaller
      VB:
      - id: Zenject.IInstaller
        name: IInstaller
        nameWithType: IInstaller
        qualifiedName: Zenject.IInstaller
    isDefinition: true
    parent: Zenject
    commentId: T:Zenject.IInstaller
  Zenject.SignalBusInstaller.ModestTree.LinqExtensions.Yield``1:
    name:
      CSharp:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield<SignalBusInstaller>
        nameWithType: LinqExtensions.Yield<SignalBusInstaller>
        qualifiedName: ModestTree.LinqExtensions.Yield<Zenject.SignalBusInstaller>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield(Of SignalBusInstaller)
        nameWithType: LinqExtensions.Yield(Of SignalBusInstaller)
        qualifiedName: ModestTree.LinqExtensions.Yield(Of Zenject.SignalBusInstaller)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: ModestTree.LinqExtensions.Yield``1(``0)
    parent: ModestTree.LinqExtensions
    commentId: M:ModestTree.LinqExtensions.Yield``1(``0)
  ? Zenject.SignalBusInstaller.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalBusInstaller,{TProperty}},UniRx.FrameCountType,System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged<SignalBusInstaller, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalBusInstaller, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalBusInstaller, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalBusInstaller
        name: SignalBusInstaller
        nameWithType: SignalBusInstaller
        qualifiedName: Zenject.SignalBusInstaller
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged(Of SignalBusInstaller, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalBusInstaller, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalBusInstaller, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalBusInstaller
        name: SignalBusInstaller
        nameWithType: SignalBusInstaller
        qualifiedName: Zenject.SignalBusInstaller
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
  ? Zenject.SignalBusInstaller.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalBusInstaller,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged<SignalBusInstaller, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalBusInstaller, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalBusInstaller, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalBusInstaller
        name: SignalBusInstaller
        nameWithType: SignalBusInstaller
        qualifiedName: Zenject.SignalBusInstaller
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged(Of SignalBusInstaller, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalBusInstaller, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalBusInstaller, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalBusInstaller
        name: SignalBusInstaller
        nameWithType: SignalBusInstaller
        qualifiedName: Zenject.SignalBusInstaller
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
  ? Zenject.SignalBusInstaller.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalBusInstaller,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged<SignalBusInstaller, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalBusInstaller, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalBusInstaller, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalBusInstaller
        name: SignalBusInstaller
        nameWithType: SignalBusInstaller
        qualifiedName: Zenject.SignalBusInstaller
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged(Of SignalBusInstaller, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalBusInstaller, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalBusInstaller, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalBusInstaller
        name: SignalBusInstaller
        nameWithType: SignalBusInstaller
        qualifiedName: Zenject.SignalBusInstaller
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
  Zenject.InstallerBase.InstallBindings:
    name:
      CSharp:
      - id: Zenject.InstallerBase.InstallBindings
        name: InstallBindings
        nameWithType: InstallerBase.InstallBindings
        qualifiedName: Zenject.InstallerBase.InstallBindings
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Zenject.InstallerBase.InstallBindings
        name: InstallBindings
        nameWithType: InstallerBase.InstallBindings
        qualifiedName: Zenject.InstallerBase.InstallBindings
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Zenject.InstallerBase
    commentId: M:Zenject.InstallerBase.InstallBindings
  Zenject.SignalBusInstaller.InstallBindings*:
    name:
      CSharp:
      - id: Zenject.SignalBusInstaller.InstallBindings*
        name: InstallBindings
        nameWithType: SignalBusInstaller.InstallBindings
        qualifiedName: Zenject.SignalBusInstaller.InstallBindings
      VB:
      - id: Zenject.SignalBusInstaller.InstallBindings*
        name: InstallBindings
        nameWithType: SignalBusInstaller.InstallBindings
        qualifiedName: Zenject.SignalBusInstaller.InstallBindings
    isDefinition: true
    commentId: Overload:Zenject.SignalBusInstaller.InstallBindings
  Zenject.SignalBusInstaller:
    name:
      CSharp:
      - id: Zenject.SignalBusInstaller
        name: SignalBusInstaller
        nameWithType: SignalBusInstaller
        qualifiedName: Zenject.SignalBusInstaller
      VB:
      - id: Zenject.SignalBusInstaller
        name: SignalBusInstaller
        nameWithType: SignalBusInstaller
        qualifiedName: Zenject.SignalBusInstaller
    isDefinition: true
    commentId: T:Zenject.SignalBusInstaller
  Zenject.SignalDeclarationAsyncInitializer.ModestTree.LinqExtensions.Yield``1:
    name:
      CSharp:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield<SignalDeclarationAsyncInitializer>
        nameWithType: LinqExtensions.Yield<SignalDeclarationAsyncInitializer>
        qualifiedName: ModestTree.LinqExtensions.Yield<Zenject.SignalDeclarationAsyncInitializer>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: ModestTree.LinqExtensions.Yield``1
        name: Yield(Of SignalDeclarationAsyncInitializer)
        nameWithType: LinqExtensions.Yield(Of SignalDeclarationAsyncInitializer)
        qualifiedName: ModestTree.LinqExtensions.Yield(Of Zenject.SignalDeclarationAsyncInitializer)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: ModestTree.LinqExtensions.Yield``1(``0)
    parent: ModestTree.LinqExtensions
    commentId: M:ModestTree.LinqExtensions.Yield``1(``0)
  ? Zenject.SignalDeclarationAsyncInitializer.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclarationAsyncInitializer,{TProperty}},UniRx.FrameCountType,System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged<SignalDeclarationAsyncInitializer, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalDeclarationAsyncInitializer, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalDeclarationAsyncInitializer, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalDeclarationAsyncInitializer
        name: SignalDeclarationAsyncInitializer
        nameWithType: SignalDeclarationAsyncInitializer
        qualifiedName: Zenject.SignalDeclarationAsyncInitializer
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
        name: ObserveEveryValueChanged(Of SignalDeclarationAsyncInitializer, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalDeclarationAsyncInitializer, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalDeclarationAsyncInitializer, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalDeclarationAsyncInitializer
        name: SignalDeclarationAsyncInitializer
        nameWithType: SignalDeclarationAsyncInitializer
        qualifiedName: Zenject.SignalDeclarationAsyncInitializer
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Boolean)
  ? Zenject.SignalDeclarationAsyncInitializer.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclarationAsyncInitializer,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}})
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged<SignalDeclarationAsyncInitializer, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalDeclarationAsyncInitializer, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalDeclarationAsyncInitializer, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalDeclarationAsyncInitializer
        name: SignalDeclarationAsyncInitializer
        nameWithType: SignalDeclarationAsyncInitializer
        qualifiedName: Zenject.SignalDeclarationAsyncInitializer
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
        name: ObserveEveryValueChanged(Of SignalDeclarationAsyncInitializer, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalDeclarationAsyncInitializer, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalDeclarationAsyncInitializer, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalDeclarationAsyncInitializer
        name: SignalDeclarationAsyncInitializer
        nameWithType: SignalDeclarationAsyncInitializer
        qualifiedName: Zenject.SignalDeclarationAsyncInitializer
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1})
  ? Zenject.SignalDeclarationAsyncInitializer.UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{Zenject.SignalDeclarationAsyncInitializer,{TProperty}},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{{TProperty}},System.Boolean)
  : name:
      CSharp:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged<SignalDeclarationAsyncInitializer, TProperty>
        nameWithType: ObserveExtensions.ObserveEveryValueChanged<SignalDeclarationAsyncInitializer, TProperty>
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged<Zenject.SignalDeclarationAsyncInitializer, TProperty>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.SignalDeclarationAsyncInitializer
        name: SignalDeclarationAsyncInitializer
        nameWithType: SignalDeclarationAsyncInitializer
        qualifiedName: Zenject.SignalDeclarationAsyncInitializer
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
        name: ObserveEveryValueChanged(Of SignalDeclarationAsyncInitializer, TProperty)
        nameWithType: ObserveExtensions.ObserveEveryValueChanged(Of SignalDeclarationAsyncInitializer, TProperty)
        qualifiedName: UniRx.ObserveExtensions.ObserveEveryValueChanged(Of Zenject.SignalDeclarationAsyncInitializer, TProperty)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.SignalDeclarationAsyncInitializer
        name: SignalDeclarationAsyncInitializer
        nameWithType: SignalDeclarationAsyncInitializer
        qualifiedName: Zenject.SignalDeclarationAsyncInitializer
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: UniRx.FrameCountType
        name: FrameCountType
        nameWithType: FrameCountType
        qualifiedName: UniRx.FrameCountType
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
    parent: UniRx.ObserveExtensions
    commentId: M:UniRx.ObserveExtensions.ObserveEveryValueChanged``2(``0,System.Func{``0,``1},UniRx.FrameCountType,System.Collections.Generic.IEqualityComparer{``1},System.Boolean)
  Zenject.LazyInject`1:
    name:
      CSharp:
      - id: Zenject.LazyInject`1
        name: LazyInject
        nameWithType: LazyInject
        qualifiedName: Zenject.LazyInject
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.LazyInject`1
        name: LazyInject
        nameWithType: LazyInject
        qualifiedName: Zenject.LazyInject
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Zenject.LazyInject`1
  Zenject.LazyInject{Zenject.TickableManager}:
    name:
      CSharp:
      - id: Zenject.LazyInject`1
        name: LazyInject
        nameWithType: LazyInject
        qualifiedName: Zenject.LazyInject
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Zenject.TickableManager
        name: TickableManager
        nameWithType: TickableManager
        qualifiedName: Zenject.TickableManager
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Zenject.LazyInject`1
        name: LazyInject
        nameWithType: LazyInject
        qualifiedName: Zenject.LazyInject
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Zenject.TickableManager
        name: TickableManager
        nameWithType: TickableManager
        qualifiedName: Zenject.TickableManager
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Zenject.LazyInject`1
    parent: Zenject
    commentId: T:Zenject.LazyInject{Zenject.TickableManager}
  Zenject.SignalDeclarationAsyncInitializer.#ctor*:
    name:
      CSharp:
      - id: Zenject.SignalDeclarationAsyncInitializer.#ctor*
        name: SignalDeclarationAsyncInitializer
        nameWithType: SignalDeclarationAsyncInitializer.SignalDeclarationAsyncInitializer
        qualifiedName: Zenject.SignalDeclarationAsyncInitializer.SignalDeclarationAsyncInitializer
      VB:
      - id: Zenject.SignalDeclarationAsyncInitializer.#ctor*
        name: SignalDeclarationAsyncInitializer
        nameWithType: SignalDeclarationAsyncInitializer.SignalDeclarationAsyncInitializer
        qualifiedName: Zenject.SignalDeclarationAsyncInitializer.SignalDeclarationAsyncInitializer
    isDefinition: true
    commentId: Overload:Zenject.SignalDeclarationAsyncInitializer.#ctor
  Zenject.SignalDeclarationAsyncInitializer.Initialize*:
    name:
      CSharp:
      - id: Zenject.SignalDeclarationAsyncInitializer.Initialize*
        name: Initialize
        nameWithType: SignalDeclarationAsyncInitializer.Initialize
        qualifiedName: Zenject.SignalDeclarationAsyncInitializer.Initialize
      VB:
      - id: Zenject.SignalDeclarationAsyncInitializer.Initialize*
        name: Initialize
        nameWithType: SignalDeclarationAsyncInitializer.Initialize
        qualifiedName: Zenject.SignalDeclarationAsyncInitializer.Initialize
    isDefinition: true
    commentId: Overload:Zenject.SignalDeclarationAsyncInitializer.Initialize
  Zenject.SignalDeclarationAsyncInitializer:
    name:
      CSharp:
      - id: Zenject.SignalDeclarationAsyncInitializer
        name: SignalDeclarationAsyncInitializer
        nameWithType: SignalDeclarationAsyncInitializer
        qualifiedName: Zenject.SignalDeclarationAsyncInitializer
      VB:
      - id: Zenject.SignalDeclarationAsyncInitializer
        name: SignalDeclarationAsyncInitializer
        nameWithType: SignalDeclarationAsyncInitializer
        qualifiedName: Zenject.SignalDeclarationAsyncInitializer
    isDefinition: true
    commentId: T:Zenject.SignalDeclarationAsyncInitializer
