id: cs.temp.dll
language: CSharp
name:
  Default: cs.temp.dll
qualifiedName:
  Default: cs.temp.dll
type: Assembly
modifiers: {}
items:
- id: Global
  language: CSharp
  name:
    CSharp: Global
    VB: ''
  nameWithType:
    CSharp: Global
    VB: ''
  qualifiedName:
    CSharp: Global
    VB: ''
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Global.UIIDGenerator
    commentId: T:Global.UIIDGenerator
    language: CSharp
    name:
      CSharp: UIIDGenerator
      VB: UIIDGenerator
    nameWithType:
      CSharp: UIIDGenerator
      VB: UIIDGenerator
    qualifiedName:
      CSharp: UIIDGenerator
      VB: UIIDGenerator
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UIIDGenerator
      path: ''
      startLine: 773
    syntax:
      content:
        CSharp: 'public class UIIDGenerator : EditorWindow'
        VB: >-
          Public Class UIIDGenerator

              Inherits EditorWindow
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.UIIDGenerator.ShowWindow
      commentId: M:Global.UIIDGenerator.ShowWindow
      language: CSharp
      name:
        CSharp: ShowWindow()
        VB: ShowWindow()
      nameWithType:
        CSharp: UIIDGenerator.ShowWindow()
        VB: UIIDGenerator.ShowWindow()
      qualifiedName:
        CSharp: UIIDGenerator.ShowWindow()
        VB: UIIDGenerator.ShowWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ShowWindow
        path: ''
        startLine: 775
      syntax:
        content:
          CSharp: public static void ShowWindow()
          VB: Public Shared Sub ShowWindow
      overload: Global.UIIDGenerator.ShowWindow*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Global.InputSystem_Actions
    commentId: T:Global.InputSystem_Actions
    language: CSharp
    name:
      CSharp: InputSystem_Actions
      VB: InputSystem_Actions
    nameWithType:
      CSharp: InputSystem_Actions
      VB: InputSystem_Actions
    qualifiedName:
      CSharp: InputSystem_Actions
      VB: InputSystem_Actions
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: InputSystem_Actions
      path: ''
      startLine: 58458
    syntax:
      content:
        CSharp: 'public class InputSystem_Actions : IInputActionCollection2'
        VB: >-
          Public Class InputSystem_Actions

              Inherits IInputActionCollection2
    inheritance:
    - System.Object
    implements:
    - Global.IDisposable
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.InputSystem_Actions.asset
      commentId: P:Global.InputSystem_Actions.asset
      language: CSharp
      name:
        CSharp: asset
        VB: asset
      nameWithType:
        CSharp: InputSystem_Actions.asset
        VB: InputSystem_Actions.asset
      qualifiedName:
        CSharp: InputSystem_Actions.asset
        VB: InputSystem_Actions.asset
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: asset
        path: ''
        startLine: 58460
      syntax:
        content:
          CSharp: public InputActionAsset asset { get; }
          VB: Public ReadOnly Property asset As InputActionAsset
        parameters: []
        return:
          type: Global.InputActionAsset
      overload: Global.InputSystem_Actions.asset*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.#ctor
      commentId: M:Global.InputSystem_Actions.#ctor
      language: CSharp
      name:
        CSharp: InputSystem_Actions()
        VB: InputSystem_Actions()
      nameWithType:
        CSharp: InputSystem_Actions.InputSystem_Actions()
        VB: InputSystem_Actions.InputSystem_Actions()
      qualifiedName:
        CSharp: InputSystem_Actions.InputSystem_Actions()
        VB: InputSystem_Actions.InputSystem_Actions()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 58461
      syntax:
        content:
          CSharp: public InputSystem_Actions()
          VB: Public Sub New
      overload: Global.InputSystem_Actions.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InputSystem_Actions.Finalize
      commentId: M:Global.InputSystem_Actions.Finalize
      language: CSharp
      name:
        CSharp: Finalize()
        VB: Finalize()
      nameWithType:
        CSharp: InputSystem_Actions.Finalize()
        VB: InputSystem_Actions.Finalize()
      qualifiedName:
        CSharp: InputSystem_Actions.Finalize()
        VB: InputSystem_Actions.Finalize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Finalize
        path: ''
        startLine: 59287
      syntax:
        content:
          CSharp: protected void Finalize()
          VB: Protected Sub Finalize
      overload: Global.InputSystem_Actions.Finalize*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Global.InputSystem_Actions.Dispose
      commentId: M:Global.InputSystem_Actions.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: InputSystem_Actions.Dispose()
        VB: InputSystem_Actions.Dispose()
      qualifiedName:
        CSharp: InputSystem_Actions.Dispose()
        VB: InputSystem_Actions.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Dispose
        path: ''
        startLine: 59293
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: Global.InputSystem_Actions.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InputSystem_Actions.bindingMask
      commentId: P:Global.InputSystem_Actions.bindingMask
      language: CSharp
      name:
        CSharp: bindingMask
        VB: bindingMask
      nameWithType:
        CSharp: InputSystem_Actions.bindingMask
        VB: InputSystem_Actions.bindingMask
      qualifiedName:
        CSharp: InputSystem_Actions.bindingMask
        VB: InputSystem_Actions.bindingMask
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: bindingMask
        path: ''
        startLine: 59298
      syntax:
        content:
          CSharp: public InputBinding? bindingMask { get; set; }
          VB: Public Property bindingMask As InputBinding?
        parameters: []
        return:
          type: System.Nullable{InputBinding}
      overload: Global.InputSystem_Actions.bindingMask*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.InputSystem_Actions.devices
      commentId: P:Global.InputSystem_Actions.devices
      language: CSharp
      name:
        CSharp: devices
        VB: devices
      nameWithType:
        CSharp: InputSystem_Actions.devices
        VB: InputSystem_Actions.devices
      qualifiedName:
        CSharp: InputSystem_Actions.devices
        VB: InputSystem_Actions.devices
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: devices
        path: ''
        startLine: 59304
      syntax:
        content:
          CSharp: public ReadOnlyArray<InputDevice>? devices { get; set; }
          VB: Public Property devices As ReadOnlyArray(Of InputDevice)?
        parameters: []
        return:
          type: System.Nullable{ReadOnlyArray{InputDevice}}
      overload: Global.InputSystem_Actions.devices*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.InputSystem_Actions.controlSchemes
      commentId: P:Global.InputSystem_Actions.controlSchemes
      language: CSharp
      name:
        CSharp: controlSchemes
        VB: controlSchemes
      nameWithType:
        CSharp: InputSystem_Actions.controlSchemes
        VB: InputSystem_Actions.controlSchemes
      qualifiedName:
        CSharp: InputSystem_Actions.controlSchemes
        VB: InputSystem_Actions.controlSchemes
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: controlSchemes
        path: ''
        startLine: 59310
      syntax:
        content:
          CSharp: public ReadOnlyArray<InputControlScheme> controlSchemes { get; }
          VB: Public ReadOnly Property controlSchemes As ReadOnlyArray(Of InputControlScheme)
        parameters: []
        return:
          type: Global.ReadOnlyArray{InputControlScheme}
      overload: Global.InputSystem_Actions.controlSchemes*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.Contains(InputAction)
      commentId: M:Global.InputSystem_Actions.Contains(InputAction)
      language: CSharp
      name:
        CSharp: Contains(InputAction)
        VB: Contains(InputAction)
      nameWithType:
        CSharp: InputSystem_Actions.Contains(InputAction)
        VB: InputSystem_Actions.Contains(InputAction)
      qualifiedName:
        CSharp: InputSystem_Actions.Contains(InputAction)
        VB: InputSystem_Actions.Contains(InputAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Contains
        path: ''
        startLine: 59312
      syntax:
        content:
          CSharp: public bool Contains(InputAction action)
          VB: Public Function Contains(action As InputAction) As Boolean
        parameters:
        - id: action
          type: Global.InputAction
        return:
          type: System.Boolean
      overload: Global.InputSystem_Actions.Contains*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InputSystem_Actions.GetEnumerator
      commentId: M:Global.InputSystem_Actions.GetEnumerator
      language: CSharp
      name:
        CSharp: GetEnumerator()
        VB: GetEnumerator()
      nameWithType:
        CSharp: InputSystem_Actions.GetEnumerator()
        VB: InputSystem_Actions.GetEnumerator()
      qualifiedName:
        CSharp: InputSystem_Actions.GetEnumerator()
        VB: InputSystem_Actions.GetEnumerator()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetEnumerator
        path: ''
        startLine: 59317
      syntax:
        content:
          CSharp: public IEnumerator<InputAction> GetEnumerator()
          VB: Public Function GetEnumerator As IEnumerator(Of InputAction)
        return:
          type: Global.IEnumerator{InputAction}
      overload: Global.InputSystem_Actions.GetEnumerator*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InputSystem_Actions.Enable
      commentId: M:Global.InputSystem_Actions.Enable
      language: CSharp
      name:
        CSharp: Enable()
        VB: Enable()
      nameWithType:
        CSharp: InputSystem_Actions.Enable()
        VB: InputSystem_Actions.Enable()
      qualifiedName:
        CSharp: InputSystem_Actions.Enable()
        VB: InputSystem_Actions.Enable()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Enable
        path: ''
        startLine: 59327
      syntax:
        content:
          CSharp: public void Enable()
          VB: Public Sub Enable
      overload: Global.InputSystem_Actions.Enable*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InputSystem_Actions.Disable
      commentId: M:Global.InputSystem_Actions.Disable
      language: CSharp
      name:
        CSharp: Disable()
        VB: Disable()
      nameWithType:
        CSharp: InputSystem_Actions.Disable()
        VB: InputSystem_Actions.Disable()
      qualifiedName:
        CSharp: InputSystem_Actions.Disable()
        VB: InputSystem_Actions.Disable()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Disable
        path: ''
        startLine: 59332
      syntax:
        content:
          CSharp: public void Disable()
          VB: Public Sub Disable
      overload: Global.InputSystem_Actions.Disable*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InputSystem_Actions.bindings
      commentId: P:Global.InputSystem_Actions.bindings
      language: CSharp
      name:
        CSharp: bindings
        VB: bindings
      nameWithType:
        CSharp: InputSystem_Actions.bindings
        VB: InputSystem_Actions.bindings
      qualifiedName:
        CSharp: InputSystem_Actions.bindings
        VB: InputSystem_Actions.bindings
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: bindings
        path: ''
        startLine: 59337
      syntax:
        content:
          CSharp: public IEnumerable<InputBinding> bindings { get; }
          VB: Public ReadOnly Property bindings As IEnumerable(Of InputBinding)
        parameters: []
        return:
          type: Global.IEnumerable{InputBinding}
      overload: Global.InputSystem_Actions.bindings*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.FindAction(System.String,System.Boolean)
      commentId: M:Global.InputSystem_Actions.FindAction(System.String,System.Boolean)
      language: CSharp
      name:
        CSharp: FindAction(String, Boolean)
        VB: FindAction(String, Boolean)
      nameWithType:
        CSharp: InputSystem_Actions.FindAction(String, Boolean)
        VB: InputSystem_Actions.FindAction(String, Boolean)
      qualifiedName:
        CSharp: InputSystem_Actions.FindAction(System.String, System.Boolean)
        VB: InputSystem_Actions.FindAction(System.String, System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FindAction
        path: ''
        startLine: 59339
      syntax:
        content:
          CSharp: public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
          VB: Public Function FindAction(actionNameOrId As String, throwIfNotFound As Boolean = False) As InputAction
        parameters:
        - id: actionNameOrId
          type: System.String
        - id: throwIfNotFound
          type: System.Boolean
        return:
          type: Global.InputAction
      overload: Global.InputSystem_Actions.FindAction*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InputSystem_Actions.FindBinding(InputBinding,InputAction@)
      commentId: M:Global.InputSystem_Actions.FindBinding(InputBinding,InputAction@)
      language: CSharp
      name:
        CSharp: FindBinding(InputBinding, out InputAction)
        VB: FindBinding(InputBinding, ByRef InputAction)
      nameWithType:
        CSharp: InputSystem_Actions.FindBinding(InputBinding, out InputAction)
        VB: InputSystem_Actions.FindBinding(InputBinding, ByRef InputAction)
      qualifiedName:
        CSharp: InputSystem_Actions.FindBinding(InputBinding, out InputAction)
        VB: InputSystem_Actions.FindBinding(InputBinding, ByRef InputAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FindBinding
        path: ''
        startLine: 59344
      syntax:
        content:
          CSharp: public int FindBinding(InputBinding bindingMask, out InputAction action)
          VB: Public Function FindBinding(bindingMask As InputBinding, ByRef action As InputAction) As Integer
        parameters:
        - id: bindingMask
          type: Global.InputBinding
        - id: action
          type: Global.InputAction
        return:
          type: System.Int32
      overload: Global.InputSystem_Actions.FindBinding*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InputSystem_Actions.Player
      commentId: P:Global.InputSystem_Actions.Player
      language: CSharp
      name:
        CSharp: Player
        VB: Player
      nameWithType:
        CSharp: InputSystem_Actions.Player
        VB: InputSystem_Actions.Player
      qualifiedName:
        CSharp: InputSystem_Actions.Player
        VB: InputSystem_Actions.Player
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Player
        path: ''
        startLine: 59409
      syntax:
        content:
          CSharp: public InputSystem_Actions.PlayerActions Player { get; }
          VB: Public ReadOnly Property Player As InputSystem_Actions.PlayerActions
        parameters: []
        return:
          type: Global.InputSystem_Actions.PlayerActions
      overload: Global.InputSystem_Actions.Player*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.UI
      commentId: P:Global.InputSystem_Actions.UI
      language: CSharp
      name:
        CSharp: UI
        VB: UI
      nameWithType:
        CSharp: InputSystem_Actions.UI
        VB: InputSystem_Actions.UI
      qualifiedName:
        CSharp: InputSystem_Actions.UI
        VB: InputSystem_Actions.UI
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UI
        path: ''
        startLine: 59527
      syntax:
        content:
          CSharp: public InputSystem_Actions.UIActions UI { get; }
          VB: Public ReadOnly Property UI As InputSystem_Actions.UIActions
        parameters: []
        return:
          type: Global.InputSystem_Actions.UIActions
      overload: Global.InputSystem_Actions.UI*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.KeyboardMouseScheme
      commentId: P:Global.InputSystem_Actions.KeyboardMouseScheme
      language: CSharp
      name:
        CSharp: KeyboardMouseScheme
        VB: KeyboardMouseScheme
      nameWithType:
        CSharp: InputSystem_Actions.KeyboardMouseScheme
        VB: InputSystem_Actions.KeyboardMouseScheme
      qualifiedName:
        CSharp: InputSystem_Actions.KeyboardMouseScheme
        VB: InputSystem_Actions.KeyboardMouseScheme
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: KeyboardMouseScheme
        path: ''
        startLine: 59529
      syntax:
        content:
          CSharp: public InputControlScheme KeyboardMouseScheme { get; }
          VB: Public ReadOnly Property KeyboardMouseScheme As InputControlScheme
        parameters: []
        return:
          type: Global.InputControlScheme
      overload: Global.InputSystem_Actions.KeyboardMouseScheme*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.GamepadScheme
      commentId: P:Global.InputSystem_Actions.GamepadScheme
      language: CSharp
      name:
        CSharp: GamepadScheme
        VB: GamepadScheme
      nameWithType:
        CSharp: InputSystem_Actions.GamepadScheme
        VB: InputSystem_Actions.GamepadScheme
      qualifiedName:
        CSharp: InputSystem_Actions.GamepadScheme
        VB: InputSystem_Actions.GamepadScheme
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GamepadScheme
        path: ''
        startLine: 59538
      syntax:
        content:
          CSharp: public InputControlScheme GamepadScheme { get; }
          VB: Public ReadOnly Property GamepadScheme As InputControlScheme
        parameters: []
        return:
          type: Global.InputControlScheme
      overload: Global.InputSystem_Actions.GamepadScheme*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.TouchScheme
      commentId: P:Global.InputSystem_Actions.TouchScheme
      language: CSharp
      name:
        CSharp: TouchScheme
        VB: TouchScheme
      nameWithType:
        CSharp: InputSystem_Actions.TouchScheme
        VB: InputSystem_Actions.TouchScheme
      qualifiedName:
        CSharp: InputSystem_Actions.TouchScheme
        VB: InputSystem_Actions.TouchScheme
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: TouchScheme
        path: ''
        startLine: 59547
      syntax:
        content:
          CSharp: public InputControlScheme TouchScheme { get; }
          VB: Public ReadOnly Property TouchScheme As InputControlScheme
        parameters: []
        return:
          type: Global.InputControlScheme
      overload: Global.InputSystem_Actions.TouchScheme*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.JoystickScheme
      commentId: P:Global.InputSystem_Actions.JoystickScheme
      language: CSharp
      name:
        CSharp: JoystickScheme
        VB: JoystickScheme
      nameWithType:
        CSharp: InputSystem_Actions.JoystickScheme
        VB: InputSystem_Actions.JoystickScheme
      qualifiedName:
        CSharp: InputSystem_Actions.JoystickScheme
        VB: InputSystem_Actions.JoystickScheme
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: JoystickScheme
        path: ''
        startLine: 59556
      syntax:
        content:
          CSharp: public InputControlScheme JoystickScheme { get; }
          VB: Public ReadOnly Property JoystickScheme As InputControlScheme
        parameters: []
        return:
          type: Global.InputControlScheme
      overload: Global.InputSystem_Actions.JoystickScheme*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.XRScheme
      commentId: P:Global.InputSystem_Actions.XRScheme
      language: CSharp
      name:
        CSharp: XRScheme
        VB: XRScheme
      nameWithType:
        CSharp: InputSystem_Actions.XRScheme
        VB: InputSystem_Actions.XRScheme
      qualifiedName:
        CSharp: InputSystem_Actions.XRScheme
        VB: InputSystem_Actions.XRScheme
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: XRScheme
        path: ''
        startLine: 59565
      syntax:
        content:
          CSharp: public InputControlScheme XRScheme { get; }
          VB: Public ReadOnly Property XRScheme As InputControlScheme
        parameters: []
        return:
          type: Global.InputControlScheme
      overload: Global.InputSystem_Actions.XRScheme*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
  - id: Global.InputSystem_Actions.PlayerActions
    commentId: T:Global.InputSystem_Actions.PlayerActions
    language: CSharp
    name:
      CSharp: InputSystem_Actions.PlayerActions
      VB: InputSystem_Actions.PlayerActions
    nameWithType:
      CSharp: InputSystem_Actions.PlayerActions
      VB: InputSystem_Actions.PlayerActions
    qualifiedName:
      CSharp: InputSystem_Actions.PlayerActions
      VB: InputSystem_Actions.PlayerActions
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PlayerActions
      path: ''
      startLine: 59355
    syntax:
      content:
        CSharp: public struct PlayerActions
        VB: Public Structure PlayerActions
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Global.InputSystem_Actions.PlayerActions.#ctor(InputSystem_Actions)
      commentId: M:Global.InputSystem_Actions.PlayerActions.#ctor(InputSystem_Actions)
      language: CSharp
      name:
        CSharp: PlayerActions(InputSystem_Actions)
        VB: PlayerActions(InputSystem_Actions)
      nameWithType:
        CSharp: InputSystem_Actions.PlayerActions.PlayerActions(InputSystem_Actions)
        VB: InputSystem_Actions.PlayerActions.PlayerActions(InputSystem_Actions)
      qualifiedName:
        CSharp: InputSystem_Actions.PlayerActions.PlayerActions(InputSystem_Actions)
        VB: InputSystem_Actions.PlayerActions.PlayerActions(InputSystem_Actions)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 59358
      syntax:
        content:
          CSharp: public PlayerActions(InputSystem_Actions wrapper)
          VB: Public Sub New(wrapper As InputSystem_Actions)
        parameters:
        - id: wrapper
          type: Global.InputSystem_Actions
      overload: Global.InputSystem_Actions.PlayerActions.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InputSystem_Actions.PlayerActions.Move
      commentId: P:Global.InputSystem_Actions.PlayerActions.Move
      language: CSharp
      name:
        CSharp: Move
        VB: Move
      nameWithType:
        CSharp: InputSystem_Actions.PlayerActions.Move
        VB: InputSystem_Actions.PlayerActions.Move
      qualifiedName:
        CSharp: InputSystem_Actions.PlayerActions.Move
        VB: InputSystem_Actions.PlayerActions.Move
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Move
        path: ''
        startLine: 59359
      syntax:
        content:
          CSharp: public readonly InputAction Move { get; }
          VB: Public ReadOnly Property Move As InputAction
        parameters: []
        return:
          type: Global.InputAction
      overload: Global.InputSystem_Actions.PlayerActions.Move*
      modifiers:
        CSharp:
        - public
        - readonly
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.PlayerActions.Look
      commentId: P:Global.InputSystem_Actions.PlayerActions.Look
      language: CSharp
      name:
        CSharp: Look
        VB: Look
      nameWithType:
        CSharp: InputSystem_Actions.PlayerActions.Look
        VB: InputSystem_Actions.PlayerActions.Look
      qualifiedName:
        CSharp: InputSystem_Actions.PlayerActions.Look
        VB: InputSystem_Actions.PlayerActions.Look
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Look
        path: ''
        startLine: 59360
      syntax:
        content:
          CSharp: public readonly InputAction Look { get; }
          VB: Public ReadOnly Property Look As InputAction
        parameters: []
        return:
          type: Global.InputAction
      overload: Global.InputSystem_Actions.PlayerActions.Look*
      modifiers:
        CSharp:
        - public
        - readonly
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.PlayerActions.Interact
      commentId: P:Global.InputSystem_Actions.PlayerActions.Interact
      language: CSharp
      name:
        CSharp: Interact
        VB: Interact
      nameWithType:
        CSharp: InputSystem_Actions.PlayerActions.Interact
        VB: InputSystem_Actions.PlayerActions.Interact
      qualifiedName:
        CSharp: InputSystem_Actions.PlayerActions.Interact
        VB: InputSystem_Actions.PlayerActions.Interact
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Interact
        path: ''
        startLine: 59361
      syntax:
        content:
          CSharp: public readonly InputAction Interact { get; }
          VB: Public ReadOnly Property Interact As InputAction
        parameters: []
        return:
          type: Global.InputAction
      overload: Global.InputSystem_Actions.PlayerActions.Interact*
      modifiers:
        CSharp:
        - public
        - readonly
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.PlayerActions.Get
      commentId: M:Global.InputSystem_Actions.PlayerActions.Get
      language: CSharp
      name:
        CSharp: Get()
        VB: Get()
      nameWithType:
        CSharp: InputSystem_Actions.PlayerActions.Get()
        VB: InputSystem_Actions.PlayerActions.Get()
      qualifiedName:
        CSharp: InputSystem_Actions.PlayerActions.Get()
        VB: InputSystem_Actions.PlayerActions.Get()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Get
        path: ''
        startLine: 59362
      syntax:
        content:
          CSharp: public InputActionMap Get()
          VB: Public Function Get As InputActionMap
        return:
          type: Global.InputActionMap
      overload: Global.InputSystem_Actions.PlayerActions.Get*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InputSystem_Actions.PlayerActions.Enable
      commentId: M:Global.InputSystem_Actions.PlayerActions.Enable
      language: CSharp
      name:
        CSharp: Enable()
        VB: Enable()
      nameWithType:
        CSharp: InputSystem_Actions.PlayerActions.Enable()
        VB: InputSystem_Actions.PlayerActions.Enable()
      qualifiedName:
        CSharp: InputSystem_Actions.PlayerActions.Enable()
        VB: InputSystem_Actions.PlayerActions.Enable()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Enable
        path: ''
        startLine: 59363
      syntax:
        content:
          CSharp: public void Enable()
          VB: Public Sub Enable
      overload: Global.InputSystem_Actions.PlayerActions.Enable*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InputSystem_Actions.PlayerActions.Disable
      commentId: M:Global.InputSystem_Actions.PlayerActions.Disable
      language: CSharp
      name:
        CSharp: Disable()
        VB: Disable()
      nameWithType:
        CSharp: InputSystem_Actions.PlayerActions.Disable()
        VB: InputSystem_Actions.PlayerActions.Disable()
      qualifiedName:
        CSharp: InputSystem_Actions.PlayerActions.Disable()
        VB: InputSystem_Actions.PlayerActions.Disable()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Disable
        path: ''
        startLine: 59364
      syntax:
        content:
          CSharp: public void Disable()
          VB: Public Sub Disable
      overload: Global.InputSystem_Actions.PlayerActions.Disable*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InputSystem_Actions.PlayerActions.enabled
      commentId: P:Global.InputSystem_Actions.PlayerActions.enabled
      language: CSharp
      name:
        CSharp: enabled
        VB: enabled
      nameWithType:
        CSharp: InputSystem_Actions.PlayerActions.enabled
        VB: InputSystem_Actions.PlayerActions.enabled
      qualifiedName:
        CSharp: InputSystem_Actions.PlayerActions.enabled
        VB: InputSystem_Actions.PlayerActions.enabled
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: enabled
        path: ''
        startLine: 59365
      syntax:
        content:
          CSharp: public readonly bool enabled { get; }
          VB: Public ReadOnly Property enabled As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.InputSystem_Actions.PlayerActions.enabled*
      modifiers:
        CSharp:
        - public
        - readonly
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.PlayerActions.op_Implicit(InputSystem_Actions.PlayerActions)~InputActionMap
      commentId: M:Global.InputSystem_Actions.PlayerActions.op_Implicit(InputSystem_Actions.PlayerActions)~InputActionMap
      language: CSharp
      name:
        CSharp: Implicit(InputSystem_Actions.PlayerActions to InputActionMap)
        VB: Widening(InputSystem_Actions.PlayerActions to InputActionMap)
      nameWithType:
        CSharp: InputSystem_Actions.PlayerActions.Implicit(InputSystem_Actions.PlayerActions to InputActionMap)
        VB: InputSystem_Actions.PlayerActions.Widening(InputSystem_Actions.PlayerActions to InputActionMap)
      qualifiedName:
        CSharp: InputSystem_Actions.PlayerActions.Implicit(InputSystem_Actions.PlayerActions to InputActionMap)
        VB: InputSystem_Actions.PlayerActions.Widening(InputSystem_Actions.PlayerActions to InputActionMap)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Implicit
        path: ''
        startLine: 59366
      syntax:
        content:
          CSharp: public static implicit operator InputActionMap(InputSystem_Actions.PlayerActions set)
          VB: Public Shared Widening Operator CType(set As InputSystem_Actions.PlayerActions) As InputActionMap
        parameters:
        - id: set
          type: Global.InputSystem_Actions.PlayerActions
        return:
          type: Global.InputActionMap
      overload: Global.InputSystem_Actions.PlayerActions.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.InputSystem_Actions.PlayerActions.AddCallbacks(InputSystem_Actions.IPlayerActions)
      commentId: M:Global.InputSystem_Actions.PlayerActions.AddCallbacks(InputSystem_Actions.IPlayerActions)
      language: CSharp
      name:
        CSharp: AddCallbacks(InputSystem_Actions.IPlayerActions)
        VB: AddCallbacks(InputSystem_Actions.IPlayerActions)
      nameWithType:
        CSharp: InputSystem_Actions.PlayerActions.AddCallbacks(InputSystem_Actions.IPlayerActions)
        VB: InputSystem_Actions.PlayerActions.AddCallbacks(InputSystem_Actions.IPlayerActions)
      qualifiedName:
        CSharp: InputSystem_Actions.PlayerActions.AddCallbacks(InputSystem_Actions.IPlayerActions)
        VB: InputSystem_Actions.PlayerActions.AddCallbacks(InputSystem_Actions.IPlayerActions)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddCallbacks
        path: ''
        startLine: 59367
      syntax:
        content:
          CSharp: public void AddCallbacks(InputSystem_Actions.IPlayerActions instance)
          VB: Public Sub AddCallbacks(instance As InputSystem_Actions.IPlayerActions)
        parameters:
        - id: instance
          type: Global.InputSystem_Actions.IPlayerActions
      overload: Global.InputSystem_Actions.PlayerActions.AddCallbacks*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InputSystem_Actions.PlayerActions.RemoveCallbacks(InputSystem_Actions.IPlayerActions)
      commentId: M:Global.InputSystem_Actions.PlayerActions.RemoveCallbacks(InputSystem_Actions.IPlayerActions)
      language: CSharp
      name:
        CSharp: RemoveCallbacks(InputSystem_Actions.IPlayerActions)
        VB: RemoveCallbacks(InputSystem_Actions.IPlayerActions)
      nameWithType:
        CSharp: InputSystem_Actions.PlayerActions.RemoveCallbacks(InputSystem_Actions.IPlayerActions)
        VB: InputSystem_Actions.PlayerActions.RemoveCallbacks(InputSystem_Actions.IPlayerActions)
      qualifiedName:
        CSharp: InputSystem_Actions.PlayerActions.RemoveCallbacks(InputSystem_Actions.IPlayerActions)
        VB: InputSystem_Actions.PlayerActions.RemoveCallbacks(InputSystem_Actions.IPlayerActions)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RemoveCallbacks
        path: ''
        startLine: 59395
      syntax:
        content:
          CSharp: public void RemoveCallbacks(InputSystem_Actions.IPlayerActions instance)
          VB: Public Sub RemoveCallbacks(instance As InputSystem_Actions.IPlayerActions)
        parameters:
        - id: instance
          type: Global.InputSystem_Actions.IPlayerActions
      overload: Global.InputSystem_Actions.PlayerActions.RemoveCallbacks*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InputSystem_Actions.PlayerActions.SetCallbacks(InputSystem_Actions.IPlayerActions)
      commentId: M:Global.InputSystem_Actions.PlayerActions.SetCallbacks(InputSystem_Actions.IPlayerActions)
      language: CSharp
      name:
        CSharp: SetCallbacks(InputSystem_Actions.IPlayerActions)
        VB: SetCallbacks(InputSystem_Actions.IPlayerActions)
      nameWithType:
        CSharp: InputSystem_Actions.PlayerActions.SetCallbacks(InputSystem_Actions.IPlayerActions)
        VB: InputSystem_Actions.PlayerActions.SetCallbacks(InputSystem_Actions.IPlayerActions)
      qualifiedName:
        CSharp: InputSystem_Actions.PlayerActions.SetCallbacks(InputSystem_Actions.IPlayerActions)
        VB: InputSystem_Actions.PlayerActions.SetCallbacks(InputSystem_Actions.IPlayerActions)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetCallbacks
        path: ''
        startLine: 59401
      syntax:
        content:
          CSharp: public void SetCallbacks(InputSystem_Actions.IPlayerActions instance)
          VB: Public Sub SetCallbacks(instance As InputSystem_Actions.IPlayerActions)
        parameters:
        - id: instance
          type: Global.InputSystem_Actions.IPlayerActions
      overload: Global.InputSystem_Actions.PlayerActions.SetCallbacks*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.InputSystem_Actions.UIActions
    commentId: T:Global.InputSystem_Actions.UIActions
    language: CSharp
    name:
      CSharp: InputSystem_Actions.UIActions
      VB: InputSystem_Actions.UIActions
    nameWithType:
      CSharp: InputSystem_Actions.UIActions
      VB: InputSystem_Actions.UIActions
    qualifiedName:
      CSharp: InputSystem_Actions.UIActions
      VB: InputSystem_Actions.UIActions
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UIActions
      path: ''
      startLine: 59424
    syntax:
      content:
        CSharp: public struct UIActions
        VB: Public Structure UIActions
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Global.InputSystem_Actions.UIActions.#ctor(InputSystem_Actions)
      commentId: M:Global.InputSystem_Actions.UIActions.#ctor(InputSystem_Actions)
      language: CSharp
      name:
        CSharp: UIActions(InputSystem_Actions)
        VB: UIActions(InputSystem_Actions)
      nameWithType:
        CSharp: InputSystem_Actions.UIActions.UIActions(InputSystem_Actions)
        VB: InputSystem_Actions.UIActions.UIActions(InputSystem_Actions)
      qualifiedName:
        CSharp: InputSystem_Actions.UIActions.UIActions(InputSystem_Actions)
        VB: InputSystem_Actions.UIActions.UIActions(InputSystem_Actions)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 59427
      syntax:
        content:
          CSharp: public UIActions(InputSystem_Actions wrapper)
          VB: Public Sub New(wrapper As InputSystem_Actions)
        parameters:
        - id: wrapper
          type: Global.InputSystem_Actions
      overload: Global.InputSystem_Actions.UIActions.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InputSystem_Actions.UIActions.Navigate
      commentId: P:Global.InputSystem_Actions.UIActions.Navigate
      language: CSharp
      name:
        CSharp: Navigate
        VB: Navigate
      nameWithType:
        CSharp: InputSystem_Actions.UIActions.Navigate
        VB: InputSystem_Actions.UIActions.Navigate
      qualifiedName:
        CSharp: InputSystem_Actions.UIActions.Navigate
        VB: InputSystem_Actions.UIActions.Navigate
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Navigate
        path: ''
        startLine: 59428
      syntax:
        content:
          CSharp: public readonly InputAction Navigate { get; }
          VB: Public ReadOnly Property Navigate As InputAction
        parameters: []
        return:
          type: Global.InputAction
      overload: Global.InputSystem_Actions.UIActions.Navigate*
      modifiers:
        CSharp:
        - public
        - readonly
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.UIActions.Submit
      commentId: P:Global.InputSystem_Actions.UIActions.Submit
      language: CSharp
      name:
        CSharp: Submit
        VB: Submit
      nameWithType:
        CSharp: InputSystem_Actions.UIActions.Submit
        VB: InputSystem_Actions.UIActions.Submit
      qualifiedName:
        CSharp: InputSystem_Actions.UIActions.Submit
        VB: InputSystem_Actions.UIActions.Submit
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Submit
        path: ''
        startLine: 59429
      syntax:
        content:
          CSharp: public readonly InputAction Submit { get; }
          VB: Public ReadOnly Property Submit As InputAction
        parameters: []
        return:
          type: Global.InputAction
      overload: Global.InputSystem_Actions.UIActions.Submit*
      modifiers:
        CSharp:
        - public
        - readonly
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.UIActions.Cancel
      commentId: P:Global.InputSystem_Actions.UIActions.Cancel
      language: CSharp
      name:
        CSharp: Cancel
        VB: Cancel
      nameWithType:
        CSharp: InputSystem_Actions.UIActions.Cancel
        VB: InputSystem_Actions.UIActions.Cancel
      qualifiedName:
        CSharp: InputSystem_Actions.UIActions.Cancel
        VB: InputSystem_Actions.UIActions.Cancel
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Cancel
        path: ''
        startLine: 59430
      syntax:
        content:
          CSharp: public readonly InputAction Cancel { get; }
          VB: Public ReadOnly Property Cancel As InputAction
        parameters: []
        return:
          type: Global.InputAction
      overload: Global.InputSystem_Actions.UIActions.Cancel*
      modifiers:
        CSharp:
        - public
        - readonly
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.UIActions.Point
      commentId: P:Global.InputSystem_Actions.UIActions.Point
      language: CSharp
      name:
        CSharp: Point
        VB: Point
      nameWithType:
        CSharp: InputSystem_Actions.UIActions.Point
        VB: InputSystem_Actions.UIActions.Point
      qualifiedName:
        CSharp: InputSystem_Actions.UIActions.Point
        VB: InputSystem_Actions.UIActions.Point
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Point
        path: ''
        startLine: 59431
      syntax:
        content:
          CSharp: public readonly InputAction Point { get; }
          VB: Public ReadOnly Property Point As InputAction
        parameters: []
        return:
          type: Global.InputAction
      overload: Global.InputSystem_Actions.UIActions.Point*
      modifiers:
        CSharp:
        - public
        - readonly
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.UIActions.Click
      commentId: P:Global.InputSystem_Actions.UIActions.Click
      language: CSharp
      name:
        CSharp: Click
        VB: Click
      nameWithType:
        CSharp: InputSystem_Actions.UIActions.Click
        VB: InputSystem_Actions.UIActions.Click
      qualifiedName:
        CSharp: InputSystem_Actions.UIActions.Click
        VB: InputSystem_Actions.UIActions.Click
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Click
        path: ''
        startLine: 59432
      syntax:
        content:
          CSharp: public readonly InputAction Click { get; }
          VB: Public ReadOnly Property Click As InputAction
        parameters: []
        return:
          type: Global.InputAction
      overload: Global.InputSystem_Actions.UIActions.Click*
      modifiers:
        CSharp:
        - public
        - readonly
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.UIActions.RightClick
      commentId: P:Global.InputSystem_Actions.UIActions.RightClick
      language: CSharp
      name:
        CSharp: RightClick
        VB: RightClick
      nameWithType:
        CSharp: InputSystem_Actions.UIActions.RightClick
        VB: InputSystem_Actions.UIActions.RightClick
      qualifiedName:
        CSharp: InputSystem_Actions.UIActions.RightClick
        VB: InputSystem_Actions.UIActions.RightClick
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RightClick
        path: ''
        startLine: 59433
      syntax:
        content:
          CSharp: public readonly InputAction RightClick { get; }
          VB: Public ReadOnly Property RightClick As InputAction
        parameters: []
        return:
          type: Global.InputAction
      overload: Global.InputSystem_Actions.UIActions.RightClick*
      modifiers:
        CSharp:
        - public
        - readonly
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.UIActions.MiddleClick
      commentId: P:Global.InputSystem_Actions.UIActions.MiddleClick
      language: CSharp
      name:
        CSharp: MiddleClick
        VB: MiddleClick
      nameWithType:
        CSharp: InputSystem_Actions.UIActions.MiddleClick
        VB: InputSystem_Actions.UIActions.MiddleClick
      qualifiedName:
        CSharp: InputSystem_Actions.UIActions.MiddleClick
        VB: InputSystem_Actions.UIActions.MiddleClick
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MiddleClick
        path: ''
        startLine: 59434
      syntax:
        content:
          CSharp: public readonly InputAction MiddleClick { get; }
          VB: Public ReadOnly Property MiddleClick As InputAction
        parameters: []
        return:
          type: Global.InputAction
      overload: Global.InputSystem_Actions.UIActions.MiddleClick*
      modifiers:
        CSharp:
        - public
        - readonly
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.UIActions.ScrollWheel
      commentId: P:Global.InputSystem_Actions.UIActions.ScrollWheel
      language: CSharp
      name:
        CSharp: ScrollWheel
        VB: ScrollWheel
      nameWithType:
        CSharp: InputSystem_Actions.UIActions.ScrollWheel
        VB: InputSystem_Actions.UIActions.ScrollWheel
      qualifiedName:
        CSharp: InputSystem_Actions.UIActions.ScrollWheel
        VB: InputSystem_Actions.UIActions.ScrollWheel
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ScrollWheel
        path: ''
        startLine: 59435
      syntax:
        content:
          CSharp: public readonly InputAction ScrollWheel { get; }
          VB: Public ReadOnly Property ScrollWheel As InputAction
        parameters: []
        return:
          type: Global.InputAction
      overload: Global.InputSystem_Actions.UIActions.ScrollWheel*
      modifiers:
        CSharp:
        - public
        - readonly
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.UIActions.TrackedDevicePosition
      commentId: P:Global.InputSystem_Actions.UIActions.TrackedDevicePosition
      language: CSharp
      name:
        CSharp: TrackedDevicePosition
        VB: TrackedDevicePosition
      nameWithType:
        CSharp: InputSystem_Actions.UIActions.TrackedDevicePosition
        VB: InputSystem_Actions.UIActions.TrackedDevicePosition
      qualifiedName:
        CSharp: InputSystem_Actions.UIActions.TrackedDevicePosition
        VB: InputSystem_Actions.UIActions.TrackedDevicePosition
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: TrackedDevicePosition
        path: ''
        startLine: 59436
      syntax:
        content:
          CSharp: public readonly InputAction TrackedDevicePosition { get; }
          VB: Public ReadOnly Property TrackedDevicePosition As InputAction
        parameters: []
        return:
          type: Global.InputAction
      overload: Global.InputSystem_Actions.UIActions.TrackedDevicePosition*
      modifiers:
        CSharp:
        - public
        - readonly
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.UIActions.TrackedDeviceOrientation
      commentId: P:Global.InputSystem_Actions.UIActions.TrackedDeviceOrientation
      language: CSharp
      name:
        CSharp: TrackedDeviceOrientation
        VB: TrackedDeviceOrientation
      nameWithType:
        CSharp: InputSystem_Actions.UIActions.TrackedDeviceOrientation
        VB: InputSystem_Actions.UIActions.TrackedDeviceOrientation
      qualifiedName:
        CSharp: InputSystem_Actions.UIActions.TrackedDeviceOrientation
        VB: InputSystem_Actions.UIActions.TrackedDeviceOrientation
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: TrackedDeviceOrientation
        path: ''
        startLine: 59437
      syntax:
        content:
          CSharp: public readonly InputAction TrackedDeviceOrientation { get; }
          VB: Public ReadOnly Property TrackedDeviceOrientation As InputAction
        parameters: []
        return:
          type: Global.InputAction
      overload: Global.InputSystem_Actions.UIActions.TrackedDeviceOrientation*
      modifiers:
        CSharp:
        - public
        - readonly
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.UIActions.Get
      commentId: M:Global.InputSystem_Actions.UIActions.Get
      language: CSharp
      name:
        CSharp: Get()
        VB: Get()
      nameWithType:
        CSharp: InputSystem_Actions.UIActions.Get()
        VB: InputSystem_Actions.UIActions.Get()
      qualifiedName:
        CSharp: InputSystem_Actions.UIActions.Get()
        VB: InputSystem_Actions.UIActions.Get()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Get
        path: ''
        startLine: 59438
      syntax:
        content:
          CSharp: public InputActionMap Get()
          VB: Public Function Get As InputActionMap
        return:
          type: Global.InputActionMap
      overload: Global.InputSystem_Actions.UIActions.Get*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InputSystem_Actions.UIActions.Enable
      commentId: M:Global.InputSystem_Actions.UIActions.Enable
      language: CSharp
      name:
        CSharp: Enable()
        VB: Enable()
      nameWithType:
        CSharp: InputSystem_Actions.UIActions.Enable()
        VB: InputSystem_Actions.UIActions.Enable()
      qualifiedName:
        CSharp: InputSystem_Actions.UIActions.Enable()
        VB: InputSystem_Actions.UIActions.Enable()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Enable
        path: ''
        startLine: 59439
      syntax:
        content:
          CSharp: public void Enable()
          VB: Public Sub Enable
      overload: Global.InputSystem_Actions.UIActions.Enable*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InputSystem_Actions.UIActions.Disable
      commentId: M:Global.InputSystem_Actions.UIActions.Disable
      language: CSharp
      name:
        CSharp: Disable()
        VB: Disable()
      nameWithType:
        CSharp: InputSystem_Actions.UIActions.Disable()
        VB: InputSystem_Actions.UIActions.Disable()
      qualifiedName:
        CSharp: InputSystem_Actions.UIActions.Disable()
        VB: InputSystem_Actions.UIActions.Disable()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Disable
        path: ''
        startLine: 59440
      syntax:
        content:
          CSharp: public void Disable()
          VB: Public Sub Disable
      overload: Global.InputSystem_Actions.UIActions.Disable*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InputSystem_Actions.UIActions.enabled
      commentId: P:Global.InputSystem_Actions.UIActions.enabled
      language: CSharp
      name:
        CSharp: enabled
        VB: enabled
      nameWithType:
        CSharp: InputSystem_Actions.UIActions.enabled
        VB: InputSystem_Actions.UIActions.enabled
      qualifiedName:
        CSharp: InputSystem_Actions.UIActions.enabled
        VB: InputSystem_Actions.UIActions.enabled
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: enabled
        path: ''
        startLine: 59441
      syntax:
        content:
          CSharp: public readonly bool enabled { get; }
          VB: Public ReadOnly Property enabled As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.InputSystem_Actions.UIActions.enabled*
      modifiers:
        CSharp:
        - public
        - readonly
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputSystem_Actions.UIActions.op_Implicit(InputSystem_Actions.UIActions)~InputActionMap
      commentId: M:Global.InputSystem_Actions.UIActions.op_Implicit(InputSystem_Actions.UIActions)~InputActionMap
      language: CSharp
      name:
        CSharp: Implicit(InputSystem_Actions.UIActions to InputActionMap)
        VB: Widening(InputSystem_Actions.UIActions to InputActionMap)
      nameWithType:
        CSharp: InputSystem_Actions.UIActions.Implicit(InputSystem_Actions.UIActions to InputActionMap)
        VB: InputSystem_Actions.UIActions.Widening(InputSystem_Actions.UIActions to InputActionMap)
      qualifiedName:
        CSharp: InputSystem_Actions.UIActions.Implicit(InputSystem_Actions.UIActions to InputActionMap)
        VB: InputSystem_Actions.UIActions.Widening(InputSystem_Actions.UIActions to InputActionMap)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Implicit
        path: ''
        startLine: 59442
      syntax:
        content:
          CSharp: public static implicit operator InputActionMap(InputSystem_Actions.UIActions set)
          VB: Public Shared Widening Operator CType(set As InputSystem_Actions.UIActions) As InputActionMap
        parameters:
        - id: set
          type: Global.InputSystem_Actions.UIActions
        return:
          type: Global.InputActionMap
      overload: Global.InputSystem_Actions.UIActions.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.InputSystem_Actions.UIActions.AddCallbacks(InputSystem_Actions.IUIActions)
      commentId: M:Global.InputSystem_Actions.UIActions.AddCallbacks(InputSystem_Actions.IUIActions)
      language: CSharp
      name:
        CSharp: AddCallbacks(InputSystem_Actions.IUIActions)
        VB: AddCallbacks(InputSystem_Actions.IUIActions)
      nameWithType:
        CSharp: InputSystem_Actions.UIActions.AddCallbacks(InputSystem_Actions.IUIActions)
        VB: InputSystem_Actions.UIActions.AddCallbacks(InputSystem_Actions.IUIActions)
      qualifiedName:
        CSharp: InputSystem_Actions.UIActions.AddCallbacks(InputSystem_Actions.IUIActions)
        VB: InputSystem_Actions.UIActions.AddCallbacks(InputSystem_Actions.IUIActions)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddCallbacks
        path: ''
        startLine: 59443
      syntax:
        content:
          CSharp: public void AddCallbacks(InputSystem_Actions.IUIActions instance)
          VB: Public Sub AddCallbacks(instance As InputSystem_Actions.IUIActions)
        parameters:
        - id: instance
          type: Global.InputSystem_Actions.IUIActions
      overload: Global.InputSystem_Actions.UIActions.AddCallbacks*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InputSystem_Actions.UIActions.RemoveCallbacks(InputSystem_Actions.IUIActions)
      commentId: M:Global.InputSystem_Actions.UIActions.RemoveCallbacks(InputSystem_Actions.IUIActions)
      language: CSharp
      name:
        CSharp: RemoveCallbacks(InputSystem_Actions.IUIActions)
        VB: RemoveCallbacks(InputSystem_Actions.IUIActions)
      nameWithType:
        CSharp: InputSystem_Actions.UIActions.RemoveCallbacks(InputSystem_Actions.IUIActions)
        VB: InputSystem_Actions.UIActions.RemoveCallbacks(InputSystem_Actions.IUIActions)
      qualifiedName:
        CSharp: InputSystem_Actions.UIActions.RemoveCallbacks(InputSystem_Actions.IUIActions)
        VB: InputSystem_Actions.UIActions.RemoveCallbacks(InputSystem_Actions.IUIActions)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RemoveCallbacks
        path: ''
        startLine: 59513
      syntax:
        content:
          CSharp: public void RemoveCallbacks(InputSystem_Actions.IUIActions instance)
          VB: Public Sub RemoveCallbacks(instance As InputSystem_Actions.IUIActions)
        parameters:
        - id: instance
          type: Global.InputSystem_Actions.IUIActions
      overload: Global.InputSystem_Actions.UIActions.RemoveCallbacks*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InputSystem_Actions.UIActions.SetCallbacks(InputSystem_Actions.IUIActions)
      commentId: M:Global.InputSystem_Actions.UIActions.SetCallbacks(InputSystem_Actions.IUIActions)
      language: CSharp
      name:
        CSharp: SetCallbacks(InputSystem_Actions.IUIActions)
        VB: SetCallbacks(InputSystem_Actions.IUIActions)
      nameWithType:
        CSharp: InputSystem_Actions.UIActions.SetCallbacks(InputSystem_Actions.IUIActions)
        VB: InputSystem_Actions.UIActions.SetCallbacks(InputSystem_Actions.IUIActions)
      qualifiedName:
        CSharp: InputSystem_Actions.UIActions.SetCallbacks(InputSystem_Actions.IUIActions)
        VB: InputSystem_Actions.UIActions.SetCallbacks(InputSystem_Actions.IUIActions)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetCallbacks
        path: ''
        startLine: 59519
      syntax:
        content:
          CSharp: public void SetCallbacks(InputSystem_Actions.IUIActions instance)
          VB: Public Sub SetCallbacks(instance As InputSystem_Actions.IUIActions)
        parameters:
        - id: instance
          type: Global.InputSystem_Actions.IUIActions
      overload: Global.InputSystem_Actions.UIActions.SetCallbacks*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.InputSystem_Actions.IPlayerActions
    commentId: T:Global.InputSystem_Actions.IPlayerActions
    language: CSharp
    name:
      CSharp: InputSystem_Actions.IPlayerActions
      VB: InputSystem_Actions.IPlayerActions
    nameWithType:
      CSharp: InputSystem_Actions.IPlayerActions
      VB: InputSystem_Actions.IPlayerActions
    qualifiedName:
      CSharp: InputSystem_Actions.IPlayerActions
      VB: InputSystem_Actions.IPlayerActions
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: IPlayerActions
      path: ''
      startLine: 59573
    syntax:
      content:
        CSharp: public interface IPlayerActions
        VB: Public Interface IPlayerActions
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: Global.InputSystem_Actions.IPlayerActions.OnMove(InputAction.CallbackContext)
      commentId: M:Global.InputSystem_Actions.IPlayerActions.OnMove(InputAction.CallbackContext)
      language: CSharp
      name:
        CSharp: OnMove(InputAction.CallbackContext)
        VB: OnMove(InputAction.CallbackContext)
      nameWithType:
        CSharp: InputSystem_Actions.IPlayerActions.OnMove(InputAction.CallbackContext)
        VB: InputSystem_Actions.IPlayerActions.OnMove(InputAction.CallbackContext)
      qualifiedName:
        CSharp: InputSystem_Actions.IPlayerActions.OnMove(InputAction.CallbackContext)
        VB: InputSystem_Actions.IPlayerActions.OnMove(InputAction.CallbackContext)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnMove
        path: ''
        startLine: 59575
      syntax:
        content:
          CSharp: void OnMove(InputAction.CallbackContext context)
          VB: Sub OnMove(context As InputAction.CallbackContext)
        parameters:
        - id: context
          type: Global.InputAction.CallbackContext
      overload: Global.InputSystem_Actions.IPlayerActions.OnMove*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.InputSystem_Actions.IPlayerActions.OnLook(InputAction.CallbackContext)
      commentId: M:Global.InputSystem_Actions.IPlayerActions.OnLook(InputAction.CallbackContext)
      language: CSharp
      name:
        CSharp: OnLook(InputAction.CallbackContext)
        VB: OnLook(InputAction.CallbackContext)
      nameWithType:
        CSharp: InputSystem_Actions.IPlayerActions.OnLook(InputAction.CallbackContext)
        VB: InputSystem_Actions.IPlayerActions.OnLook(InputAction.CallbackContext)
      qualifiedName:
        CSharp: InputSystem_Actions.IPlayerActions.OnLook(InputAction.CallbackContext)
        VB: InputSystem_Actions.IPlayerActions.OnLook(InputAction.CallbackContext)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnLook
        path: ''
        startLine: 59576
      syntax:
        content:
          CSharp: void OnLook(InputAction.CallbackContext context)
          VB: Sub OnLook(context As InputAction.CallbackContext)
        parameters:
        - id: context
          type: Global.InputAction.CallbackContext
      overload: Global.InputSystem_Actions.IPlayerActions.OnLook*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.InputSystem_Actions.IPlayerActions.OnInteract(InputAction.CallbackContext)
      commentId: M:Global.InputSystem_Actions.IPlayerActions.OnInteract(InputAction.CallbackContext)
      language: CSharp
      name:
        CSharp: OnInteract(InputAction.CallbackContext)
        VB: OnInteract(InputAction.CallbackContext)
      nameWithType:
        CSharp: InputSystem_Actions.IPlayerActions.OnInteract(InputAction.CallbackContext)
        VB: InputSystem_Actions.IPlayerActions.OnInteract(InputAction.CallbackContext)
      qualifiedName:
        CSharp: InputSystem_Actions.IPlayerActions.OnInteract(InputAction.CallbackContext)
        VB: InputSystem_Actions.IPlayerActions.OnInteract(InputAction.CallbackContext)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnInteract
        path: ''
        startLine: 59577
      syntax:
        content:
          CSharp: void OnInteract(InputAction.CallbackContext context)
          VB: Sub OnInteract(context As InputAction.CallbackContext)
        parameters:
        - id: context
          type: Global.InputAction.CallbackContext
      overload: Global.InputSystem_Actions.IPlayerActions.OnInteract*
      modifiers:
        CSharp: []
        VB: []
  - id: Global.InputSystem_Actions.IUIActions
    commentId: T:Global.InputSystem_Actions.IUIActions
    language: CSharp
    name:
      CSharp: InputSystem_Actions.IUIActions
      VB: InputSystem_Actions.IUIActions
    nameWithType:
      CSharp: InputSystem_Actions.IUIActions
      VB: InputSystem_Actions.IUIActions
    qualifiedName:
      CSharp: InputSystem_Actions.IUIActions
      VB: InputSystem_Actions.IUIActions
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: IUIActions
      path: ''
      startLine: 59579
    syntax:
      content:
        CSharp: public interface IUIActions
        VB: Public Interface IUIActions
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: Global.InputSystem_Actions.IUIActions.OnNavigate(InputAction.CallbackContext)
      commentId: M:Global.InputSystem_Actions.IUIActions.OnNavigate(InputAction.CallbackContext)
      language: CSharp
      name:
        CSharp: OnNavigate(InputAction.CallbackContext)
        VB: OnNavigate(InputAction.CallbackContext)
      nameWithType:
        CSharp: InputSystem_Actions.IUIActions.OnNavigate(InputAction.CallbackContext)
        VB: InputSystem_Actions.IUIActions.OnNavigate(InputAction.CallbackContext)
      qualifiedName:
        CSharp: InputSystem_Actions.IUIActions.OnNavigate(InputAction.CallbackContext)
        VB: InputSystem_Actions.IUIActions.OnNavigate(InputAction.CallbackContext)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnNavigate
        path: ''
        startLine: 59581
      syntax:
        content:
          CSharp: void OnNavigate(InputAction.CallbackContext context)
          VB: Sub OnNavigate(context As InputAction.CallbackContext)
        parameters:
        - id: context
          type: Global.InputAction.CallbackContext
      overload: Global.InputSystem_Actions.IUIActions.OnNavigate*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.InputSystem_Actions.IUIActions.OnSubmit(InputAction.CallbackContext)
      commentId: M:Global.InputSystem_Actions.IUIActions.OnSubmit(InputAction.CallbackContext)
      language: CSharp
      name:
        CSharp: OnSubmit(InputAction.CallbackContext)
        VB: OnSubmit(InputAction.CallbackContext)
      nameWithType:
        CSharp: InputSystem_Actions.IUIActions.OnSubmit(InputAction.CallbackContext)
        VB: InputSystem_Actions.IUIActions.OnSubmit(InputAction.CallbackContext)
      qualifiedName:
        CSharp: InputSystem_Actions.IUIActions.OnSubmit(InputAction.CallbackContext)
        VB: InputSystem_Actions.IUIActions.OnSubmit(InputAction.CallbackContext)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnSubmit
        path: ''
        startLine: 59582
      syntax:
        content:
          CSharp: void OnSubmit(InputAction.CallbackContext context)
          VB: Sub OnSubmit(context As InputAction.CallbackContext)
        parameters:
        - id: context
          type: Global.InputAction.CallbackContext
      overload: Global.InputSystem_Actions.IUIActions.OnSubmit*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.InputSystem_Actions.IUIActions.OnCancel(InputAction.CallbackContext)
      commentId: M:Global.InputSystem_Actions.IUIActions.OnCancel(InputAction.CallbackContext)
      language: CSharp
      name:
        CSharp: OnCancel(InputAction.CallbackContext)
        VB: OnCancel(InputAction.CallbackContext)
      nameWithType:
        CSharp: InputSystem_Actions.IUIActions.OnCancel(InputAction.CallbackContext)
        VB: InputSystem_Actions.IUIActions.OnCancel(InputAction.CallbackContext)
      qualifiedName:
        CSharp: InputSystem_Actions.IUIActions.OnCancel(InputAction.CallbackContext)
        VB: InputSystem_Actions.IUIActions.OnCancel(InputAction.CallbackContext)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnCancel
        path: ''
        startLine: 59583
      syntax:
        content:
          CSharp: void OnCancel(InputAction.CallbackContext context)
          VB: Sub OnCancel(context As InputAction.CallbackContext)
        parameters:
        - id: context
          type: Global.InputAction.CallbackContext
      overload: Global.InputSystem_Actions.IUIActions.OnCancel*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.InputSystem_Actions.IUIActions.OnPoint(InputAction.CallbackContext)
      commentId: M:Global.InputSystem_Actions.IUIActions.OnPoint(InputAction.CallbackContext)
      language: CSharp
      name:
        CSharp: OnPoint(InputAction.CallbackContext)
        VB: OnPoint(InputAction.CallbackContext)
      nameWithType:
        CSharp: InputSystem_Actions.IUIActions.OnPoint(InputAction.CallbackContext)
        VB: InputSystem_Actions.IUIActions.OnPoint(InputAction.CallbackContext)
      qualifiedName:
        CSharp: InputSystem_Actions.IUIActions.OnPoint(InputAction.CallbackContext)
        VB: InputSystem_Actions.IUIActions.OnPoint(InputAction.CallbackContext)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnPoint
        path: ''
        startLine: 59584
      syntax:
        content:
          CSharp: void OnPoint(InputAction.CallbackContext context)
          VB: Sub OnPoint(context As InputAction.CallbackContext)
        parameters:
        - id: context
          type: Global.InputAction.CallbackContext
      overload: Global.InputSystem_Actions.IUIActions.OnPoint*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.InputSystem_Actions.IUIActions.OnClick(InputAction.CallbackContext)
      commentId: M:Global.InputSystem_Actions.IUIActions.OnClick(InputAction.CallbackContext)
      language: CSharp
      name:
        CSharp: OnClick(InputAction.CallbackContext)
        VB: OnClick(InputAction.CallbackContext)
      nameWithType:
        CSharp: InputSystem_Actions.IUIActions.OnClick(InputAction.CallbackContext)
        VB: InputSystem_Actions.IUIActions.OnClick(InputAction.CallbackContext)
      qualifiedName:
        CSharp: InputSystem_Actions.IUIActions.OnClick(InputAction.CallbackContext)
        VB: InputSystem_Actions.IUIActions.OnClick(InputAction.CallbackContext)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnClick
        path: ''
        startLine: 59585
      syntax:
        content:
          CSharp: void OnClick(InputAction.CallbackContext context)
          VB: Sub OnClick(context As InputAction.CallbackContext)
        parameters:
        - id: context
          type: Global.InputAction.CallbackContext
      overload: Global.InputSystem_Actions.IUIActions.OnClick*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.InputSystem_Actions.IUIActions.OnRightClick(InputAction.CallbackContext)
      commentId: M:Global.InputSystem_Actions.IUIActions.OnRightClick(InputAction.CallbackContext)
      language: CSharp
      name:
        CSharp: OnRightClick(InputAction.CallbackContext)
        VB: OnRightClick(InputAction.CallbackContext)
      nameWithType:
        CSharp: InputSystem_Actions.IUIActions.OnRightClick(InputAction.CallbackContext)
        VB: InputSystem_Actions.IUIActions.OnRightClick(InputAction.CallbackContext)
      qualifiedName:
        CSharp: InputSystem_Actions.IUIActions.OnRightClick(InputAction.CallbackContext)
        VB: InputSystem_Actions.IUIActions.OnRightClick(InputAction.CallbackContext)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnRightClick
        path: ''
        startLine: 59586
      syntax:
        content:
          CSharp: void OnRightClick(InputAction.CallbackContext context)
          VB: Sub OnRightClick(context As InputAction.CallbackContext)
        parameters:
        - id: context
          type: Global.InputAction.CallbackContext
      overload: Global.InputSystem_Actions.IUIActions.OnRightClick*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.InputSystem_Actions.IUIActions.OnMiddleClick(InputAction.CallbackContext)
      commentId: M:Global.InputSystem_Actions.IUIActions.OnMiddleClick(InputAction.CallbackContext)
      language: CSharp
      name:
        CSharp: OnMiddleClick(InputAction.CallbackContext)
        VB: OnMiddleClick(InputAction.CallbackContext)
      nameWithType:
        CSharp: InputSystem_Actions.IUIActions.OnMiddleClick(InputAction.CallbackContext)
        VB: InputSystem_Actions.IUIActions.OnMiddleClick(InputAction.CallbackContext)
      qualifiedName:
        CSharp: InputSystem_Actions.IUIActions.OnMiddleClick(InputAction.CallbackContext)
        VB: InputSystem_Actions.IUIActions.OnMiddleClick(InputAction.CallbackContext)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnMiddleClick
        path: ''
        startLine: 59587
      syntax:
        content:
          CSharp: void OnMiddleClick(InputAction.CallbackContext context)
          VB: Sub OnMiddleClick(context As InputAction.CallbackContext)
        parameters:
        - id: context
          type: Global.InputAction.CallbackContext
      overload: Global.InputSystem_Actions.IUIActions.OnMiddleClick*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.InputSystem_Actions.IUIActions.OnScrollWheel(InputAction.CallbackContext)
      commentId: M:Global.InputSystem_Actions.IUIActions.OnScrollWheel(InputAction.CallbackContext)
      language: CSharp
      name:
        CSharp: OnScrollWheel(InputAction.CallbackContext)
        VB: OnScrollWheel(InputAction.CallbackContext)
      nameWithType:
        CSharp: InputSystem_Actions.IUIActions.OnScrollWheel(InputAction.CallbackContext)
        VB: InputSystem_Actions.IUIActions.OnScrollWheel(InputAction.CallbackContext)
      qualifiedName:
        CSharp: InputSystem_Actions.IUIActions.OnScrollWheel(InputAction.CallbackContext)
        VB: InputSystem_Actions.IUIActions.OnScrollWheel(InputAction.CallbackContext)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnScrollWheel
        path: ''
        startLine: 59588
      syntax:
        content:
          CSharp: void OnScrollWheel(InputAction.CallbackContext context)
          VB: Sub OnScrollWheel(context As InputAction.CallbackContext)
        parameters:
        - id: context
          type: Global.InputAction.CallbackContext
      overload: Global.InputSystem_Actions.IUIActions.OnScrollWheel*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.InputSystem_Actions.IUIActions.OnTrackedDevicePosition(InputAction.CallbackContext)
      commentId: M:Global.InputSystem_Actions.IUIActions.OnTrackedDevicePosition(InputAction.CallbackContext)
      language: CSharp
      name:
        CSharp: OnTrackedDevicePosition(InputAction.CallbackContext)
        VB: OnTrackedDevicePosition(InputAction.CallbackContext)
      nameWithType:
        CSharp: InputSystem_Actions.IUIActions.OnTrackedDevicePosition(InputAction.CallbackContext)
        VB: InputSystem_Actions.IUIActions.OnTrackedDevicePosition(InputAction.CallbackContext)
      qualifiedName:
        CSharp: InputSystem_Actions.IUIActions.OnTrackedDevicePosition(InputAction.CallbackContext)
        VB: InputSystem_Actions.IUIActions.OnTrackedDevicePosition(InputAction.CallbackContext)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnTrackedDevicePosition
        path: ''
        startLine: 59589
      syntax:
        content:
          CSharp: void OnTrackedDevicePosition(InputAction.CallbackContext context)
          VB: Sub OnTrackedDevicePosition(context As InputAction.CallbackContext)
        parameters:
        - id: context
          type: Global.InputAction.CallbackContext
      overload: Global.InputSystem_Actions.IUIActions.OnTrackedDevicePosition*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.InputSystem_Actions.IUIActions.OnTrackedDeviceOrientation(InputAction.CallbackContext)
      commentId: M:Global.InputSystem_Actions.IUIActions.OnTrackedDeviceOrientation(InputAction.CallbackContext)
      language: CSharp
      name:
        CSharp: OnTrackedDeviceOrientation(InputAction.CallbackContext)
        VB: OnTrackedDeviceOrientation(InputAction.CallbackContext)
      nameWithType:
        CSharp: InputSystem_Actions.IUIActions.OnTrackedDeviceOrientation(InputAction.CallbackContext)
        VB: InputSystem_Actions.IUIActions.OnTrackedDeviceOrientation(InputAction.CallbackContext)
      qualifiedName:
        CSharp: InputSystem_Actions.IUIActions.OnTrackedDeviceOrientation(InputAction.CallbackContext)
        VB: InputSystem_Actions.IUIActions.OnTrackedDeviceOrientation(InputAction.CallbackContext)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnTrackedDeviceOrientation
        path: ''
        startLine: 59590
      syntax:
        content:
          CSharp: void OnTrackedDeviceOrientation(InputAction.CallbackContext context)
          VB: Sub OnTrackedDeviceOrientation(context As InputAction.CallbackContext)
        parameters:
        - id: context
          type: Global.InputAction.CallbackContext
      overload: Global.InputSystem_Actions.IUIActions.OnTrackedDeviceOrientation*
      modifiers:
        CSharp: []
        VB: []
  - id: Global.CharacterBase
    commentId: T:Global.CharacterBase
    language: CSharp
    name:
      CSharp: CharacterBase
      VB: CharacterBase
    nameWithType:
      CSharp: CharacterBase
      VB: CharacterBase
    qualifiedName:
      CSharp: CharacterBase
      VB: CharacterBase
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: CharacterBase
      path: ''
      startLine: 59597
    syntax:
      content:
        CSharp: 'public abstract class CharacterBase : StateMachine'
        VB: >-
          Public MustInherit Class CharacterBase

              Inherits StateMachine
    inheritance:
    - System.Object
    - Global.StateMachine
    inheritedMembers:
    - Global.StateMachine.CurrentState
    - Global.StateMachine.OnStateChanged(IState)
    - Global.StateMachine.ChangeState(IState)
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Global.CharacterBase.Animator
      commentId: F:Global.CharacterBase.Animator
      language: CSharp
      name:
        CSharp: Animator
        VB: Animator
      nameWithType:
        CSharp: CharacterBase.Animator
        VB: CharacterBase.Animator
      qualifiedName:
        CSharp: CharacterBase.Animator
        VB: CharacterBase.Animator
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Animator
        path: ''
        startLine: 59599
      syntax:
        content:
          CSharp: public Animator Animator
          VB: Public Animator As Animator
        return:
          type: Global.Animator
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.CharacterBase._movement
      commentId: F:Global.CharacterBase._movement
      language: CSharp
      name:
        CSharp: _movement
        VB: _movement
      nameWithType:
        CSharp: CharacterBase._movement
        VB: CharacterBase._movement
      qualifiedName:
        CSharp: CharacterBase._movement
        VB: CharacterBase._movement
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: _movement
        path: ''
        startLine: 59601
      syntax:
        content:
          CSharp: protected Movement _movement
          VB: Protected _movement As Movement
        return:
          type: Global.Movement
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Global.CharacterBase.Start
      commentId: M:Global.CharacterBase.Start
      language: CSharp
      name:
        CSharp: Start()
        VB: Start()
      nameWithType:
        CSharp: CharacterBase.Start()
        VB: CharacterBase.Start()
      qualifiedName:
        CSharp: CharacterBase.Start()
        VB: CharacterBase.Start()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Start
        path: ''
        startLine: 59603
      syntax:
        content:
          CSharp: protected override void Start()
          VB: Protected Overrides Sub Start
      overload: Global.CharacterBase.Start*
      overridden: Global.StateMachine.Start
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Global.CharacterBase.Update
      commentId: M:Global.CharacterBase.Update
      language: CSharp
      name:
        CSharp: Update()
        VB: Update()
      nameWithType:
        CSharp: CharacterBase.Update()
        VB: CharacterBase.Update()
      qualifiedName:
        CSharp: CharacterBase.Update()
        VB: CharacterBase.Update()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Update
        path: ''
        startLine: 59609
      syntax:
        content:
          CSharp: protected virtual void Update()
          VB: Protected Overridable Sub Update
      overload: Global.CharacterBase.Update*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
  - id: Global.NPCModel
    commentId: T:Global.NPCModel
    language: CSharp
    name:
      CSharp: NPCModel
      VB: NPCModel
    nameWithType:
      CSharp: NPCModel
      VB: NPCModel
    qualifiedName:
      CSharp: NPCModel
      VB: NPCModel
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: NPCModel
      path: ''
      startLine: 59617
    syntax:
      content:
        CSharp: 'public class NPCModel : MonoBehaviour'
        VB: >-
          Public Class NPCModel

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.NPCPresenter
    commentId: T:Global.NPCPresenter
    language: CSharp
    name:
      CSharp: NPCPresenter
      VB: NPCPresenter
    nameWithType:
      CSharp: NPCPresenter
      VB: NPCPresenter
    qualifiedName:
      CSharp: NPCPresenter
      VB: NPCPresenter
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: NPCPresenter
      path: ''
      startLine: 59634
    syntax:
      content:
        CSharp: 'public class NPCPresenter : MonoBehaviour'
        VB: >-
          Public Class NPCPresenter

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.NPCIdleState
    commentId: T:Global.NPCIdleState
    language: CSharp
    name:
      CSharp: NPCIdleState
      VB: NPCIdleState
    nameWithType:
      CSharp: NPCIdleState
      VB: NPCIdleState
    qualifiedName:
      CSharp: NPCIdleState
      VB: NPCIdleState
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: NPCIdleState
      path: ''
      startLine: 59651
    syntax:
      content:
        CSharp: 'public class NPCIdleState : MonoBehaviour'
        VB: >-
          Public Class NPCIdleState

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.NPCView
    commentId: T:Global.NPCView
    language: CSharp
    name:
      CSharp: NPCView
      VB: NPCView
    nameWithType:
      CSharp: NPCView
      VB: NPCView
    qualifiedName:
      CSharp: NPCView
      VB: NPCView
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: NPCView
      path: ''
      startLine: 59668
    syntax:
      content:
        CSharp: 'public class NPCView : MonoBehaviour'
        VB: >-
          Public Class NPCView

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.PlayerModel
    commentId: T:Global.PlayerModel
    language: CSharp
    name:
      CSharp: PlayerModel
      VB: PlayerModel
    nameWithType:
      CSharp: PlayerModel
      VB: PlayerModel
    qualifiedName:
      CSharp: PlayerModel
      VB: PlayerModel
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PlayerModel
      path: ''
      startLine: 59685
    syntax:
      content:
        CSharp: 'public class PlayerModel : MonoBehaviour'
        VB: >-
          Public Class PlayerModel

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.PlayerPresenter
    commentId: T:Global.PlayerPresenter
    language: CSharp
    name:
      CSharp: PlayerPresenter
      VB: PlayerPresenter
    nameWithType:
      CSharp: PlayerPresenter
      VB: PlayerPresenter
    qualifiedName:
      CSharp: PlayerPresenter
      VB: PlayerPresenter
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PlayerPresenter
      path: ''
      startLine: 59702
    syntax:
      content:
        CSharp: 'public class PlayerPresenter : MonoBehaviour'
        VB: >-
          Public Class PlayerPresenter

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.PlayerIdleState
    commentId: T:Global.PlayerIdleState
    language: CSharp
    name:
      CSharp: PlayerIdleState
      VB: PlayerIdleState
    nameWithType:
      CSharp: PlayerIdleState
      VB: PlayerIdleState
    qualifiedName:
      CSharp: PlayerIdleState
      VB: PlayerIdleState
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PlayerIdleState
      path: ''
      startLine: 59719
    syntax:
      content:
        CSharp: 'public class PlayerIdleState : MonoBehaviour'
        VB: >-
          Public Class PlayerIdleState

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.PlayerView
    commentId: T:Global.PlayerView
    language: CSharp
    name:
      CSharp: PlayerView
      VB: PlayerView
    nameWithType:
      CSharp: PlayerView
      VB: PlayerView
    qualifiedName:
      CSharp: PlayerView
      VB: PlayerView
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PlayerView
      path: ''
      startLine: 59736
    syntax:
      content:
        CSharp: 'public class PlayerView : MonoBehaviour'
        VB: >-
          Public Class PlayerView

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.InputHandler
    commentId: T:Global.InputHandler
    language: CSharp
    name:
      CSharp: InputHandler
      VB: InputHandler
    nameWithType:
      CSharp: InputHandler
      VB: InputHandler
    qualifiedName:
      CSharp: InputHandler
      VB: InputHandler
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: InputHandler
      path: ''
      startLine: 59754
    syntax:
      content:
        CSharp: 'public class InputHandler : MonoBehaviour, InputSystem_Actions.IPlayerActions'
        VB: >-
          Public Class InputHandler

              Inherits MonoBehaviour

              Implements InputSystem_Actions.IPlayerActions
    inheritance:
    - System.Object
    implements:
    - Global.InputSystem_Actions.IPlayerActions
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.InputHandler.MovementDirection
      commentId: P:Global.InputHandler.MovementDirection
      language: CSharp
      name:
        CSharp: MovementDirection
        VB: MovementDirection
      nameWithType:
        CSharp: InputHandler.MovementDirection
        VB: InputHandler.MovementDirection
      qualifiedName:
        CSharp: InputHandler.MovementDirection
        VB: InputHandler.MovementDirection
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MovementDirection
        path: ''
        startLine: 59759
      syntax:
        content:
          CSharp: public ReactiveProperty<Vector2> MovementDirection { get; }
          VB: Public ReadOnly Property MovementDirection As ReactiveProperty(Of Vector2)
        parameters: []
        return:
          type: Global.ReactiveProperty{Vector2}
      overload: Global.InputHandler.MovementDirection*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.InputHandler.OnMove(InputAction.CallbackContext)
      commentId: M:Global.InputHandler.OnMove(InputAction.CallbackContext)
      language: CSharp
      name:
        CSharp: OnMove(InputAction.CallbackContext)
        VB: OnMove(InputAction.CallbackContext)
      nameWithType:
        CSharp: InputHandler.OnMove(InputAction.CallbackContext)
        VB: InputHandler.OnMove(InputAction.CallbackContext)
      qualifiedName:
        CSharp: InputHandler.OnMove(InputAction.CallbackContext)
        VB: InputHandler.OnMove(InputAction.CallbackContext)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnMove
        path: ''
        startLine: 59777
      syntax:
        content:
          CSharp: public void OnMove(InputAction.CallbackContext context)
          VB: Public Sub OnMove(context As InputAction.CallbackContext)
        parameters:
        - id: context
          type: Global.InputAction.CallbackContext
      overload: Global.InputHandler.OnMove*
      implements:
      - Global.InputSystem_Actions.IPlayerActions.OnMove(InputAction.CallbackContext)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InputHandler.OnLook(UnityEngine.InputSystem.InputAction.CallbackContext)
      commentId: M:Global.InputHandler.OnLook(UnityEngine.InputSystem.InputAction.CallbackContext)
      language: CSharp
      name:
        CSharp: OnLook(UnityEngine.InputSystem.InputAction.CallbackContext)
        VB: OnLook(UnityEngine.InputSystem.InputAction.CallbackContext)
      nameWithType:
        CSharp: InputHandler.OnLook(UnityEngine.InputSystem.InputAction.CallbackContext)
        VB: InputHandler.OnLook(UnityEngine.InputSystem.InputAction.CallbackContext)
      qualifiedName:
        CSharp: InputHandler.OnLook(UnityEngine.InputSystem.InputAction.CallbackContext)
        VB: InputHandler.OnLook(UnityEngine.InputSystem.InputAction.CallbackContext)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnLook
        path: ''
        startLine: 59789
      syntax:
        content:
          CSharp: public void OnLook(UnityEngine.InputSystem.InputAction.CallbackContext context)
          VB: Public Sub OnLook(context As UnityEngine.InputSystem.InputAction.CallbackContext)
        parameters:
        - id: context
          type: Global.UnityEngine.InputSystem.InputAction.CallbackContext
      overload: Global.InputHandler.OnLook*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InputHandler.OnInteract(UnityEngine.InputSystem.InputAction.CallbackContext)
      commentId: M:Global.InputHandler.OnInteract(UnityEngine.InputSystem.InputAction.CallbackContext)
      language: CSharp
      name:
        CSharp: OnInteract(UnityEngine.InputSystem.InputAction.CallbackContext)
        VB: OnInteract(UnityEngine.InputSystem.InputAction.CallbackContext)
      nameWithType:
        CSharp: InputHandler.OnInteract(UnityEngine.InputSystem.InputAction.CallbackContext)
        VB: InputHandler.OnInteract(UnityEngine.InputSystem.InputAction.CallbackContext)
      qualifiedName:
        CSharp: InputHandler.OnInteract(UnityEngine.InputSystem.InputAction.CallbackContext)
        VB: InputHandler.OnInteract(UnityEngine.InputSystem.InputAction.CallbackContext)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnInteract
        path: ''
        startLine: 59790
      syntax:
        content:
          CSharp: public void OnInteract(UnityEngine.InputSystem.InputAction.CallbackContext context)
          VB: Public Sub OnInteract(context As UnityEngine.InputSystem.InputAction.CallbackContext)
        parameters:
        - id: context
          type: Global.UnityEngine.InputSystem.InputAction.CallbackContext
      overload: Global.InputHandler.OnInteract*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.DisposableAction
    commentId: T:Global.DisposableAction
    language: CSharp
    name:
      CSharp: DisposableAction
      VB: DisposableAction
    nameWithType:
      CSharp: DisposableAction
      VB: DisposableAction
    qualifiedName:
      CSharp: DisposableAction
      VB: DisposableAction
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: DisposableAction
      path: ''
      startLine: 59796
    syntax:
      content:
        CSharp: 'public class DisposableAction : IDisposable'
        VB: >-
          Public Class DisposableAction

              Inherits IDisposable
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.DisposableAction.#ctor(Action)
      commentId: M:Global.DisposableAction.#ctor(Action)
      language: CSharp
      name:
        CSharp: DisposableAction(Action)
        VB: DisposableAction(Action)
      nameWithType:
        CSharp: DisposableAction.DisposableAction(Action)
        VB: DisposableAction.DisposableAction(Action)
      qualifiedName:
        CSharp: DisposableAction.DisposableAction(Action)
        VB: DisposableAction.DisposableAction(Action)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 59800
      syntax:
        content:
          CSharp: public DisposableAction(Action action)
          VB: Public Sub New(action As Action)
        parameters:
        - id: action
          type: Global.Action
      overload: Global.DisposableAction.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.DisposableAction.Dispose
      commentId: M:Global.DisposableAction.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: DisposableAction.Dispose()
        VB: DisposableAction.Dispose()
      qualifiedName:
        CSharp: DisposableAction.Dispose()
        VB: DisposableAction.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Dispose
        path: ''
        startLine: 59805
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: Global.DisposableAction.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.Movement
    commentId: T:Global.Movement
    language: CSharp
    name:
      CSharp: Movement
      VB: Movement
    nameWithType:
      CSharp: Movement
      VB: Movement
    qualifiedName:
      CSharp: Movement
      VB: Movement
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Movement
      path: ''
      startLine: 59813
    syntax:
      content:
        CSharp: 'public class Movement : MonoBehaviour'
        VB: >-
          Public Class Movement

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.IState
    commentId: T:Global.IState
    language: CSharp
    name:
      CSharp: IState
      VB: IState
    nameWithType:
      CSharp: IState
      VB: IState
    qualifiedName:
      CSharp: IState
      VB: IState
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: IState
      path: ''
      startLine: 59828
    syntax:
      content:
        CSharp: public interface IState
        VB: Public Interface IState
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: Global.IState.Enter
      commentId: M:Global.IState.Enter
      language: CSharp
      name:
        CSharp: Enter()
        VB: Enter()
      nameWithType:
        CSharp: IState.Enter()
        VB: IState.Enter()
      qualifiedName:
        CSharp: IState.Enter()
        VB: IState.Enter()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Enter
        path: ''
        startLine: 59830
      syntax:
        content:
          CSharp: void Enter()
          VB: Sub Enter
      overload: Global.IState.Enter*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.IState.Update
      commentId: M:Global.IState.Update
      language: CSharp
      name:
        CSharp: Update()
        VB: Update()
      nameWithType:
        CSharp: IState.Update()
        VB: IState.Update()
      qualifiedName:
        CSharp: IState.Update()
        VB: IState.Update()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Update
        path: ''
        startLine: 59831
      syntax:
        content:
          CSharp: void Update()
          VB: Sub Update
      overload: Global.IState.Update*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.IState.Exit
      commentId: M:Global.IState.Exit
      language: CSharp
      name:
        CSharp: Exit()
        VB: Exit()
      nameWithType:
        CSharp: IState.Exit()
        VB: IState.Exit()
      qualifiedName:
        CSharp: IState.Exit()
        VB: IState.Exit()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Exit
        path: ''
        startLine: 59832
      syntax:
        content:
          CSharp: void Exit()
          VB: Sub Exit
      overload: Global.IState.Exit*
      modifiers:
        CSharp: []
        VB: []
  - id: Global.StateMachine
    commentId: T:Global.StateMachine
    language: CSharp
    name:
      CSharp: StateMachine
      VB: StateMachine
    nameWithType:
      CSharp: StateMachine
      VB: StateMachine
    qualifiedName:
      CSharp: StateMachine
      VB: StateMachine
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: StateMachine
      path: ''
      startLine: 59836
    syntax:
      content:
        CSharp: 'public abstract class StateMachine : MonoBehaviour'
        VB: >-
          Public MustInherit Class StateMachine

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Global.StateMachine.CurrentState
      commentId: F:Global.StateMachine.CurrentState
      language: CSharp
      name:
        CSharp: CurrentState
        VB: CurrentState
      nameWithType:
        CSharp: StateMachine.CurrentState
        VB: StateMachine.CurrentState
      qualifiedName:
        CSharp: StateMachine.CurrentState
        VB: StateMachine.CurrentState
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CurrentState
        path: ''
        startLine: 59838
      syntax:
        content:
          CSharp: protected ReactiveProperty<IState> CurrentState
          VB: Protected CurrentState As ReactiveProperty(Of IState)
        return:
          type: Global.ReactiveProperty{IState}
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Global.StateMachine.Start
      commentId: M:Global.StateMachine.Start
      language: CSharp
      name:
        CSharp: Start()
        VB: Start()
      nameWithType:
        CSharp: StateMachine.Start()
        VB: StateMachine.Start()
      qualifiedName:
        CSharp: StateMachine.Start()
        VB: StateMachine.Start()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Start
        path: ''
        startLine: 59840
      syntax:
        content:
          CSharp: protected virtual void Start()
          VB: Protected Overridable Sub Start
      overload: Global.StateMachine.Start*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Global.StateMachine.OnStateChanged(IState)
      commentId: M:Global.StateMachine.OnStateChanged(IState)
      language: CSharp
      name:
        CSharp: OnStateChanged(IState)
        VB: OnStateChanged(IState)
      nameWithType:
        CSharp: StateMachine.OnStateChanged(IState)
        VB: StateMachine.OnStateChanged(IState)
      qualifiedName:
        CSharp: StateMachine.OnStateChanged(IState)
        VB: StateMachine.OnStateChanged(IState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnStateChanged
        path: ''
        startLine: 59845
      syntax:
        content:
          CSharp: protected virtual void OnStateChanged(IState newState)
          VB: Protected Overridable Sub OnStateChanged(newState As IState)
        parameters:
        - id: newState
          type: Global.IState
      overload: Global.StateMachine.OnStateChanged*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Global.StateMachine.ChangeState(IState)
      commentId: M:Global.StateMachine.ChangeState(IState)
      language: CSharp
      name:
        CSharp: ChangeState(IState)
        VB: ChangeState(IState)
      nameWithType:
        CSharp: StateMachine.ChangeState(IState)
        VB: StateMachine.ChangeState(IState)
      qualifiedName:
        CSharp: StateMachine.ChangeState(IState)
        VB: StateMachine.ChangeState(IState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ChangeState
        path: ''
        startLine: 59850
      syntax:
        content:
          CSharp: public void ChangeState(IState newState)
          VB: Public Sub ChangeState(newState As IState)
        parameters:
        - id: newState
          type: Global.IState
      overload: Global.StateMachine.ChangeState*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.WalkState
    commentId: T:Global.WalkState
    language: CSharp
    name:
      CSharp: WalkState
      VB: WalkState
    nameWithType:
      CSharp: WalkState
      VB: WalkState
    qualifiedName:
      CSharp: WalkState
      VB: WalkState
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: WalkState
      path: ''
      startLine: 59860
    syntax:
      content:
        CSharp: 'public class WalkState : IState'
        VB: >-
          Public Class WalkState

              Implements IState
    inheritance:
    - System.Object
    implements:
    - Global.IState
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.WalkState.#ctor(CharacterBase,System.Single)
      commentId: M:Global.WalkState.#ctor(CharacterBase,System.Single)
      language: CSharp
      name:
        CSharp: WalkState(CharacterBase, Single)
        VB: WalkState(CharacterBase, Single)
      nameWithType:
        CSharp: WalkState.WalkState(CharacterBase, Single)
        VB: WalkState.WalkState(CharacterBase, Single)
      qualifiedName:
        CSharp: WalkState.WalkState(CharacterBase, System.Single)
        VB: WalkState.WalkState(CharacterBase, System.Single)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 59865
      syntax:
        content:
          CSharp: public WalkState(CharacterBase character, float walkSpeed)
          VB: Public Sub New(character As CharacterBase, walkSpeed As Single)
        parameters:
        - id: character
          type: Global.CharacterBase
        - id: walkSpeed
          type: System.Single
      overload: Global.WalkState.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WalkState.Enter
      commentId: M:Global.WalkState.Enter
      language: CSharp
      name:
        CSharp: Enter()
        VB: Enter()
      nameWithType:
        CSharp: WalkState.Enter()
        VB: WalkState.Enter()
      qualifiedName:
        CSharp: WalkState.Enter()
        VB: WalkState.Enter()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Enter
        path: ''
        startLine: 59871
      syntax:
        content:
          CSharp: public void Enter()
          VB: Public Sub Enter
      overload: Global.WalkState.Enter*
      implements:
      - Global.IState.Enter
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WalkState.Exit
      commentId: M:Global.WalkState.Exit
      language: CSharp
      name:
        CSharp: Exit()
        VB: Exit()
      nameWithType:
        CSharp: WalkState.Exit()
        VB: WalkState.Exit()
      qualifiedName:
        CSharp: WalkState.Exit()
        VB: WalkState.Exit()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Exit
        path: ''
        startLine: 59876
      syntax:
        content:
          CSharp: public void Exit()
          VB: Public Sub Exit
      overload: Global.WalkState.Exit*
      implements:
      - Global.IState.Exit
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WalkState.Update
      commentId: M:Global.WalkState.Update
      language: CSharp
      name:
        CSharp: Update()
        VB: Update()
      nameWithType:
        CSharp: WalkState.Update()
        VB: WalkState.Update()
      qualifiedName:
        CSharp: WalkState.Update()
        VB: WalkState.Update()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Update
        path: ''
        startLine: 59882
      syntax:
        content:
          CSharp: public void Update()
          VB: Public Sub Update
      overload: Global.WalkState.Update*
      implements:
      - Global.IState.Update
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.GameInstaller
    commentId: T:Global.GameInstaller
    language: CSharp
    name:
      CSharp: GameInstaller
      VB: GameInstaller
    nameWithType:
      CSharp: GameInstaller
      VB: GameInstaller
    qualifiedName:
      CSharp: GameInstaller
      VB: GameInstaller
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GameInstaller
      path: ''
      startLine: 59891
    syntax:
      content:
        CSharp: 'public class GameInstaller : MonoInstaller'
        VB: >-
          Public Class GameInstaller

              Inherits MonoInstaller
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.GameInstaller.InstallBindings
      commentId: M:Global.GameInstaller.InstallBindings
      language: CSharp
      name:
        CSharp: InstallBindings()
        VB: InstallBindings()
      nameWithType:
        CSharp: GameInstaller.InstallBindings()
        VB: GameInstaller.InstallBindings()
      qualifiedName:
        CSharp: GameInstaller.InstallBindings()
        VB: GameInstaller.InstallBindings()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: InstallBindings
        path: ''
        startLine: 59893
      syntax:
        content:
          CSharp: public override void InstallBindings()
          VB: Public Overrides Sub InstallBindings
      overload: Global.GameInstaller.InstallBindings*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.PlayerInstaller
    commentId: T:Global.PlayerInstaller
    language: CSharp
    name:
      CSharp: PlayerInstaller
      VB: PlayerInstaller
    nameWithType:
      CSharp: PlayerInstaller
      VB: PlayerInstaller
    qualifiedName:
      CSharp: PlayerInstaller
      VB: PlayerInstaller
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PlayerInstaller
      path: ''
      startLine: 59899
    syntax:
      content:
        CSharp: 'public class PlayerInstaller : MonoInstaller'
        VB: >-
          Public Class PlayerInstaller

              Inherits MonoInstaller
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.PlayerInstaller.InstallBindings
      commentId: M:Global.PlayerInstaller.InstallBindings
      language: CSharp
      name:
        CSharp: InstallBindings()
        VB: InstallBindings()
      nameWithType:
        CSharp: PlayerInstaller.InstallBindings()
        VB: PlayerInstaller.InstallBindings()
      qualifiedName:
        CSharp: PlayerInstaller.InstallBindings()
        VB: PlayerInstaller.InstallBindings()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: InstallBindings
        path: ''
        startLine: 59901
      syntax:
        content:
          CSharp: public override void InstallBindings()
          VB: Public Overrides Sub InstallBindings
      overload: Global.PlayerInstaller.InstallBindings*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.ReactiveProperty`1
    commentId: T:Global.ReactiveProperty`1
    language: CSharp
    name:
      CSharp: ReactiveProperty<T>
      VB: ReactiveProperty(Of T)
    nameWithType:
      CSharp: ReactiveProperty<T>
      VB: ReactiveProperty(Of T)
    qualifiedName:
      CSharp: ReactiveProperty<T>
      VB: ReactiveProperty(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ReactiveProperty
      path: ''
      startLine: 59912
    syntax:
      content:
        CSharp: 'public class ReactiveProperty<T> : IDisposable'
        VB: >-
          Public Class ReactiveProperty(Of T)

              Inherits IDisposable
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.ReactiveProperty`1.Value
      commentId: P:Global.ReactiveProperty`1.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ReactiveProperty<T>.Value
        VB: ReactiveProperty(Of T).Value
      qualifiedName:
        CSharp: ReactiveProperty<T>.Value
        VB: ReactiveProperty(Of T).Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Value
        path: ''
        startLine: 59917
      syntax:
        content:
          CSharp: public T Value { get; set; }
          VB: Public Property Value As T
        parameters: []
        return:
          type: '{T}'
      overload: Global.ReactiveProperty`1.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.ReactiveProperty`1.#ctor(`0)
      commentId: M:Global.ReactiveProperty`1.#ctor(`0)
      language: CSharp
      name:
        CSharp: ReactiveProperty(T)
        VB: ReactiveProperty(T)
      nameWithType:
        CSharp: ReactiveProperty<T>.ReactiveProperty(T)
        VB: ReactiveProperty(Of T).ReactiveProperty(T)
      qualifiedName:
        CSharp: ReactiveProperty<T>.ReactiveProperty(T)
        VB: ReactiveProperty(Of T).ReactiveProperty(T)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 59930
      syntax:
        content:
          CSharp: public ReactiveProperty(T initialValue = null)
          VB: Public Sub New(initialValue As T = Nothing)
        parameters:
        - id: initialValue
          type: '{T}'
      overload: Global.ReactiveProperty`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.ReactiveProperty`1.Subscribe(Action{`0})
      commentId: M:Global.ReactiveProperty`1.Subscribe(Action{`0})
      language: CSharp
      name:
        CSharp: Subscribe(Action<T>)
        VB: Subscribe(Action(Of T))
      nameWithType:
        CSharp: ReactiveProperty<T>.Subscribe(Action<T>)
        VB: ReactiveProperty(Of T).Subscribe(Action(Of T))
      qualifiedName:
        CSharp: ReactiveProperty<T>.Subscribe(Action<T>)
        VB: ReactiveProperty(Of T).Subscribe(Action(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Subscribe
        path: ''
        startLine: 59935
      syntax:
        content:
          CSharp: public IDisposable Subscribe(Action<T> observer)
          VB: Public Function Subscribe(observer As Action(Of T)) As IDisposable
        parameters:
        - id: observer
          type: Global.Action{{T}}
        return:
          type: Global.IDisposable
      overload: Global.ReactiveProperty`1.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.ReactiveProperty`1.Dispose
      commentId: M:Global.ReactiveProperty`1.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ReactiveProperty<T>.Dispose()
        VB: ReactiveProperty(Of T).Dispose()
      qualifiedName:
        CSharp: ReactiveProperty<T>.Dispose()
        VB: ReactiveProperty(Of T).Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Dispose
        path: ''
        startLine: 59958
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: Global.ReactiveProperty`1.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
references:
  Global.UIIDGenerator.ShowWindow*:
    name:
      CSharp:
      - id: Global.UIIDGenerator.ShowWindow*
        name: ShowWindow
        nameWithType: UIIDGenerator.ShowWindow
        qualifiedName: UIIDGenerator.ShowWindow
      VB:
      - id: Global.UIIDGenerator.ShowWindow*
        name: ShowWindow
        nameWithType: UIIDGenerator.ShowWindow
        qualifiedName: UIIDGenerator.ShowWindow
    isDefinition: true
    commentId: Overload:Global.UIIDGenerator.ShowWindow
  Global.UIIDGenerator:
    name:
      CSharp:
      - id: Global.UIIDGenerator
        name: UIIDGenerator
        nameWithType: UIIDGenerator
        qualifiedName: UIIDGenerator
      VB:
      - id: Global.UIIDGenerator
        name: UIIDGenerator
        nameWithType: UIIDGenerator
        qualifiedName: UIIDGenerator
    isDefinition: true
    commentId: T:Global.UIIDGenerator
  Global.IDisposable:
    name:
      CSharp:
      - id: Global.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: IDisposable
        isExternal: true
      VB:
      - id: Global.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: IDisposable
        isExternal: true
    isDefinition: true
  Global.InputActionAsset:
    name:
      CSharp:
      - id: Global.InputActionAsset
        name: InputActionAsset
        nameWithType: InputActionAsset
        qualifiedName: InputActionAsset
        isExternal: true
      VB:
      - id: Global.InputActionAsset
        name: InputActionAsset
        nameWithType: InputActionAsset
        qualifiedName: InputActionAsset
        isExternal: true
    isDefinition: true
    commentId: '!:Global.InputActionAsset'
  Global.InputSystem_Actions.asset*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.asset*
        name: asset
        nameWithType: InputSystem_Actions.asset
        qualifiedName: InputSystem_Actions.asset
      VB:
      - id: Global.InputSystem_Actions.asset*
        name: asset
        nameWithType: InputSystem_Actions.asset
        qualifiedName: InputSystem_Actions.asset
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.asset
  Global.InputSystem_Actions.#ctor*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.#ctor*
        name: InputSystem_Actions
        nameWithType: InputSystem_Actions.InputSystem_Actions
        qualifiedName: InputSystem_Actions.InputSystem_Actions
      VB:
      - id: Global.InputSystem_Actions.#ctor*
        name: InputSystem_Actions
        nameWithType: InputSystem_Actions.InputSystem_Actions
        qualifiedName: InputSystem_Actions.InputSystem_Actions
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.#ctor
  Global.InputSystem_Actions.Finalize*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.Finalize*
        name: Finalize
        nameWithType: InputSystem_Actions.Finalize
        qualifiedName: InputSystem_Actions.Finalize
      VB:
      - id: Global.InputSystem_Actions.Finalize*
        name: Finalize
        nameWithType: InputSystem_Actions.Finalize
        qualifiedName: InputSystem_Actions.Finalize
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.Finalize
  Global.InputSystem_Actions.Dispose*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.Dispose*
        name: Dispose
        nameWithType: InputSystem_Actions.Dispose
        qualifiedName: InputSystem_Actions.Dispose
      VB:
      - id: Global.InputSystem_Actions.Dispose*
        name: Dispose
        nameWithType: InputSystem_Actions.Dispose
        qualifiedName: InputSystem_Actions.Dispose
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.Dispose
  System.Nullable`1:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Nullable`1
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Nullable{InputBinding}:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.InputBinding
        name: InputBinding
        nameWithType: InputBinding
        qualifiedName: InputBinding
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.InputBinding
        name: InputBinding
        nameWithType: InputBinding
        qualifiedName: InputBinding
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Nullable`1
    parent: System
    commentId: T:System.Nullable{InputBinding}
  Global.InputSystem_Actions.bindingMask*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.bindingMask*
        name: bindingMask
        nameWithType: InputSystem_Actions.bindingMask
        qualifiedName: InputSystem_Actions.bindingMask
      VB:
      - id: Global.InputSystem_Actions.bindingMask*
        name: bindingMask
        nameWithType: InputSystem_Actions.bindingMask
        qualifiedName: InputSystem_Actions.bindingMask
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.bindingMask
  System.Nullable{ReadOnlyArray{InputDevice}}:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.ReadOnlyArray`1
        name: ReadOnlyArray
        nameWithType: ReadOnlyArray
        qualifiedName: ReadOnlyArray
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.InputDevice
        name: InputDevice
        nameWithType: InputDevice
        qualifiedName: InputDevice
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.ReadOnlyArray`1
        name: ReadOnlyArray
        nameWithType: ReadOnlyArray
        qualifiedName: ReadOnlyArray
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.InputDevice
        name: InputDevice
        nameWithType: InputDevice
        qualifiedName: InputDevice
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Nullable`1
    parent: System
    commentId: T:System.Nullable{ReadOnlyArray{InputDevice}}
  Global.InputSystem_Actions.devices*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.devices*
        name: devices
        nameWithType: InputSystem_Actions.devices
        qualifiedName: InputSystem_Actions.devices
      VB:
      - id: Global.InputSystem_Actions.devices*
        name: devices
        nameWithType: InputSystem_Actions.devices
        qualifiedName: InputSystem_Actions.devices
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.devices
  Global.ReadOnlyArray`1:
    name:
      CSharp:
      - id: Global.ReadOnlyArray`1
        name: ReadOnlyArray
        nameWithType: ReadOnlyArray
        qualifiedName: ReadOnlyArray
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.ReadOnlyArray`1
        name: ReadOnlyArray
        nameWithType: ReadOnlyArray
        qualifiedName: ReadOnlyArray
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:Global.ReadOnlyArray`1'
  Global.ReadOnlyArray{InputControlScheme}:
    name:
      CSharp:
      - id: Global.ReadOnlyArray`1
        name: ReadOnlyArray
        nameWithType: ReadOnlyArray
        qualifiedName: ReadOnlyArray
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.InputControlScheme
        name: InputControlScheme
        nameWithType: InputControlScheme
        qualifiedName: InputControlScheme
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.ReadOnlyArray`1
        name: ReadOnlyArray
        nameWithType: ReadOnlyArray
        qualifiedName: ReadOnlyArray
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.InputControlScheme
        name: InputControlScheme
        nameWithType: InputControlScheme
        qualifiedName: InputControlScheme
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.ReadOnlyArray`1
    commentId: '!:Global.ReadOnlyArray{InputControlScheme}'
  Global.InputSystem_Actions.controlSchemes*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.controlSchemes*
        name: controlSchemes
        nameWithType: InputSystem_Actions.controlSchemes
        qualifiedName: InputSystem_Actions.controlSchemes
      VB:
      - id: Global.InputSystem_Actions.controlSchemes*
        name: controlSchemes
        nameWithType: InputSystem_Actions.controlSchemes
        qualifiedName: InputSystem_Actions.controlSchemes
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.controlSchemes
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  Global.InputAction:
    name:
      CSharp:
      - id: Global.InputAction
        name: InputAction
        nameWithType: InputAction
        qualifiedName: InputAction
        isExternal: true
      VB:
      - id: Global.InputAction
        name: InputAction
        nameWithType: InputAction
        qualifiedName: InputAction
        isExternal: true
    isDefinition: true
  Global.InputSystem_Actions.Contains*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.Contains*
        name: Contains
        nameWithType: InputSystem_Actions.Contains
        qualifiedName: InputSystem_Actions.Contains
      VB:
      - id: Global.InputSystem_Actions.Contains*
        name: Contains
        nameWithType: InputSystem_Actions.Contains
        qualifiedName: InputSystem_Actions.Contains
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.Contains
  Global.IEnumerator`1:
    name:
      CSharp:
      - id: Global.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: IEnumerator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: IEnumerator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:Global.IEnumerator`1'
  Global.IEnumerator{InputAction}:
    name:
      CSharp:
      - id: Global.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: IEnumerator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.InputAction
        name: InputAction
        nameWithType: InputAction
        qualifiedName: InputAction
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: IEnumerator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.InputAction
        name: InputAction
        nameWithType: InputAction
        qualifiedName: InputAction
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.IEnumerator`1
    commentId: '!:Global.IEnumerator{InputAction}'
  Global.InputSystem_Actions.GetEnumerator*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.GetEnumerator*
        name: GetEnumerator
        nameWithType: InputSystem_Actions.GetEnumerator
        qualifiedName: InputSystem_Actions.GetEnumerator
      VB:
      - id: Global.InputSystem_Actions.GetEnumerator*
        name: GetEnumerator
        nameWithType: InputSystem_Actions.GetEnumerator
        qualifiedName: InputSystem_Actions.GetEnumerator
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.GetEnumerator
  Global.InputSystem_Actions.Enable*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.Enable*
        name: Enable
        nameWithType: InputSystem_Actions.Enable
        qualifiedName: InputSystem_Actions.Enable
      VB:
      - id: Global.InputSystem_Actions.Enable*
        name: Enable
        nameWithType: InputSystem_Actions.Enable
        qualifiedName: InputSystem_Actions.Enable
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.Enable
  Global.InputSystem_Actions.Disable*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.Disable*
        name: Disable
        nameWithType: InputSystem_Actions.Disable
        qualifiedName: InputSystem_Actions.Disable
      VB:
      - id: Global.InputSystem_Actions.Disable*
        name: Disable
        nameWithType: InputSystem_Actions.Disable
        qualifiedName: InputSystem_Actions.Disable
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.Disable
  Global.IEnumerable`1:
    name:
      CSharp:
      - id: Global.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:Global.IEnumerable`1'
  Global.IEnumerable{InputBinding}:
    name:
      CSharp:
      - id: Global.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.InputBinding
        name: InputBinding
        nameWithType: InputBinding
        qualifiedName: InputBinding
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.InputBinding
        name: InputBinding
        nameWithType: InputBinding
        qualifiedName: InputBinding
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.IEnumerable`1
    commentId: '!:Global.IEnumerable{InputBinding}'
  Global.InputSystem_Actions.bindings*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.bindings*
        name: bindings
        nameWithType: InputSystem_Actions.bindings
        qualifiedName: InputSystem_Actions.bindings
      VB:
      - id: Global.InputSystem_Actions.bindings*
        name: bindings
        nameWithType: InputSystem_Actions.bindings
        qualifiedName: InputSystem_Actions.bindings
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.bindings
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  Global.InputSystem_Actions.FindAction*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.FindAction*
        name: FindAction
        nameWithType: InputSystem_Actions.FindAction
        qualifiedName: InputSystem_Actions.FindAction
      VB:
      - id: Global.InputSystem_Actions.FindAction*
        name: FindAction
        nameWithType: InputSystem_Actions.FindAction
        qualifiedName: InputSystem_Actions.FindAction
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.FindAction
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  Global.InputBinding:
    name:
      CSharp:
      - id: Global.InputBinding
        name: InputBinding
        nameWithType: InputBinding
        qualifiedName: InputBinding
        isExternal: true
      VB:
      - id: Global.InputBinding
        name: InputBinding
        nameWithType: InputBinding
        qualifiedName: InputBinding
        isExternal: true
    isDefinition: true
    commentId: '!:Global.InputBinding'
  Global.InputSystem_Actions.FindBinding*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.FindBinding*
        name: FindBinding
        nameWithType: InputSystem_Actions.FindBinding
        qualifiedName: InputSystem_Actions.FindBinding
      VB:
      - id: Global.InputSystem_Actions.FindBinding*
        name: FindBinding
        nameWithType: InputSystem_Actions.FindBinding
        qualifiedName: InputSystem_Actions.FindBinding
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.FindBinding
  Global.InputSystem_Actions.PlayerActions:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.PlayerActions
        name: InputSystem_Actions.PlayerActions
        nameWithType: InputSystem_Actions.PlayerActions
        qualifiedName: InputSystem_Actions.PlayerActions
      VB:
      - id: Global.InputSystem_Actions.PlayerActions
        name: InputSystem_Actions.PlayerActions
        nameWithType: InputSystem_Actions.PlayerActions
        qualifiedName: InputSystem_Actions.PlayerActions
    isDefinition: true
    commentId: T:Global.InputSystem_Actions.PlayerActions
  Global.InputSystem_Actions.Player*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.Player*
        name: Player
        nameWithType: InputSystem_Actions.Player
        qualifiedName: InputSystem_Actions.Player
      VB:
      - id: Global.InputSystem_Actions.Player*
        name: Player
        nameWithType: InputSystem_Actions.Player
        qualifiedName: InputSystem_Actions.Player
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.Player
  Global.InputSystem_Actions.UIActions:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.UIActions
        name: InputSystem_Actions.UIActions
        nameWithType: InputSystem_Actions.UIActions
        qualifiedName: InputSystem_Actions.UIActions
      VB:
      - id: Global.InputSystem_Actions.UIActions
        name: InputSystem_Actions.UIActions
        nameWithType: InputSystem_Actions.UIActions
        qualifiedName: InputSystem_Actions.UIActions
    isDefinition: true
    commentId: T:Global.InputSystem_Actions.UIActions
  Global.InputSystem_Actions.UI*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.UI*
        name: UI
        nameWithType: InputSystem_Actions.UI
        qualifiedName: InputSystem_Actions.UI
      VB:
      - id: Global.InputSystem_Actions.UI*
        name: UI
        nameWithType: InputSystem_Actions.UI
        qualifiedName: InputSystem_Actions.UI
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.UI
  Global.InputControlScheme:
    name:
      CSharp:
      - id: Global.InputControlScheme
        name: InputControlScheme
        nameWithType: InputControlScheme
        qualifiedName: InputControlScheme
        isExternal: true
      VB:
      - id: Global.InputControlScheme
        name: InputControlScheme
        nameWithType: InputControlScheme
        qualifiedName: InputControlScheme
        isExternal: true
    isDefinition: true
  Global.InputSystem_Actions.KeyboardMouseScheme*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.KeyboardMouseScheme*
        name: KeyboardMouseScheme
        nameWithType: InputSystem_Actions.KeyboardMouseScheme
        qualifiedName: InputSystem_Actions.KeyboardMouseScheme
      VB:
      - id: Global.InputSystem_Actions.KeyboardMouseScheme*
        name: KeyboardMouseScheme
        nameWithType: InputSystem_Actions.KeyboardMouseScheme
        qualifiedName: InputSystem_Actions.KeyboardMouseScheme
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.KeyboardMouseScheme
  Global.InputSystem_Actions.GamepadScheme*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.GamepadScheme*
        name: GamepadScheme
        nameWithType: InputSystem_Actions.GamepadScheme
        qualifiedName: InputSystem_Actions.GamepadScheme
      VB:
      - id: Global.InputSystem_Actions.GamepadScheme*
        name: GamepadScheme
        nameWithType: InputSystem_Actions.GamepadScheme
        qualifiedName: InputSystem_Actions.GamepadScheme
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.GamepadScheme
  Global.InputSystem_Actions.TouchScheme*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.TouchScheme*
        name: TouchScheme
        nameWithType: InputSystem_Actions.TouchScheme
        qualifiedName: InputSystem_Actions.TouchScheme
      VB:
      - id: Global.InputSystem_Actions.TouchScheme*
        name: TouchScheme
        nameWithType: InputSystem_Actions.TouchScheme
        qualifiedName: InputSystem_Actions.TouchScheme
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.TouchScheme
  Global.InputSystem_Actions.JoystickScheme*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.JoystickScheme*
        name: JoystickScheme
        nameWithType: InputSystem_Actions.JoystickScheme
        qualifiedName: InputSystem_Actions.JoystickScheme
      VB:
      - id: Global.InputSystem_Actions.JoystickScheme*
        name: JoystickScheme
        nameWithType: InputSystem_Actions.JoystickScheme
        qualifiedName: InputSystem_Actions.JoystickScheme
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.JoystickScheme
  Global.InputSystem_Actions.XRScheme*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.XRScheme*
        name: XRScheme
        nameWithType: InputSystem_Actions.XRScheme
        qualifiedName: InputSystem_Actions.XRScheme
      VB:
      - id: Global.InputSystem_Actions.XRScheme*
        name: XRScheme
        nameWithType: InputSystem_Actions.XRScheme
        qualifiedName: InputSystem_Actions.XRScheme
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.XRScheme
  Global.InputSystem_Actions:
    name:
      CSharp:
      - id: Global.InputSystem_Actions
        name: InputSystem_Actions
        nameWithType: InputSystem_Actions
        qualifiedName: InputSystem_Actions
      VB:
      - id: Global.InputSystem_Actions
        name: InputSystem_Actions
        nameWithType: InputSystem_Actions
        qualifiedName: InputSystem_Actions
    isDefinition: true
    commentId: T:Global.InputSystem_Actions
  System.ValueType:
    name:
      CSharp:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
      VB:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ValueType
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  Global.InputSystem_Actions.PlayerActions.#ctor*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.PlayerActions.#ctor*
        name: PlayerActions
        nameWithType: InputSystem_Actions.PlayerActions.PlayerActions
        qualifiedName: InputSystem_Actions.PlayerActions.PlayerActions
      VB:
      - id: Global.InputSystem_Actions.PlayerActions.#ctor*
        name: PlayerActions
        nameWithType: InputSystem_Actions.PlayerActions.PlayerActions
        qualifiedName: InputSystem_Actions.PlayerActions.PlayerActions
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.PlayerActions.#ctor
  Global.InputSystem_Actions.PlayerActions.Move*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.PlayerActions.Move*
        name: Move
        nameWithType: InputSystem_Actions.PlayerActions.Move
        qualifiedName: InputSystem_Actions.PlayerActions.Move
      VB:
      - id: Global.InputSystem_Actions.PlayerActions.Move*
        name: Move
        nameWithType: InputSystem_Actions.PlayerActions.Move
        qualifiedName: InputSystem_Actions.PlayerActions.Move
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.PlayerActions.Move
  Global.InputSystem_Actions.PlayerActions.Look*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.PlayerActions.Look*
        name: Look
        nameWithType: InputSystem_Actions.PlayerActions.Look
        qualifiedName: InputSystem_Actions.PlayerActions.Look
      VB:
      - id: Global.InputSystem_Actions.PlayerActions.Look*
        name: Look
        nameWithType: InputSystem_Actions.PlayerActions.Look
        qualifiedName: InputSystem_Actions.PlayerActions.Look
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.PlayerActions.Look
  Global.InputSystem_Actions.PlayerActions.Interact*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.PlayerActions.Interact*
        name: Interact
        nameWithType: InputSystem_Actions.PlayerActions.Interact
        qualifiedName: InputSystem_Actions.PlayerActions.Interact
      VB:
      - id: Global.InputSystem_Actions.PlayerActions.Interact*
        name: Interact
        nameWithType: InputSystem_Actions.PlayerActions.Interact
        qualifiedName: InputSystem_Actions.PlayerActions.Interact
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.PlayerActions.Interact
  Global.InputActionMap:
    name:
      CSharp:
      - id: Global.InputActionMap
        name: InputActionMap
        nameWithType: InputActionMap
        qualifiedName: InputActionMap
        isExternal: true
      VB:
      - id: Global.InputActionMap
        name: InputActionMap
        nameWithType: InputActionMap
        qualifiedName: InputActionMap
        isExternal: true
    isDefinition: true
  Global.InputSystem_Actions.PlayerActions.Get*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.PlayerActions.Get*
        name: Get
        nameWithType: InputSystem_Actions.PlayerActions.Get
        qualifiedName: InputSystem_Actions.PlayerActions.Get
      VB:
      - id: Global.InputSystem_Actions.PlayerActions.Get*
        name: Get
        nameWithType: InputSystem_Actions.PlayerActions.Get
        qualifiedName: InputSystem_Actions.PlayerActions.Get
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.PlayerActions.Get
  Global.InputSystem_Actions.PlayerActions.Enable*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.PlayerActions.Enable*
        name: Enable
        nameWithType: InputSystem_Actions.PlayerActions.Enable
        qualifiedName: InputSystem_Actions.PlayerActions.Enable
      VB:
      - id: Global.InputSystem_Actions.PlayerActions.Enable*
        name: Enable
        nameWithType: InputSystem_Actions.PlayerActions.Enable
        qualifiedName: InputSystem_Actions.PlayerActions.Enable
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.PlayerActions.Enable
  Global.InputSystem_Actions.PlayerActions.Disable*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.PlayerActions.Disable*
        name: Disable
        nameWithType: InputSystem_Actions.PlayerActions.Disable
        qualifiedName: InputSystem_Actions.PlayerActions.Disable
      VB:
      - id: Global.InputSystem_Actions.PlayerActions.Disable*
        name: Disable
        nameWithType: InputSystem_Actions.PlayerActions.Disable
        qualifiedName: InputSystem_Actions.PlayerActions.Disable
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.PlayerActions.Disable
  Global.InputSystem_Actions.PlayerActions.enabled*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.PlayerActions.enabled*
        name: enabled
        nameWithType: InputSystem_Actions.PlayerActions.enabled
        qualifiedName: InputSystem_Actions.PlayerActions.enabled
      VB:
      - id: Global.InputSystem_Actions.PlayerActions.enabled*
        name: enabled
        nameWithType: InputSystem_Actions.PlayerActions.enabled
        qualifiedName: InputSystem_Actions.PlayerActions.enabled
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.PlayerActions.enabled
  Global.InputSystem_Actions.PlayerActions.op_Implicit*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.PlayerActions.op_Implicit*
        name: Implicit
        nameWithType: InputSystem_Actions.PlayerActions.Implicit
        qualifiedName: InputSystem_Actions.PlayerActions.Implicit
      VB:
      - id: Global.InputSystem_Actions.PlayerActions.op_Implicit*
        name: Widening
        nameWithType: InputSystem_Actions.PlayerActions.Widening
        qualifiedName: InputSystem_Actions.PlayerActions.Widening
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.PlayerActions.op_Implicit
  Global.InputSystem_Actions.IPlayerActions:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.IPlayerActions
        name: InputSystem_Actions.IPlayerActions
        nameWithType: InputSystem_Actions.IPlayerActions
        qualifiedName: InputSystem_Actions.IPlayerActions
      VB:
      - id: Global.InputSystem_Actions.IPlayerActions
        name: InputSystem_Actions.IPlayerActions
        nameWithType: InputSystem_Actions.IPlayerActions
        qualifiedName: InputSystem_Actions.IPlayerActions
    isDefinition: true
    commentId: T:Global.InputSystem_Actions.IPlayerActions
  Global.InputSystem_Actions.PlayerActions.AddCallbacks*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.PlayerActions.AddCallbacks*
        name: AddCallbacks
        nameWithType: InputSystem_Actions.PlayerActions.AddCallbacks
        qualifiedName: InputSystem_Actions.PlayerActions.AddCallbacks
      VB:
      - id: Global.InputSystem_Actions.PlayerActions.AddCallbacks*
        name: AddCallbacks
        nameWithType: InputSystem_Actions.PlayerActions.AddCallbacks
        qualifiedName: InputSystem_Actions.PlayerActions.AddCallbacks
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.PlayerActions.AddCallbacks
  Global.InputSystem_Actions.PlayerActions.RemoveCallbacks*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.PlayerActions.RemoveCallbacks*
        name: RemoveCallbacks
        nameWithType: InputSystem_Actions.PlayerActions.RemoveCallbacks
        qualifiedName: InputSystem_Actions.PlayerActions.RemoveCallbacks
      VB:
      - id: Global.InputSystem_Actions.PlayerActions.RemoveCallbacks*
        name: RemoveCallbacks
        nameWithType: InputSystem_Actions.PlayerActions.RemoveCallbacks
        qualifiedName: InputSystem_Actions.PlayerActions.RemoveCallbacks
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.PlayerActions.RemoveCallbacks
  Global.InputSystem_Actions.PlayerActions.SetCallbacks*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.PlayerActions.SetCallbacks*
        name: SetCallbacks
        nameWithType: InputSystem_Actions.PlayerActions.SetCallbacks
        qualifiedName: InputSystem_Actions.PlayerActions.SetCallbacks
      VB:
      - id: Global.InputSystem_Actions.PlayerActions.SetCallbacks*
        name: SetCallbacks
        nameWithType: InputSystem_Actions.PlayerActions.SetCallbacks
        qualifiedName: InputSystem_Actions.PlayerActions.SetCallbacks
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.PlayerActions.SetCallbacks
  Global.InputSystem_Actions.UIActions.#ctor*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.UIActions.#ctor*
        name: UIActions
        nameWithType: InputSystem_Actions.UIActions.UIActions
        qualifiedName: InputSystem_Actions.UIActions.UIActions
      VB:
      - id: Global.InputSystem_Actions.UIActions.#ctor*
        name: UIActions
        nameWithType: InputSystem_Actions.UIActions.UIActions
        qualifiedName: InputSystem_Actions.UIActions.UIActions
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.UIActions.#ctor
  Global.InputSystem_Actions.UIActions.Navigate*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.UIActions.Navigate*
        name: Navigate
        nameWithType: InputSystem_Actions.UIActions.Navigate
        qualifiedName: InputSystem_Actions.UIActions.Navigate
      VB:
      - id: Global.InputSystem_Actions.UIActions.Navigate*
        name: Navigate
        nameWithType: InputSystem_Actions.UIActions.Navigate
        qualifiedName: InputSystem_Actions.UIActions.Navigate
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.UIActions.Navigate
  Global.InputSystem_Actions.UIActions.Submit*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.UIActions.Submit*
        name: Submit
        nameWithType: InputSystem_Actions.UIActions.Submit
        qualifiedName: InputSystem_Actions.UIActions.Submit
      VB:
      - id: Global.InputSystem_Actions.UIActions.Submit*
        name: Submit
        nameWithType: InputSystem_Actions.UIActions.Submit
        qualifiedName: InputSystem_Actions.UIActions.Submit
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.UIActions.Submit
  Global.InputSystem_Actions.UIActions.Cancel*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.UIActions.Cancel*
        name: Cancel
        nameWithType: InputSystem_Actions.UIActions.Cancel
        qualifiedName: InputSystem_Actions.UIActions.Cancel
      VB:
      - id: Global.InputSystem_Actions.UIActions.Cancel*
        name: Cancel
        nameWithType: InputSystem_Actions.UIActions.Cancel
        qualifiedName: InputSystem_Actions.UIActions.Cancel
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.UIActions.Cancel
  Global.InputSystem_Actions.UIActions.Point*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.UIActions.Point*
        name: Point
        nameWithType: InputSystem_Actions.UIActions.Point
        qualifiedName: InputSystem_Actions.UIActions.Point
      VB:
      - id: Global.InputSystem_Actions.UIActions.Point*
        name: Point
        nameWithType: InputSystem_Actions.UIActions.Point
        qualifiedName: InputSystem_Actions.UIActions.Point
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.UIActions.Point
  Global.InputSystem_Actions.UIActions.Click*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.UIActions.Click*
        name: Click
        nameWithType: InputSystem_Actions.UIActions.Click
        qualifiedName: InputSystem_Actions.UIActions.Click
      VB:
      - id: Global.InputSystem_Actions.UIActions.Click*
        name: Click
        nameWithType: InputSystem_Actions.UIActions.Click
        qualifiedName: InputSystem_Actions.UIActions.Click
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.UIActions.Click
  Global.InputSystem_Actions.UIActions.RightClick*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.UIActions.RightClick*
        name: RightClick
        nameWithType: InputSystem_Actions.UIActions.RightClick
        qualifiedName: InputSystem_Actions.UIActions.RightClick
      VB:
      - id: Global.InputSystem_Actions.UIActions.RightClick*
        name: RightClick
        nameWithType: InputSystem_Actions.UIActions.RightClick
        qualifiedName: InputSystem_Actions.UIActions.RightClick
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.UIActions.RightClick
  Global.InputSystem_Actions.UIActions.MiddleClick*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.UIActions.MiddleClick*
        name: MiddleClick
        nameWithType: InputSystem_Actions.UIActions.MiddleClick
        qualifiedName: InputSystem_Actions.UIActions.MiddleClick
      VB:
      - id: Global.InputSystem_Actions.UIActions.MiddleClick*
        name: MiddleClick
        nameWithType: InputSystem_Actions.UIActions.MiddleClick
        qualifiedName: InputSystem_Actions.UIActions.MiddleClick
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.UIActions.MiddleClick
  Global.InputSystem_Actions.UIActions.ScrollWheel*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.UIActions.ScrollWheel*
        name: ScrollWheel
        nameWithType: InputSystem_Actions.UIActions.ScrollWheel
        qualifiedName: InputSystem_Actions.UIActions.ScrollWheel
      VB:
      - id: Global.InputSystem_Actions.UIActions.ScrollWheel*
        name: ScrollWheel
        nameWithType: InputSystem_Actions.UIActions.ScrollWheel
        qualifiedName: InputSystem_Actions.UIActions.ScrollWheel
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.UIActions.ScrollWheel
  Global.InputSystem_Actions.UIActions.TrackedDevicePosition*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.UIActions.TrackedDevicePosition*
        name: TrackedDevicePosition
        nameWithType: InputSystem_Actions.UIActions.TrackedDevicePosition
        qualifiedName: InputSystem_Actions.UIActions.TrackedDevicePosition
      VB:
      - id: Global.InputSystem_Actions.UIActions.TrackedDevicePosition*
        name: TrackedDevicePosition
        nameWithType: InputSystem_Actions.UIActions.TrackedDevicePosition
        qualifiedName: InputSystem_Actions.UIActions.TrackedDevicePosition
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.UIActions.TrackedDevicePosition
  Global.InputSystem_Actions.UIActions.TrackedDeviceOrientation*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.UIActions.TrackedDeviceOrientation*
        name: TrackedDeviceOrientation
        nameWithType: InputSystem_Actions.UIActions.TrackedDeviceOrientation
        qualifiedName: InputSystem_Actions.UIActions.TrackedDeviceOrientation
      VB:
      - id: Global.InputSystem_Actions.UIActions.TrackedDeviceOrientation*
        name: TrackedDeviceOrientation
        nameWithType: InputSystem_Actions.UIActions.TrackedDeviceOrientation
        qualifiedName: InputSystem_Actions.UIActions.TrackedDeviceOrientation
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.UIActions.TrackedDeviceOrientation
  Global.InputSystem_Actions.UIActions.Get*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.UIActions.Get*
        name: Get
        nameWithType: InputSystem_Actions.UIActions.Get
        qualifiedName: InputSystem_Actions.UIActions.Get
      VB:
      - id: Global.InputSystem_Actions.UIActions.Get*
        name: Get
        nameWithType: InputSystem_Actions.UIActions.Get
        qualifiedName: InputSystem_Actions.UIActions.Get
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.UIActions.Get
  Global.InputSystem_Actions.UIActions.Enable*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.UIActions.Enable*
        name: Enable
        nameWithType: InputSystem_Actions.UIActions.Enable
        qualifiedName: InputSystem_Actions.UIActions.Enable
      VB:
      - id: Global.InputSystem_Actions.UIActions.Enable*
        name: Enable
        nameWithType: InputSystem_Actions.UIActions.Enable
        qualifiedName: InputSystem_Actions.UIActions.Enable
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.UIActions.Enable
  Global.InputSystem_Actions.UIActions.Disable*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.UIActions.Disable*
        name: Disable
        nameWithType: InputSystem_Actions.UIActions.Disable
        qualifiedName: InputSystem_Actions.UIActions.Disable
      VB:
      - id: Global.InputSystem_Actions.UIActions.Disable*
        name: Disable
        nameWithType: InputSystem_Actions.UIActions.Disable
        qualifiedName: InputSystem_Actions.UIActions.Disable
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.UIActions.Disable
  Global.InputSystem_Actions.UIActions.enabled*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.UIActions.enabled*
        name: enabled
        nameWithType: InputSystem_Actions.UIActions.enabled
        qualifiedName: InputSystem_Actions.UIActions.enabled
      VB:
      - id: Global.InputSystem_Actions.UIActions.enabled*
        name: enabled
        nameWithType: InputSystem_Actions.UIActions.enabled
        qualifiedName: InputSystem_Actions.UIActions.enabled
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.UIActions.enabled
  Global.InputSystem_Actions.UIActions.op_Implicit*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.UIActions.op_Implicit*
        name: Implicit
        nameWithType: InputSystem_Actions.UIActions.Implicit
        qualifiedName: InputSystem_Actions.UIActions.Implicit
      VB:
      - id: Global.InputSystem_Actions.UIActions.op_Implicit*
        name: Widening
        nameWithType: InputSystem_Actions.UIActions.Widening
        qualifiedName: InputSystem_Actions.UIActions.Widening
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.UIActions.op_Implicit
  Global.InputSystem_Actions.IUIActions:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.IUIActions
        name: InputSystem_Actions.IUIActions
        nameWithType: InputSystem_Actions.IUIActions
        qualifiedName: InputSystem_Actions.IUIActions
      VB:
      - id: Global.InputSystem_Actions.IUIActions
        name: InputSystem_Actions.IUIActions
        nameWithType: InputSystem_Actions.IUIActions
        qualifiedName: InputSystem_Actions.IUIActions
    isDefinition: true
    commentId: T:Global.InputSystem_Actions.IUIActions
  Global.InputSystem_Actions.UIActions.AddCallbacks*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.UIActions.AddCallbacks*
        name: AddCallbacks
        nameWithType: InputSystem_Actions.UIActions.AddCallbacks
        qualifiedName: InputSystem_Actions.UIActions.AddCallbacks
      VB:
      - id: Global.InputSystem_Actions.UIActions.AddCallbacks*
        name: AddCallbacks
        nameWithType: InputSystem_Actions.UIActions.AddCallbacks
        qualifiedName: InputSystem_Actions.UIActions.AddCallbacks
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.UIActions.AddCallbacks
  Global.InputSystem_Actions.UIActions.RemoveCallbacks*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.UIActions.RemoveCallbacks*
        name: RemoveCallbacks
        nameWithType: InputSystem_Actions.UIActions.RemoveCallbacks
        qualifiedName: InputSystem_Actions.UIActions.RemoveCallbacks
      VB:
      - id: Global.InputSystem_Actions.UIActions.RemoveCallbacks*
        name: RemoveCallbacks
        nameWithType: InputSystem_Actions.UIActions.RemoveCallbacks
        qualifiedName: InputSystem_Actions.UIActions.RemoveCallbacks
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.UIActions.RemoveCallbacks
  Global.InputSystem_Actions.UIActions.SetCallbacks*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.UIActions.SetCallbacks*
        name: SetCallbacks
        nameWithType: InputSystem_Actions.UIActions.SetCallbacks
        qualifiedName: InputSystem_Actions.UIActions.SetCallbacks
      VB:
      - id: Global.InputSystem_Actions.UIActions.SetCallbacks*
        name: SetCallbacks
        nameWithType: InputSystem_Actions.UIActions.SetCallbacks
        qualifiedName: InputSystem_Actions.UIActions.SetCallbacks
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.UIActions.SetCallbacks
  Global.InputAction.CallbackContext:
    name:
      CSharp:
      - id: Global.InputAction.CallbackContext
        name: InputAction.CallbackContext
        nameWithType: InputAction.CallbackContext
        qualifiedName: InputAction.CallbackContext
        isExternal: true
      VB:
      - id: Global.InputAction.CallbackContext
        name: InputAction.CallbackContext
        nameWithType: InputAction.CallbackContext
        qualifiedName: InputAction.CallbackContext
        isExternal: true
    isDefinition: true
  Global.InputSystem_Actions.IPlayerActions.OnMove*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.IPlayerActions.OnMove*
        name: OnMove
        nameWithType: InputSystem_Actions.IPlayerActions.OnMove
        qualifiedName: InputSystem_Actions.IPlayerActions.OnMove
      VB:
      - id: Global.InputSystem_Actions.IPlayerActions.OnMove*
        name: OnMove
        nameWithType: InputSystem_Actions.IPlayerActions.OnMove
        qualifiedName: InputSystem_Actions.IPlayerActions.OnMove
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.IPlayerActions.OnMove
  Global.InputSystem_Actions.IPlayerActions.OnLook*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.IPlayerActions.OnLook*
        name: OnLook
        nameWithType: InputSystem_Actions.IPlayerActions.OnLook
        qualifiedName: InputSystem_Actions.IPlayerActions.OnLook
      VB:
      - id: Global.InputSystem_Actions.IPlayerActions.OnLook*
        name: OnLook
        nameWithType: InputSystem_Actions.IPlayerActions.OnLook
        qualifiedName: InputSystem_Actions.IPlayerActions.OnLook
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.IPlayerActions.OnLook
  Global.InputSystem_Actions.IPlayerActions.OnInteract*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.IPlayerActions.OnInteract*
        name: OnInteract
        nameWithType: InputSystem_Actions.IPlayerActions.OnInteract
        qualifiedName: InputSystem_Actions.IPlayerActions.OnInteract
      VB:
      - id: Global.InputSystem_Actions.IPlayerActions.OnInteract*
        name: OnInteract
        nameWithType: InputSystem_Actions.IPlayerActions.OnInteract
        qualifiedName: InputSystem_Actions.IPlayerActions.OnInteract
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.IPlayerActions.OnInteract
  Global.InputSystem_Actions.IUIActions.OnNavigate*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.IUIActions.OnNavigate*
        name: OnNavigate
        nameWithType: InputSystem_Actions.IUIActions.OnNavigate
        qualifiedName: InputSystem_Actions.IUIActions.OnNavigate
      VB:
      - id: Global.InputSystem_Actions.IUIActions.OnNavigate*
        name: OnNavigate
        nameWithType: InputSystem_Actions.IUIActions.OnNavigate
        qualifiedName: InputSystem_Actions.IUIActions.OnNavigate
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.IUIActions.OnNavigate
  Global.InputSystem_Actions.IUIActions.OnSubmit*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.IUIActions.OnSubmit*
        name: OnSubmit
        nameWithType: InputSystem_Actions.IUIActions.OnSubmit
        qualifiedName: InputSystem_Actions.IUIActions.OnSubmit
      VB:
      - id: Global.InputSystem_Actions.IUIActions.OnSubmit*
        name: OnSubmit
        nameWithType: InputSystem_Actions.IUIActions.OnSubmit
        qualifiedName: InputSystem_Actions.IUIActions.OnSubmit
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.IUIActions.OnSubmit
  Global.InputSystem_Actions.IUIActions.OnCancel*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.IUIActions.OnCancel*
        name: OnCancel
        nameWithType: InputSystem_Actions.IUIActions.OnCancel
        qualifiedName: InputSystem_Actions.IUIActions.OnCancel
      VB:
      - id: Global.InputSystem_Actions.IUIActions.OnCancel*
        name: OnCancel
        nameWithType: InputSystem_Actions.IUIActions.OnCancel
        qualifiedName: InputSystem_Actions.IUIActions.OnCancel
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.IUIActions.OnCancel
  Global.InputSystem_Actions.IUIActions.OnPoint*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.IUIActions.OnPoint*
        name: OnPoint
        nameWithType: InputSystem_Actions.IUIActions.OnPoint
        qualifiedName: InputSystem_Actions.IUIActions.OnPoint
      VB:
      - id: Global.InputSystem_Actions.IUIActions.OnPoint*
        name: OnPoint
        nameWithType: InputSystem_Actions.IUIActions.OnPoint
        qualifiedName: InputSystem_Actions.IUIActions.OnPoint
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.IUIActions.OnPoint
  Global.InputSystem_Actions.IUIActions.OnClick*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.IUIActions.OnClick*
        name: OnClick
        nameWithType: InputSystem_Actions.IUIActions.OnClick
        qualifiedName: InputSystem_Actions.IUIActions.OnClick
      VB:
      - id: Global.InputSystem_Actions.IUIActions.OnClick*
        name: OnClick
        nameWithType: InputSystem_Actions.IUIActions.OnClick
        qualifiedName: InputSystem_Actions.IUIActions.OnClick
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.IUIActions.OnClick
  Global.InputSystem_Actions.IUIActions.OnRightClick*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.IUIActions.OnRightClick*
        name: OnRightClick
        nameWithType: InputSystem_Actions.IUIActions.OnRightClick
        qualifiedName: InputSystem_Actions.IUIActions.OnRightClick
      VB:
      - id: Global.InputSystem_Actions.IUIActions.OnRightClick*
        name: OnRightClick
        nameWithType: InputSystem_Actions.IUIActions.OnRightClick
        qualifiedName: InputSystem_Actions.IUIActions.OnRightClick
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.IUIActions.OnRightClick
  Global.InputSystem_Actions.IUIActions.OnMiddleClick*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.IUIActions.OnMiddleClick*
        name: OnMiddleClick
        nameWithType: InputSystem_Actions.IUIActions.OnMiddleClick
        qualifiedName: InputSystem_Actions.IUIActions.OnMiddleClick
      VB:
      - id: Global.InputSystem_Actions.IUIActions.OnMiddleClick*
        name: OnMiddleClick
        nameWithType: InputSystem_Actions.IUIActions.OnMiddleClick
        qualifiedName: InputSystem_Actions.IUIActions.OnMiddleClick
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.IUIActions.OnMiddleClick
  Global.InputSystem_Actions.IUIActions.OnScrollWheel*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.IUIActions.OnScrollWheel*
        name: OnScrollWheel
        nameWithType: InputSystem_Actions.IUIActions.OnScrollWheel
        qualifiedName: InputSystem_Actions.IUIActions.OnScrollWheel
      VB:
      - id: Global.InputSystem_Actions.IUIActions.OnScrollWheel*
        name: OnScrollWheel
        nameWithType: InputSystem_Actions.IUIActions.OnScrollWheel
        qualifiedName: InputSystem_Actions.IUIActions.OnScrollWheel
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.IUIActions.OnScrollWheel
  Global.InputSystem_Actions.IUIActions.OnTrackedDevicePosition*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.IUIActions.OnTrackedDevicePosition*
        name: OnTrackedDevicePosition
        nameWithType: InputSystem_Actions.IUIActions.OnTrackedDevicePosition
        qualifiedName: InputSystem_Actions.IUIActions.OnTrackedDevicePosition
      VB:
      - id: Global.InputSystem_Actions.IUIActions.OnTrackedDevicePosition*
        name: OnTrackedDevicePosition
        nameWithType: InputSystem_Actions.IUIActions.OnTrackedDevicePosition
        qualifiedName: InputSystem_Actions.IUIActions.OnTrackedDevicePosition
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.IUIActions.OnTrackedDevicePosition
  Global.InputSystem_Actions.IUIActions.OnTrackedDeviceOrientation*:
    name:
      CSharp:
      - id: Global.InputSystem_Actions.IUIActions.OnTrackedDeviceOrientation*
        name: OnTrackedDeviceOrientation
        nameWithType: InputSystem_Actions.IUIActions.OnTrackedDeviceOrientation
        qualifiedName: InputSystem_Actions.IUIActions.OnTrackedDeviceOrientation
      VB:
      - id: Global.InputSystem_Actions.IUIActions.OnTrackedDeviceOrientation*
        name: OnTrackedDeviceOrientation
        nameWithType: InputSystem_Actions.IUIActions.OnTrackedDeviceOrientation
        qualifiedName: InputSystem_Actions.IUIActions.OnTrackedDeviceOrientation
    isDefinition: true
    commentId: Overload:Global.InputSystem_Actions.IUIActions.OnTrackedDeviceOrientation
  Global.StateMachine:
    name:
      CSharp:
      - id: Global.StateMachine
        name: StateMachine
        nameWithType: StateMachine
        qualifiedName: StateMachine
      VB:
      - id: Global.StateMachine
        name: StateMachine
        nameWithType: StateMachine
        qualifiedName: StateMachine
    isDefinition: true
    commentId: T:Global.StateMachine
  Global.StateMachine.CurrentState:
    name:
      CSharp:
      - id: Global.StateMachine.CurrentState
        name: CurrentState
        nameWithType: StateMachine.CurrentState
        qualifiedName: StateMachine.CurrentState
      VB:
      - id: Global.StateMachine.CurrentState
        name: CurrentState
        nameWithType: StateMachine.CurrentState
        qualifiedName: StateMachine.CurrentState
    isDefinition: true
    parent: Global.StateMachine
    commentId: F:Global.StateMachine.CurrentState
  Global.StateMachine.OnStateChanged(IState):
    name:
      CSharp:
      - id: Global.StateMachine.OnStateChanged(IState)
        name: OnStateChanged
        nameWithType: StateMachine.OnStateChanged
        qualifiedName: StateMachine.OnStateChanged
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.IState
        name: IState
        nameWithType: IState
        qualifiedName: IState
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.StateMachine.OnStateChanged(IState)
        name: OnStateChanged
        nameWithType: StateMachine.OnStateChanged
        qualifiedName: StateMachine.OnStateChanged
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.IState
        name: IState
        nameWithType: IState
        qualifiedName: IState
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.StateMachine
    commentId: M:Global.StateMachine.OnStateChanged(IState)
  Global.StateMachine.ChangeState(IState):
    name:
      CSharp:
      - id: Global.StateMachine.ChangeState(IState)
        name: ChangeState
        nameWithType: StateMachine.ChangeState
        qualifiedName: StateMachine.ChangeState
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.IState
        name: IState
        nameWithType: IState
        qualifiedName: IState
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.StateMachine.ChangeState(IState)
        name: ChangeState
        nameWithType: StateMachine.ChangeState
        qualifiedName: StateMachine.ChangeState
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.IState
        name: IState
        nameWithType: IState
        qualifiedName: IState
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.StateMachine
    commentId: M:Global.StateMachine.ChangeState(IState)
  Global.Animator:
    name:
      CSharp:
      - id: Global.Animator
        name: Animator
        nameWithType: Animator
        qualifiedName: Animator
        isExternal: true
      VB:
      - id: Global.Animator
        name: Animator
        nameWithType: Animator
        qualifiedName: Animator
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Animator'
  Global.Movement:
    name:
      CSharp:
      - id: Global.Movement
        name: Movement
        nameWithType: Movement
        qualifiedName: Movement
      VB:
      - id: Global.Movement
        name: Movement
        nameWithType: Movement
        qualifiedName: Movement
    isDefinition: true
    commentId: T:Global.Movement
  Global.StateMachine.Start:
    name:
      CSharp:
      - id: Global.StateMachine.Start
        name: Start
        nameWithType: StateMachine.Start
        qualifiedName: StateMachine.Start
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.StateMachine.Start
        name: Start
        nameWithType: StateMachine.Start
        qualifiedName: StateMachine.Start
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.StateMachine
    commentId: M:Global.StateMachine.Start
  Global.CharacterBase.Start*:
    name:
      CSharp:
      - id: Global.CharacterBase.Start*
        name: Start
        nameWithType: CharacterBase.Start
        qualifiedName: CharacterBase.Start
      VB:
      - id: Global.CharacterBase.Start*
        name: Start
        nameWithType: CharacterBase.Start
        qualifiedName: CharacterBase.Start
    isDefinition: true
    commentId: Overload:Global.CharacterBase.Start
  Global.CharacterBase.Update*:
    name:
      CSharp:
      - id: Global.CharacterBase.Update*
        name: Update
        nameWithType: CharacterBase.Update
        qualifiedName: CharacterBase.Update
      VB:
      - id: Global.CharacterBase.Update*
        name: Update
        nameWithType: CharacterBase.Update
        qualifiedName: CharacterBase.Update
    isDefinition: true
    commentId: Overload:Global.CharacterBase.Update
  Global.CharacterBase:
    name:
      CSharp:
      - id: Global.CharacterBase
        name: CharacterBase
        nameWithType: CharacterBase
        qualifiedName: CharacterBase
      VB:
      - id: Global.CharacterBase
        name: CharacterBase
        nameWithType: CharacterBase
        qualifiedName: CharacterBase
    isDefinition: true
    commentId: T:Global.CharacterBase
  Global.NPCModel:
    name:
      CSharp:
      - id: Global.NPCModel
        name: NPCModel
        nameWithType: NPCModel
        qualifiedName: NPCModel
      VB:
      - id: Global.NPCModel
        name: NPCModel
        nameWithType: NPCModel
        qualifiedName: NPCModel
    isDefinition: true
    commentId: T:Global.NPCModel
  Global.NPCPresenter:
    name:
      CSharp:
      - id: Global.NPCPresenter
        name: NPCPresenter
        nameWithType: NPCPresenter
        qualifiedName: NPCPresenter
      VB:
      - id: Global.NPCPresenter
        name: NPCPresenter
        nameWithType: NPCPresenter
        qualifiedName: NPCPresenter
    isDefinition: true
    commentId: T:Global.NPCPresenter
  Global.NPCIdleState:
    name:
      CSharp:
      - id: Global.NPCIdleState
        name: NPCIdleState
        nameWithType: NPCIdleState
        qualifiedName: NPCIdleState
      VB:
      - id: Global.NPCIdleState
        name: NPCIdleState
        nameWithType: NPCIdleState
        qualifiedName: NPCIdleState
    isDefinition: true
    commentId: T:Global.NPCIdleState
  Global.NPCView:
    name:
      CSharp:
      - id: Global.NPCView
        name: NPCView
        nameWithType: NPCView
        qualifiedName: NPCView
      VB:
      - id: Global.NPCView
        name: NPCView
        nameWithType: NPCView
        qualifiedName: NPCView
    isDefinition: true
    commentId: T:Global.NPCView
  Global.PlayerModel:
    name:
      CSharp:
      - id: Global.PlayerModel
        name: PlayerModel
        nameWithType: PlayerModel
        qualifiedName: PlayerModel
      VB:
      - id: Global.PlayerModel
        name: PlayerModel
        nameWithType: PlayerModel
        qualifiedName: PlayerModel
    isDefinition: true
    commentId: T:Global.PlayerModel
  Global.PlayerPresenter:
    name:
      CSharp:
      - id: Global.PlayerPresenter
        name: PlayerPresenter
        nameWithType: PlayerPresenter
        qualifiedName: PlayerPresenter
      VB:
      - id: Global.PlayerPresenter
        name: PlayerPresenter
        nameWithType: PlayerPresenter
        qualifiedName: PlayerPresenter
    isDefinition: true
    commentId: T:Global.PlayerPresenter
  Global.PlayerIdleState:
    name:
      CSharp:
      - id: Global.PlayerIdleState
        name: PlayerIdleState
        nameWithType: PlayerIdleState
        qualifiedName: PlayerIdleState
      VB:
      - id: Global.PlayerIdleState
        name: PlayerIdleState
        nameWithType: PlayerIdleState
        qualifiedName: PlayerIdleState
    isDefinition: true
    commentId: T:Global.PlayerIdleState
  Global.PlayerView:
    name:
      CSharp:
      - id: Global.PlayerView
        name: PlayerView
        nameWithType: PlayerView
        qualifiedName: PlayerView
      VB:
      - id: Global.PlayerView
        name: PlayerView
        nameWithType: PlayerView
        qualifiedName: PlayerView
    isDefinition: true
    commentId: T:Global.PlayerView
  Global.ReactiveProperty`1:
    name:
      CSharp:
      - id: Global.ReactiveProperty`1
        name: ReactiveProperty
        nameWithType: ReactiveProperty
        qualifiedName: ReactiveProperty
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.ReactiveProperty`1
        name: ReactiveProperty
        nameWithType: ReactiveProperty
        qualifiedName: ReactiveProperty
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Global.ReactiveProperty`1
  Global.ReactiveProperty{Vector2}:
    name:
      CSharp:
      - id: Global.ReactiveProperty`1
        name: ReactiveProperty
        nameWithType: ReactiveProperty
        qualifiedName: ReactiveProperty
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.ReactiveProperty`1
        name: ReactiveProperty
        nameWithType: ReactiveProperty
        qualifiedName: ReactiveProperty
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.ReactiveProperty`1
    commentId: T:Global.ReactiveProperty{Vector2}
  Global.InputHandler.MovementDirection*:
    name:
      CSharp:
      - id: Global.InputHandler.MovementDirection*
        name: MovementDirection
        nameWithType: InputHandler.MovementDirection
        qualifiedName: InputHandler.MovementDirection
      VB:
      - id: Global.InputHandler.MovementDirection*
        name: MovementDirection
        nameWithType: InputHandler.MovementDirection
        qualifiedName: InputHandler.MovementDirection
    isDefinition: true
    commentId: Overload:Global.InputHandler.MovementDirection
  Global.InputHandler.OnMove*:
    name:
      CSharp:
      - id: Global.InputHandler.OnMove*
        name: OnMove
        nameWithType: InputHandler.OnMove
        qualifiedName: InputHandler.OnMove
      VB:
      - id: Global.InputHandler.OnMove*
        name: OnMove
        nameWithType: InputHandler.OnMove
        qualifiedName: InputHandler.OnMove
    isDefinition: true
    commentId: Overload:Global.InputHandler.OnMove
  Global.InputSystem_Actions.IPlayerActions.OnMove(InputAction.CallbackContext):
    name:
      CSharp:
      - id: Global.InputSystem_Actions.IPlayerActions.OnMove(InputAction.CallbackContext)
        name: OnMove
        nameWithType: InputSystem_Actions.IPlayerActions.OnMove
        qualifiedName: InputSystem_Actions.IPlayerActions.OnMove
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.InputAction.CallbackContext
        name: InputAction.CallbackContext
        nameWithType: InputAction.CallbackContext
        qualifiedName: InputAction.CallbackContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.InputSystem_Actions.IPlayerActions.OnMove(InputAction.CallbackContext)
        name: OnMove
        nameWithType: InputSystem_Actions.IPlayerActions.OnMove
        qualifiedName: InputSystem_Actions.IPlayerActions.OnMove
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.InputAction.CallbackContext
        name: InputAction.CallbackContext
        nameWithType: InputAction.CallbackContext
        qualifiedName: InputAction.CallbackContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.InputSystem_Actions.IPlayerActions
    commentId: M:Global.InputSystem_Actions.IPlayerActions.OnMove(InputAction.CallbackContext)
  Global.UnityEngine.InputSystem.InputAction.CallbackContext:
    name:
      CSharp:
      - id: Global.UnityEngine.InputSystem.InputAction.CallbackContext
        name: UnityEngine.InputSystem.InputAction.CallbackContext
        nameWithType: UnityEngine.InputSystem.InputAction.CallbackContext
        qualifiedName: UnityEngine.InputSystem.InputAction.CallbackContext
        isExternal: true
      VB:
      - id: Global.UnityEngine.InputSystem.InputAction.CallbackContext
        name: UnityEngine.InputSystem.InputAction.CallbackContext
        nameWithType: UnityEngine.InputSystem.InputAction.CallbackContext
        qualifiedName: UnityEngine.InputSystem.InputAction.CallbackContext
        isExternal: true
    isDefinition: true
  Global.InputHandler.OnLook*:
    name:
      CSharp:
      - id: Global.InputHandler.OnLook*
        name: OnLook
        nameWithType: InputHandler.OnLook
        qualifiedName: InputHandler.OnLook
      VB:
      - id: Global.InputHandler.OnLook*
        name: OnLook
        nameWithType: InputHandler.OnLook
        qualifiedName: InputHandler.OnLook
    isDefinition: true
    commentId: Overload:Global.InputHandler.OnLook
  Global.InputHandler.OnInteract*:
    name:
      CSharp:
      - id: Global.InputHandler.OnInteract*
        name: OnInteract
        nameWithType: InputHandler.OnInteract
        qualifiedName: InputHandler.OnInteract
      VB:
      - id: Global.InputHandler.OnInteract*
        name: OnInteract
        nameWithType: InputHandler.OnInteract
        qualifiedName: InputHandler.OnInteract
    isDefinition: true
    commentId: Overload:Global.InputHandler.OnInteract
  Global.InputHandler:
    name:
      CSharp:
      - id: Global.InputHandler
        name: InputHandler
        nameWithType: InputHandler
        qualifiedName: InputHandler
      VB:
      - id: Global.InputHandler
        name: InputHandler
        nameWithType: InputHandler
        qualifiedName: InputHandler
    isDefinition: true
    commentId: T:Global.InputHandler
  Global.Action:
    name:
      CSharp:
      - id: Global.Action
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      VB:
      - id: Global.Action
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Action'
  Global.DisposableAction.#ctor*:
    name:
      CSharp:
      - id: Global.DisposableAction.#ctor*
        name: DisposableAction
        nameWithType: DisposableAction.DisposableAction
        qualifiedName: DisposableAction.DisposableAction
      VB:
      - id: Global.DisposableAction.#ctor*
        name: DisposableAction
        nameWithType: DisposableAction.DisposableAction
        qualifiedName: DisposableAction.DisposableAction
    isDefinition: true
    commentId: Overload:Global.DisposableAction.#ctor
  Global.DisposableAction.Dispose*:
    name:
      CSharp:
      - id: Global.DisposableAction.Dispose*
        name: Dispose
        nameWithType: DisposableAction.Dispose
        qualifiedName: DisposableAction.Dispose
      VB:
      - id: Global.DisposableAction.Dispose*
        name: Dispose
        nameWithType: DisposableAction.Dispose
        qualifiedName: DisposableAction.Dispose
    isDefinition: true
    commentId: Overload:Global.DisposableAction.Dispose
  Global.DisposableAction:
    name:
      CSharp:
      - id: Global.DisposableAction
        name: DisposableAction
        nameWithType: DisposableAction
        qualifiedName: DisposableAction
      VB:
      - id: Global.DisposableAction
        name: DisposableAction
        nameWithType: DisposableAction
        qualifiedName: DisposableAction
    isDefinition: true
    commentId: T:Global.DisposableAction
  Global.IState.Enter*:
    name:
      CSharp:
      - id: Global.IState.Enter*
        name: Enter
        nameWithType: IState.Enter
        qualifiedName: IState.Enter
      VB:
      - id: Global.IState.Enter*
        name: Enter
        nameWithType: IState.Enter
        qualifiedName: IState.Enter
    isDefinition: true
    commentId: Overload:Global.IState.Enter
  Global.IState.Update*:
    name:
      CSharp:
      - id: Global.IState.Update*
        name: Update
        nameWithType: IState.Update
        qualifiedName: IState.Update
      VB:
      - id: Global.IState.Update*
        name: Update
        nameWithType: IState.Update
        qualifiedName: IState.Update
    isDefinition: true
    commentId: Overload:Global.IState.Update
  Global.IState.Exit*:
    name:
      CSharp:
      - id: Global.IState.Exit*
        name: Exit
        nameWithType: IState.Exit
        qualifiedName: IState.Exit
      VB:
      - id: Global.IState.Exit*
        name: Exit
        nameWithType: IState.Exit
        qualifiedName: IState.Exit
    isDefinition: true
    commentId: Overload:Global.IState.Exit
  Global.IState:
    name:
      CSharp:
      - id: Global.IState
        name: IState
        nameWithType: IState
        qualifiedName: IState
      VB:
      - id: Global.IState
        name: IState
        nameWithType: IState
        qualifiedName: IState
    isDefinition: true
    commentId: T:Global.IState
  Global.ReactiveProperty{IState}:
    name:
      CSharp:
      - id: Global.ReactiveProperty`1
        name: ReactiveProperty
        nameWithType: ReactiveProperty
        qualifiedName: ReactiveProperty
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.IState
        name: IState
        nameWithType: IState
        qualifiedName: IState
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.ReactiveProperty`1
        name: ReactiveProperty
        nameWithType: ReactiveProperty
        qualifiedName: ReactiveProperty
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.IState
        name: IState
        nameWithType: IState
        qualifiedName: IState
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.ReactiveProperty`1
    commentId: T:Global.ReactiveProperty{IState}
  Global.StateMachine.Start*:
    name:
      CSharp:
      - id: Global.StateMachine.Start*
        name: Start
        nameWithType: StateMachine.Start
        qualifiedName: StateMachine.Start
      VB:
      - id: Global.StateMachine.Start*
        name: Start
        nameWithType: StateMachine.Start
        qualifiedName: StateMachine.Start
    isDefinition: true
    commentId: Overload:Global.StateMachine.Start
  Global.StateMachine.OnStateChanged*:
    name:
      CSharp:
      - id: Global.StateMachine.OnStateChanged*
        name: OnStateChanged
        nameWithType: StateMachine.OnStateChanged
        qualifiedName: StateMachine.OnStateChanged
      VB:
      - id: Global.StateMachine.OnStateChanged*
        name: OnStateChanged
        nameWithType: StateMachine.OnStateChanged
        qualifiedName: StateMachine.OnStateChanged
    isDefinition: true
    commentId: Overload:Global.StateMachine.OnStateChanged
  Global.StateMachine.ChangeState*:
    name:
      CSharp:
      - id: Global.StateMachine.ChangeState*
        name: ChangeState
        nameWithType: StateMachine.ChangeState
        qualifiedName: StateMachine.ChangeState
      VB:
      - id: Global.StateMachine.ChangeState*
        name: ChangeState
        nameWithType: StateMachine.ChangeState
        qualifiedName: StateMachine.ChangeState
    isDefinition: true
    commentId: Overload:Global.StateMachine.ChangeState
  System.Single:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Single
  Global.WalkState.#ctor*:
    name:
      CSharp:
      - id: Global.WalkState.#ctor*
        name: WalkState
        nameWithType: WalkState.WalkState
        qualifiedName: WalkState.WalkState
      VB:
      - id: Global.WalkState.#ctor*
        name: WalkState
        nameWithType: WalkState.WalkState
        qualifiedName: WalkState.WalkState
    isDefinition: true
    commentId: Overload:Global.WalkState.#ctor
  Global.WalkState.Enter*:
    name:
      CSharp:
      - id: Global.WalkState.Enter*
        name: Enter
        nameWithType: WalkState.Enter
        qualifiedName: WalkState.Enter
      VB:
      - id: Global.WalkState.Enter*
        name: Enter
        nameWithType: WalkState.Enter
        qualifiedName: WalkState.Enter
    isDefinition: true
    commentId: Overload:Global.WalkState.Enter
  Global.IState.Enter:
    name:
      CSharp:
      - id: Global.IState.Enter
        name: Enter
        nameWithType: IState.Enter
        qualifiedName: IState.Enter
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.IState.Enter
        name: Enter
        nameWithType: IState.Enter
        qualifiedName: IState.Enter
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.IState
    commentId: M:Global.IState.Enter
  Global.WalkState.Exit*:
    name:
      CSharp:
      - id: Global.WalkState.Exit*
        name: Exit
        nameWithType: WalkState.Exit
        qualifiedName: WalkState.Exit
      VB:
      - id: Global.WalkState.Exit*
        name: Exit
        nameWithType: WalkState.Exit
        qualifiedName: WalkState.Exit
    isDefinition: true
    commentId: Overload:Global.WalkState.Exit
  Global.IState.Exit:
    name:
      CSharp:
      - id: Global.IState.Exit
        name: Exit
        nameWithType: IState.Exit
        qualifiedName: IState.Exit
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.IState.Exit
        name: Exit
        nameWithType: IState.Exit
        qualifiedName: IState.Exit
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.IState
    commentId: M:Global.IState.Exit
  Global.WalkState.Update*:
    name:
      CSharp:
      - id: Global.WalkState.Update*
        name: Update
        nameWithType: WalkState.Update
        qualifiedName: WalkState.Update
      VB:
      - id: Global.WalkState.Update*
        name: Update
        nameWithType: WalkState.Update
        qualifiedName: WalkState.Update
    isDefinition: true
    commentId: Overload:Global.WalkState.Update
  Global.IState.Update:
    name:
      CSharp:
      - id: Global.IState.Update
        name: Update
        nameWithType: IState.Update
        qualifiedName: IState.Update
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.IState.Update
        name: Update
        nameWithType: IState.Update
        qualifiedName: IState.Update
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.IState
    commentId: M:Global.IState.Update
  Global.WalkState:
    name:
      CSharp:
      - id: Global.WalkState
        name: WalkState
        nameWithType: WalkState
        qualifiedName: WalkState
      VB:
      - id: Global.WalkState
        name: WalkState
        nameWithType: WalkState
        qualifiedName: WalkState
    isDefinition: true
    commentId: T:Global.WalkState
  Global.GameInstaller.InstallBindings*:
    name:
      CSharp:
      - id: Global.GameInstaller.InstallBindings*
        name: InstallBindings
        nameWithType: GameInstaller.InstallBindings
        qualifiedName: GameInstaller.InstallBindings
      VB:
      - id: Global.GameInstaller.InstallBindings*
        name: InstallBindings
        nameWithType: GameInstaller.InstallBindings
        qualifiedName: GameInstaller.InstallBindings
    isDefinition: true
    commentId: Overload:Global.GameInstaller.InstallBindings
  Global.GameInstaller:
    name:
      CSharp:
      - id: Global.GameInstaller
        name: GameInstaller
        nameWithType: GameInstaller
        qualifiedName: GameInstaller
      VB:
      - id: Global.GameInstaller
        name: GameInstaller
        nameWithType: GameInstaller
        qualifiedName: GameInstaller
    isDefinition: true
    commentId: T:Global.GameInstaller
  Global.PlayerInstaller.InstallBindings*:
    name:
      CSharp:
      - id: Global.PlayerInstaller.InstallBindings*
        name: InstallBindings
        nameWithType: PlayerInstaller.InstallBindings
        qualifiedName: PlayerInstaller.InstallBindings
      VB:
      - id: Global.PlayerInstaller.InstallBindings*
        name: InstallBindings
        nameWithType: PlayerInstaller.InstallBindings
        qualifiedName: PlayerInstaller.InstallBindings
    isDefinition: true
    commentId: Overload:Global.PlayerInstaller.InstallBindings
  Global.PlayerInstaller:
    name:
      CSharp:
      - id: Global.PlayerInstaller
        name: PlayerInstaller
        nameWithType: PlayerInstaller
        qualifiedName: PlayerInstaller
      VB:
      - id: Global.PlayerInstaller
        name: PlayerInstaller
        nameWithType: PlayerInstaller
        qualifiedName: PlayerInstaller
    isDefinition: true
    commentId: T:Global.PlayerInstaller
  T:
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: true
  '{T}':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  Global.ReactiveProperty`1.Value*:
    name:
      CSharp:
      - id: Global.ReactiveProperty`1.Value*
        name: Value
        nameWithType: ReactiveProperty<T>.Value
        qualifiedName: ReactiveProperty<T>.Value
      VB:
      - id: Global.ReactiveProperty`1.Value*
        name: Value
        nameWithType: ReactiveProperty(Of T).Value
        qualifiedName: ReactiveProperty(Of T).Value
    isDefinition: true
    commentId: Overload:Global.ReactiveProperty`1.Value
  Global.ReactiveProperty`1.#ctor*:
    name:
      CSharp:
      - id: Global.ReactiveProperty`1.#ctor*
        name: ReactiveProperty
        nameWithType: ReactiveProperty<T>.ReactiveProperty
        qualifiedName: ReactiveProperty<T>.ReactiveProperty
      VB:
      - id: Global.ReactiveProperty`1.#ctor*
        name: ReactiveProperty
        nameWithType: ReactiveProperty(Of T).ReactiveProperty
        qualifiedName: ReactiveProperty(Of T).ReactiveProperty
    isDefinition: true
    commentId: Overload:Global.ReactiveProperty`1.#ctor
  Global.Action`1:
    name:
      CSharp:
      - id: Global.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:Global.Action`1'
  Global.Action{{T}}:
    name:
      CSharp:
      - id: Global.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.Action`1
    commentId: '!:Global.Action{`0}'
  Global.ReactiveProperty`1.Subscribe*:
    name:
      CSharp:
      - id: Global.ReactiveProperty`1.Subscribe*
        name: Subscribe
        nameWithType: ReactiveProperty<T>.Subscribe
        qualifiedName: ReactiveProperty<T>.Subscribe
      VB:
      - id: Global.ReactiveProperty`1.Subscribe*
        name: Subscribe
        nameWithType: ReactiveProperty(Of T).Subscribe
        qualifiedName: ReactiveProperty(Of T).Subscribe
    isDefinition: true
    commentId: Overload:Global.ReactiveProperty`1.Subscribe
  Global.ReactiveProperty`1.Dispose*:
    name:
      CSharp:
      - id: Global.ReactiveProperty`1.Dispose*
        name: Dispose
        nameWithType: ReactiveProperty<T>.Dispose
        qualifiedName: ReactiveProperty<T>.Dispose
      VB:
      - id: Global.ReactiveProperty`1.Dispose*
        name: Dispose
        nameWithType: ReactiveProperty(Of T).Dispose
        qualifiedName: ReactiveProperty(Of T).Dispose
    isDefinition: true
    commentId: Overload:Global.ReactiveProperty`1.Dispose
  Global:
    name:
      CSharp:
      - name: Global
        nameWithType: Global
        qualifiedName: Global
      VB:
      - name: ''
        nameWithType: ''
        qualifiedName: ''
    isDefinition: true
